
AVRGCC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002ca  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800062  00800062  00000360  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000360  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000090  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000c5  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000297  00000000  00000000  00000bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001bc  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000047b  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000116  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000016b  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000003c  00000000  00000000  000017d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  8a:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerInit>:
}

void TimerInit()
{
	//TIMER0
	TCCR0 |= (1 << WGM01) | (1 << CS01) | (1 << CS00);
  92:	83 b7       	in	r24, 0x33	; 51
  94:	8b 60       	ori	r24, 0x0B	; 11
  96:	83 bf       	out	0x33, r24	; 51
	OCR0 = 20;
  98:	84 e1       	ldi	r24, 0x14	; 20
  9a:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0);
  9c:	89 b7       	in	r24, 0x39	; 57
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	89 bf       	out	0x39, r24	; 57
// 	TCCR1B |= (1<<WGM12) | (1<<CS10);
// 	OCR1A = 10;
// 	TIMSK |= (1 << OCIE1A);		
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	8e 60       	ori	r24, 0x0E	; 14
  a6:	85 bd       	out	0x25, r24	; 37
	OCR2 = 10;
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
  ac:	89 b7       	in	r24, 0x39	; 57
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	89 bf       	out	0x39, r24	; 57
}
  b2:	08 95       	ret

000000b4 <__vector_19>:

ISR(TIMER0_COMP_vect)
{	
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
	
}
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <NumToArr>:
	j++;
	j %= 4;
}

void NumToArr(int numbr)
{	
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	e4 e6       	ldi	r30, 0x64	; 100
  ce:	f0 e0       	ldi	r31, 0x00	; 0
	PORTA = (1 << (7 - j));			
	j++;
	j %= 4;
}

void NumToArr(int numbr)
  d0:	ef 01       	movw	r28, r30
  d2:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
  d4:	2a e0       	ldi	r18, 0x0A	; 10
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	b9 01       	movw	r22, r18
  da:	0e 94 3c 01 	call	0x278	; 0x278 <__divmodhi4>
  de:	81 93       	st	Z+, r24
  e0:	91 93       	st	Z+, r25
		numbr /= 10;
  e2:	86 2f       	mov	r24, r22
  e4:	97 2f       	mov	r25, r23
	j %= 4;
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
  e6:	ec 17       	cp	r30, r28
  e8:	fd 07       	cpc	r31, r29
  ea:	b1 f7       	brne	.-20     	; 0xd8 <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <main>:
int arr[DIGITS];
int num = 1488;

int main(void)
{	
	DDRA = 0xF0;
  f2:	80 ef       	ldi	r24, 0xF0	; 240
  f4:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	84 bb       	out	0x14, r24	; 20
	DDRD |= RED | GREEN| BLUE | BTN1 | BTN2;
  fa:	81 b3       	in	r24, 0x11	; 17
  fc:	8c 6b       	ori	r24, 0xBC	; 188
  fe:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
 100:	8f e0       	ldi	r24, 0x0F	; 15
 102:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 104:	80 ec       	ldi	r24, 0xC0	; 192
 106:	8b bf       	out	0x3b, r24	; 59
		
	PORTA = 0x00;
 108:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 10a:	15 ba       	out	0x15, r1	; 21
	
	TimerInit();
 10c:	0e 94 49 00 	call	0x92	; 0x92 <TimerInit>
		
	PORTD = 0x0;
 110:	12 ba       	out	0x12, r1	; 18
	sei();
 112:	78 94       	sei
	
	while(1)
	{
		NumToArr(num);
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	90 91 61 00 	lds	r25, 0x0061
 11c:	0e 94 64 00 	call	0xc8	; 0xc8 <NumToArr>
 120:	f9 cf       	rjmp	.-14     	; 0x114 <main+0x22>

00000122 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 122:	84 30       	cpi	r24, 0x04	; 4
 124:	f9 f0       	breq	.+62     	; 0x164 <DecToDigit+0x42>
 126:	85 30       	cpi	r24, 0x05	; 5
 128:	48 f4       	brcc	.+18     	; 0x13c <DecToDigit+0x1a>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	49 f1       	breq	.+82     	; 0x180 <DecToDigit+0x5e>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	98 f0       	brcs	.+38     	; 0x158 <DecToDigit+0x36>
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	99 f0       	breq	.+38     	; 0x15c <DecToDigit+0x3a>
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	09 f5       	brne	.+66     	; 0x17c <DecToDigit+0x5a>
 13a:	12 c0       	rjmp	.+36     	; 0x160 <DecToDigit+0x3e>
 13c:	87 30       	cpi	r24, 0x07	; 7
 13e:	c1 f0       	breq	.+48     	; 0x170 <DecToDigit+0x4e>
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	28 f4       	brcc	.+10     	; 0x14e <DecToDigit+0x2c>
 144:	85 30       	cpi	r24, 0x05	; 5
 146:	81 f0       	breq	.+32     	; 0x168 <DecToDigit+0x46>
 148:	86 30       	cpi	r24, 0x06	; 6
 14a:	c1 f4       	brne	.+48     	; 0x17c <DecToDigit+0x5a>
 14c:	0f c0       	rjmp	.+30     	; 0x16c <DecToDigit+0x4a>
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	89 f0       	breq	.+34     	; 0x174 <DecToDigit+0x52>
 152:	89 30       	cpi	r24, 0x09	; 9
 154:	99 f4       	brne	.+38     	; 0x17c <DecToDigit+0x5a>
 156:	10 c0       	rjmp	.+32     	; 0x178 <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 158:	8f e5       	ldi	r24, 0x5F	; 95
 15a:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 15c:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 15e:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 160:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 162:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 164:	86 e6       	ldi	r24, 0x66	; 102
			break;
 166:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 168:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 16a:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 16c:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 16e:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 170:	87 e0       	ldi	r24, 0x07	; 7
			break;
 172:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 174:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 176:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 178:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 17a:	08 95       	ret
		default:
			Digit = 0b00000000;
 17c:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 17e:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 180:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
 182:	08 95       	ret

00000184 <__vector_3>:
{	
	
}

ISR(TIMER2_COMP_vect)
{	
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	PORTC = 0x00;
 1aa:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 1ac:	1b ba       	out	0x1b, r1	; 27
	
	PORTC = DecToDigit(arr[j]);	
 1ae:	c0 91 62 00 	lds	r28, 0x0062
 1b2:	d0 91 63 00 	lds	r29, 0x0063
 1b6:	fe 01       	movw	r30, r28
 1b8:	ee 0f       	add	r30, r30
 1ba:	ff 1f       	adc	r31, r31
 1bc:	ec 59       	subi	r30, 0x9C	; 156
 1be:	ff 4f       	sbci	r31, 0xFF	; 255
 1c0:	80 81       	ld	r24, Z
 1c2:	0e 94 91 00 	call	0x122	; 0x122 <DecToDigit>
 1c6:	85 bb       	out	0x15, r24	; 21
	
	if (j == 2)
 1c8:	c2 30       	cpi	r28, 0x02	; 2
 1ca:	d1 05       	cpc	r29, r1
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <__vector_3+0x4c>
	{			
		PORTC |= 0b10000000;	
 1ce:	af 9a       	sbi	0x15, 7	; 21
	}	
		
	PORTA = (1 << (7 - j));			
 1d0:	80 91 62 00 	lds	r24, 0x0062
 1d4:	90 91 63 00 	lds	r25, 0x0063
 1d8:	27 e0       	ldi	r18, 0x07	; 7
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	28 1b       	sub	r18, r24
 1de:	39 0b       	sbc	r19, r25
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	ba 01       	movw	r22, r20
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <__vector_3+0x68>
 1e8:	66 0f       	add	r22, r22
 1ea:	77 1f       	adc	r23, r23
 1ec:	2a 95       	dec	r18
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <__vector_3+0x64>
 1f0:	6b bb       	out	0x1b, r22	; 27
	j++;
 1f2:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 1f4:	64 e0       	ldi	r22, 0x04	; 4
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	0e 94 3c 01 	call	0x278	; 0x278 <__divmodhi4>
 1fc:	90 93 63 00 	sts	0x0063, r25
 200:	80 93 62 00 	sts	0x0062, r24
}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <UARTInit>:
#include "main.h"
#include "uartlib.h"

void UARTInit()
{		
	UCSRA = 0x00;
 22a:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 22c:	8a b1       	in	r24, 0x0a	; 10
 22e:	88 61       	ori	r24, 0x18	; 24
 230:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 232:	80 b5       	in	r24, 0x20	; 32
 234:	86 68       	ori	r24, 0x86	; 134
 236:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;
 238:	89 e1       	ldi	r24, 0x19	; 25
 23a:	89 b9       	out	0x09, r24	; 9
}
 23c:	08 95       	ret

0000023e <UARTSend>:

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
 23e:	5d 9b       	sbis	0x0b, 5	; 11
 240:	fe cf       	rjmp	.-4      	; 0x23e <UARTSend>
	{
				
	}		
	UDR = Value;
 242:	8c b9       	out	0x0c, r24	; 12
}
 244:	08 95       	ret

00000246 <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
 246:	5f 9b       	sbis	0x0b, 7	; 11
 248:	fe cf       	rjmp	.-4      	; 0x246 <UARTReceive>
	{
		
	}		
	return UDR; 
 24a:	8c b1       	in	r24, 0x0c	; 12
}
 24c:	08 95       	ret

0000024e <SendString>:

void SendString(char* str)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ec 01       	movw	r28, r24
	while(*str != '\0')
 254:	88 81       	ld	r24, Y
 256:	88 23       	and	r24, r24
 258:	31 f0       	breq	.+12     	; 0x266 <SendString+0x18>
		
	}		
	return UDR; 
}

void SendString(char* str)
 25a:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
 25c:	0e 94 1f 01 	call	0x23e	; 0x23e <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
 260:	89 91       	ld	r24, Y+
 262:	88 23       	and	r24, r24
 264:	d9 f7       	brne	.-10     	; 0x25c <SendString+0xe>
	{
		UARTSend(*str);
		str++;
	}
	//UARTSend(*str);
	UARTSend('\r');
 266:	8d e0       	ldi	r24, 0x0D	; 13
 268:	0e 94 1f 01 	call	0x23e	; 0x23e <UARTSend>
	UARTSend('\n');
 26c:	8a e0       	ldi	r24, 0x0A	; 10
 26e:	0e 94 1f 01 	call	0x23e	; 0x23e <UARTSend>
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <__divmodhi4>:
 278:	97 fb       	bst	r25, 7
 27a:	09 2e       	mov	r0, r25
 27c:	07 26       	eor	r0, r23
 27e:	0a d0       	rcall	.+20     	; 0x294 <__divmodhi4_neg1>
 280:	77 fd       	sbrc	r23, 7
 282:	04 d0       	rcall	.+8      	; 0x28c <__divmodhi4_neg2>
 284:	0c d0       	rcall	.+24     	; 0x29e <__udivmodhi4>
 286:	06 d0       	rcall	.+12     	; 0x294 <__divmodhi4_neg1>
 288:	00 20       	and	r0, r0
 28a:	1a f4       	brpl	.+6      	; 0x292 <__divmodhi4_exit>

0000028c <__divmodhi4_neg2>:
 28c:	70 95       	com	r23
 28e:	61 95       	neg	r22
 290:	7f 4f       	sbci	r23, 0xFF	; 255

00000292 <__divmodhi4_exit>:
 292:	08 95       	ret

00000294 <__divmodhi4_neg1>:
 294:	f6 f7       	brtc	.-4      	; 0x292 <__divmodhi4_exit>
 296:	90 95       	com	r25
 298:	81 95       	neg	r24
 29a:	9f 4f       	sbci	r25, 0xFF	; 255
 29c:	08 95       	ret

0000029e <__udivmodhi4>:
 29e:	aa 1b       	sub	r26, r26
 2a0:	bb 1b       	sub	r27, r27
 2a2:	51 e1       	ldi	r21, 0x11	; 17
 2a4:	07 c0       	rjmp	.+14     	; 0x2b4 <__udivmodhi4_ep>

000002a6 <__udivmodhi4_loop>:
 2a6:	aa 1f       	adc	r26, r26
 2a8:	bb 1f       	adc	r27, r27
 2aa:	a6 17       	cp	r26, r22
 2ac:	b7 07       	cpc	r27, r23
 2ae:	10 f0       	brcs	.+4      	; 0x2b4 <__udivmodhi4_ep>
 2b0:	a6 1b       	sub	r26, r22
 2b2:	b7 0b       	sbc	r27, r23

000002b4 <__udivmodhi4_ep>:
 2b4:	88 1f       	adc	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	5a 95       	dec	r21
 2ba:	a9 f7       	brne	.-22     	; 0x2a6 <__udivmodhi4_loop>
 2bc:	80 95       	com	r24
 2be:	90 95       	com	r25
 2c0:	bc 01       	movw	r22, r24
 2c2:	cd 01       	movw	r24, r26
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
