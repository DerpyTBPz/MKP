
AVRGCC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000050c  000005a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009c  00800064  00800064  000005a4  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016e  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000140  00000000  00000000  000010a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000051d  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002b4  00000000  00000000  00001703  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000066b  00000000  00000000  000019b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  00002024  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001c3  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000016b  00000000  00000000  000022d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000056  00000000  00000000  00002442  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 dd 00 	jmp	0x1ba	; 0x1ba <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 ac 01 	jmp	0x358	; 0x358 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 30       	cpi	r26, 0x00	; 0
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  8a:	0c 94 84 02 	jmp	0x508	; 0x508 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SendTime>:
		timeMode = 0;
	}
}

void SendTime()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	itoa(HH, string, 10);
  96:	c8 e7       	ldi	r28, 0x78	; 120
  98:	d0 e0       	ldi	r29, 0x00	; 0
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	90 91 61 00 	lds	r25, 0x0061
  a2:	be 01       	movw	r22, r28
  a4:	4a e0       	ldi	r20, 0x0A	; 10
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <itoa>
	SendString(string);
  ac:	ce 01       	movw	r24, r28
  ae:	0e 94 1d 02 	call	0x43a	; 0x43a <SendString>
	UARTSend(':');
  b2:	8a e3       	ldi	r24, 0x3A	; 58
  b4:	0e 94 15 02 	call	0x42a	; 0x42a <UARTSend>
	itoa(MM, string, 10);
  b8:	80 91 62 00 	lds	r24, 0x0062
  bc:	90 91 63 00 	lds	r25, 0x0063
  c0:	be 01       	movw	r22, r28
  c2:	4a e0       	ldi	r20, 0x0A	; 10
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <itoa>
	SendString(string);
  ca:	ce 01       	movw	r24, r28
  cc:	0e 94 1d 02 	call	0x43a	; 0x43a <SendString>
	UARTSend(':');
  d0:	8a e3       	ldi	r24, 0x3A	; 58
  d2:	0e 94 15 02 	call	0x42a	; 0x42a <UARTSend>
	itoa(SS, string, 10);
  d6:	80 91 66 00 	lds	r24, 0x0066
  da:	90 91 67 00 	lds	r25, 0x0067
  de:	be 01       	movw	r22, r28
  e0:	4a e0       	ldi	r20, 0x0A	; 10
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <itoa>
	SendString(string);	
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 1d 02 	call	0x43a	; 0x43a <SendString>
	
 	UARTSend('\r');
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	0e 94 15 02 	call	0x42a	; 0x42a <UARTSend>
 	UARTSend('\n');
  f4:	8a e0       	ldi	r24, 0x0A	; 10
  f6:	0e 94 15 02 	call	0x42a	; 0x42a <UARTSend>
			
	sendTime = 0;
  fa:	10 92 6b 00 	sts	0x006B, r1
  fe:	10 92 6a 00 	sts	0x006A, r1
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <TimerInit>:
// 	TCCR0 |= (1 << WGM00) | (1 << CS02) | (1 << CS00);
// 	OCR0 = 200;
// 	TIMSK |= (1 << OCIE0);

 	//TIMER1	
	TCNT1 |= 0;
 108:	8c b5       	in	r24, 0x2c	; 44
 10a:	9d b5       	in	r25, 0x2d	; 45
 10c:	9d bd       	out	0x2d, r25	; 45
 10e:	8c bd       	out	0x2c, r24	; 44
	OCR1A |= 15625;
 110:	8a b5       	in	r24, 0x2a	; 42
 112:	9b b5       	in	r25, 0x2b	; 43
 114:	89 60       	ori	r24, 0x09	; 9
 116:	9d 63       	ori	r25, 0x3D	; 61
 118:	9b bd       	out	0x2b, r25	; 43
 11a:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (1 << FOC1A);
 11c:	8f b5       	in	r24, 0x2f	; 47
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
 122:	8e b5       	in	r24, 0x2e	; 46
 124:	8b 60       	ori	r24, 0x0B	; 11
 126:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
 128:	89 b7       	in	r24, 0x39	; 57
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	89 bf       	out	0x39, r24	; 57
	
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
 12e:	85 b5       	in	r24, 0x25	; 37
 130:	8e 60       	ori	r24, 0x0E	; 14
 132:	85 bd       	out	0x25, r24	; 37
	OCR2 = 5;
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
 138:	89 b7       	in	r24, 0x39	; 57
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	89 bf       	out	0x39, r24	; 57
}
 13e:	08 95       	ret

00000140 <main>:
int sendTime = 0;
int timeMode = 0;
int flag = 0;

int main(void)
{	
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
	DDRA = 0xF0;
 144:	80 ef       	ldi	r24, 0xF0	; 240
 146:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	84 bb       	out	0x14, r24	; 20
	DDRD |= RED | GREEN | BLUE | BTN1 | BTN2;
 14c:	81 b3       	in	r24, 0x11	; 17
 14e:	8c 6b       	ori	r24, 0xBC	; 188
 150:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
 152:	8f e0       	ldi	r24, 0x0F	; 15
 154:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 156:	80 ec       	ldi	r24, 0xC0	; 192
 158:	8b bf       	out	0x3b, r24	; 59
	
	TimerInit();
 15a:	0e 94 84 00 	call	0x108	; 0x108 <TimerInit>
	UARTInit();
 15e:	0e 94 0b 02 	call	0x416	; 0x416 <UARTInit>
	
	sei();
 162:	78 94       	sei
	{
		SendTime();
		
		if (timeMode == 1)
		{
			PORTA = 0xF0;
 164:	00 ef       	ldi	r16, 0xF0	; 240
			PORTC = 0xFF;
 166:	1f ef       	ldi	r17, 0xFF	; 255
	
	sei();
	
	while(1)
	{
		SendTime();
 168:	0e 94 49 00 	call	0x92	; 0x92 <SendTime>
		
		if (timeMode == 1)
 16c:	80 91 6c 00 	lds	r24, 0x006C
 170:	90 91 6d 00 	lds	r25, 0x006D
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	91 05       	cpc	r25, r1
 178:	b9 f7       	brne	.-18     	; 0x168 <main+0x28>
		{
			PORTA = 0xF0;
 17a:	0b bb       	out	0x1b, r16	; 27
			PORTC = 0xFF;
 17c:	15 bb       	out	0x15, r17	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	8f e3       	ldi	r24, 0x3F	; 63
 180:	9d e0       	ldi	r25, 0x0D	; 13
 182:	a3 e0       	ldi	r26, 0x03	; 3
 184:	81 50       	subi	r24, 0x01	; 1
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	a0 40       	sbci	r26, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x44>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x4e>
 18e:	00 00       	nop
			_delay_ms(1000);
			PORTC = 0x00;
 190:	15 ba       	out	0x15, r1	; 21
 192:	8f e3       	ldi	r24, 0x3F	; 63
 194:	9d e0       	ldi	r25, 0x0D	; 13
 196:	a3 e0       	ldi	r26, 0x03	; 3
 198:	81 50       	subi	r24, 0x01	; 1
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	a0 40       	sbci	r26, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x58>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x62>
 1a2:	00 00       	nop
 1a4:	e1 cf       	rjmp	.-62     	; 0x168 <main+0x28>

000001a6 <__vector_19>:
	OCR2 = 5;
	TIMSK |= (1 << OCIE2);
}

ISR(TIMER0_COMP_vect)
{	
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
	
}
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <__vector_1>:
		j %= 4;
	}
}

ISR(INT0_vect)
{
 1ba:	1f 92       	push	r1
 1bc:	0f 92       	push	r0
 1be:	0f b6       	in	r0, 0x3f	; 63
 1c0:	0f 92       	push	r0
 1c2:	11 24       	eor	r1, r1
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
	timeMode++;
 1c8:	80 91 6c 00 	lds	r24, 0x006C
 1cc:	90 91 6d 00 	lds	r25, 0x006D
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	90 93 6d 00 	sts	0x006D, r25
 1d6:	80 93 6c 00 	sts	0x006C, r24
	
	if (timeMode == 1)
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	91 05       	cpc	r25, r1
 1de:	21 f0       	breq	.+8      	; 0x1e8 <__vector_1+0x2e>
	{
		
	}
	else
	{		
		timeMode = 0;
 1e0:	10 92 6d 00 	sts	0x006D, r1
 1e4:	10 92 6c 00 	sts	0x006C, r1
	}
}
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <NumToArr>:
// 		
// 	}
// }

void NumToArr(int numbr)
{	
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	e0 e7       	ldi	r30, 0x70	; 112
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
// 		}
// 		
// 	}
// }

void NumToArr(int numbr)
 1fe:	ef 01       	movw	r28, r30
 200:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
 202:	2a e0       	ldi	r18, 0x0A	; 10
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	b9 01       	movw	r22, r18
 208:	0e 94 2c 02 	call	0x458	; 0x458 <__divmodhi4>
 20c:	81 93       	st	Z+, r24
 20e:	91 93       	st	Z+, r25
		numbr /= 10;
 210:	86 2f       	mov	r24, r22
 212:	97 2f       	mov	r25, r23
// 	}
// }

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
 214:	ec 17       	cp	r30, r28
 216:	fd 07       	cpc	r31, r29
 218:	b1 f7       	brne	.-20     	; 0x206 <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	08 95       	ret

00000220 <__vector_6>:
{	
	
}

ISR(TIMER1_COMPA_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	if (timeMode == 0)
 242:	80 91 6c 00 	lds	r24, 0x006C
 246:	90 91 6d 00 	lds	r25, 0x006D
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	09 f0       	breq	.+2      	; 0x250 <__vector_6+0x30>
 24e:	42 c0       	rjmp	.+132    	; 0x2d4 <__vector_6+0xb4>
	{
		SS++;
 250:	80 91 66 00 	lds	r24, 0x0066
 254:	90 91 67 00 	lds	r25, 0x0067
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	90 93 67 00 	sts	0x0067, r25
 25e:	80 93 66 00 	sts	0x0066, r24
		if (SS == 60)
 262:	8c 33       	cpi	r24, 0x3C	; 60
 264:	91 05       	cpc	r25, r1
 266:	e9 f4       	brne	.+58     	; 0x2a2 <__vector_6+0x82>
		{
			MM++;
 268:	80 91 62 00 	lds	r24, 0x0062
 26c:	90 91 63 00 	lds	r25, 0x0063
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 63 00 	sts	0x0063, r25
 276:	80 93 62 00 	sts	0x0062, r24
			SS = 0;
 27a:	10 92 67 00 	sts	0x0067, r1
 27e:	10 92 66 00 	sts	0x0066, r1
			if (MM == 60)
 282:	8c 33       	cpi	r24, 0x3C	; 60
 284:	91 05       	cpc	r25, r1
 286:	69 f4       	brne	.+26     	; 0x2a2 <__vector_6+0x82>
			{
				HH++;
 288:	80 91 60 00 	lds	r24, 0x0060
 28c:	90 91 61 00 	lds	r25, 0x0061
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 61 00 	sts	0x0061, r25
 296:	80 93 60 00 	sts	0x0060, r24
				MM = 0;
 29a:	10 92 63 00 	sts	0x0063, r1
 29e:	10 92 62 00 	sts	0x0062, r1
			}
		}
		time = (HH * 100) + MM;	
 2a2:	40 91 60 00 	lds	r20, 0x0060
 2a6:	50 91 61 00 	lds	r21, 0x0061
 2aa:	84 e6       	ldi	r24, 0x64	; 100
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	48 9f       	mul	r20, r24
 2b0:	90 01       	movw	r18, r0
 2b2:	49 9f       	mul	r20, r25
 2b4:	30 0d       	add	r19, r0
 2b6:	58 9f       	mul	r21, r24
 2b8:	30 0d       	add	r19, r0
 2ba:	11 24       	eor	r1, r1
 2bc:	80 91 62 00 	lds	r24, 0x0062
 2c0:	90 91 63 00 	lds	r25, 0x0063
 2c4:	82 0f       	add	r24, r18
 2c6:	93 1f       	adc	r25, r19
 2c8:	90 93 69 00 	sts	0x0069, r25
 2cc:	80 93 68 00 	sts	0x0068, r24
		NumToArr(time);
 2d0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <NumToArr>
// 	timeStr += string + ":";
// 	itoa(MM, string, 10);
// 	timeStr += string + ":";
// 	itoa(SS, string, 10);
// 	SendString(timeStr);
}
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	0f 90       	pop	r0
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	0f 90       	pop	r0
 2f2:	1f 90       	pop	r1
 2f4:	18 95       	reti

000002f6 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 2f6:	84 30       	cpi	r24, 0x04	; 4
 2f8:	f9 f0       	breq	.+62     	; 0x338 <DecToDigit+0x42>
 2fa:	85 30       	cpi	r24, 0x05	; 5
 2fc:	48 f4       	brcc	.+18     	; 0x310 <DecToDigit+0x1a>
 2fe:	81 30       	cpi	r24, 0x01	; 1
 300:	49 f1       	breq	.+82     	; 0x354 <DecToDigit+0x5e>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	98 f0       	brcs	.+38     	; 0x32c <DecToDigit+0x36>
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	99 f0       	breq	.+38     	; 0x330 <DecToDigit+0x3a>
 30a:	83 30       	cpi	r24, 0x03	; 3
 30c:	09 f5       	brne	.+66     	; 0x350 <DecToDigit+0x5a>
 30e:	12 c0       	rjmp	.+36     	; 0x334 <DecToDigit+0x3e>
 310:	87 30       	cpi	r24, 0x07	; 7
 312:	c1 f0       	breq	.+48     	; 0x344 <DecToDigit+0x4e>
 314:	88 30       	cpi	r24, 0x08	; 8
 316:	28 f4       	brcc	.+10     	; 0x322 <DecToDigit+0x2c>
 318:	85 30       	cpi	r24, 0x05	; 5
 31a:	81 f0       	breq	.+32     	; 0x33c <DecToDigit+0x46>
 31c:	86 30       	cpi	r24, 0x06	; 6
 31e:	c1 f4       	brne	.+48     	; 0x350 <DecToDigit+0x5a>
 320:	0f c0       	rjmp	.+30     	; 0x340 <DecToDigit+0x4a>
 322:	88 30       	cpi	r24, 0x08	; 8
 324:	89 f0       	breq	.+34     	; 0x348 <DecToDigit+0x52>
 326:	89 30       	cpi	r24, 0x09	; 9
 328:	99 f4       	brne	.+38     	; 0x350 <DecToDigit+0x5a>
 32a:	10 c0       	rjmp	.+32     	; 0x34c <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 32c:	8f e5       	ldi	r24, 0x5F	; 95
 32e:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 330:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 332:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 334:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 336:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 338:	86 e6       	ldi	r24, 0x66	; 102
			break;
 33a:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 33c:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 33e:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 340:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 342:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 344:	87 e0       	ldi	r24, 0x07	; 7
			break;
 346:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 348:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 34a:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 34c:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 34e:	08 95       	ret
		default:
			Digit = 0b00000000;
 350:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 352:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 354:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
 356:	08 95       	ret

00000358 <__vector_3>:
// 	itoa(SS, string, 10);
// 	SendString(timeStr);
}

ISR(TIMER2_COMP_vect)
{	
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	2f 93       	push	r18
 364:	3f 93       	push	r19
 366:	4f 93       	push	r20
 368:	5f 93       	push	r21
 36a:	6f 93       	push	r22
 36c:	7f 93       	push	r23
 36e:	8f 93       	push	r24
 370:	9f 93       	push	r25
 372:	af 93       	push	r26
 374:	bf 93       	push	r27
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	
	if (timeMode == 0)
 37e:	80 91 6c 00 	lds	r24, 0x006C
 382:	90 91 6d 00 	lds	r25, 0x006D
 386:	00 97       	sbiw	r24, 0x00	; 0
 388:	99 f5       	brne	.+102    	; 0x3f0 <__vector_3+0x98>
	{
		
		PORTC = 0x00;
 38a:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
 38c:	1b ba       	out	0x1b, r1	; 27
			
		PORTC = DecToDigit(arr[j]);
 38e:	c0 91 64 00 	lds	r28, 0x0064
 392:	d0 91 65 00 	lds	r29, 0x0065
 396:	fe 01       	movw	r30, r28
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	e0 59       	subi	r30, 0x90	; 144
 39e:	ff 4f       	sbci	r31, 0xFF	; 255
 3a0:	80 81       	ld	r24, Z
 3a2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DecToDigit>
 3a6:	85 bb       	out	0x15, r24	; 21
		
		if ((j == 2) && ((SS % 2) == 0))
 3a8:	c2 30       	cpi	r28, 0x02	; 2
 3aa:	d1 05       	cpc	r29, r1
 3ac:	39 f4       	brne	.+14     	; 0x3bc <__vector_3+0x64>
 3ae:	80 91 66 00 	lds	r24, 0x0066
 3b2:	80 fd       	sbrc	r24, 0
 3b4:	03 c0       	rjmp	.+6      	; 0x3bc <__vector_3+0x64>
		{			
			PORTC ^= 0b10000000;	
 3b6:	85 b3       	in	r24, 0x15	; 21
 3b8:	80 58       	subi	r24, 0x80	; 128
 3ba:	85 bb       	out	0x15, r24	; 21
		}	
		
		PORTA = (1 << (7 - j));			
 3bc:	80 91 64 00 	lds	r24, 0x0064
 3c0:	90 91 65 00 	lds	r25, 0x0065
 3c4:	27 e0       	ldi	r18, 0x07	; 7
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	28 1b       	sub	r18, r24
 3ca:	39 0b       	sbc	r19, r25
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	ba 01       	movw	r22, r20
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <__vector_3+0x80>
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	2a 95       	dec	r18
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <__vector_3+0x7c>
 3dc:	6b bb       	out	0x1b, r22	; 27
		j++;
 3de:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
 3e0:	64 e0       	ldi	r22, 0x04	; 4
 3e2:	70 e0       	ldi	r23, 0x00	; 0
 3e4:	0e 94 2c 02 	call	0x458	; 0x458 <__divmodhi4>
 3e8:	90 93 65 00 	sts	0x0065, r25
 3ec:	80 93 64 00 	sts	0x0064, r24
	}
}
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	7f 91       	pop	r23
 402:	6f 91       	pop	r22
 404:	5f 91       	pop	r21
 406:	4f 91       	pop	r20
 408:	3f 91       	pop	r19
 40a:	2f 91       	pop	r18
 40c:	0f 90       	pop	r0
 40e:	0f be       	out	0x3f, r0	; 63
 410:	0f 90       	pop	r0
 412:	1f 90       	pop	r1
 414:	18 95       	reti

00000416 <UARTInit>:
#include "main.h"
#include "uartlib.h"

void UARTInit()
{		
	UCSRA = 0x00;
 416:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 418:	8a b1       	in	r24, 0x0a	; 10
 41a:	88 61       	ori	r24, 0x18	; 24
 41c:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 41e:	80 b5       	in	r24, 0x20	; 32
 420:	86 68       	ori	r24, 0x86	; 134
 422:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;
 424:	89 e1       	ldi	r24, 0x19	; 25
 426:	89 b9       	out	0x09, r24	; 9
}
 428:	08 95       	ret

0000042a <UARTSend>:

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
 42a:	5d 9b       	sbis	0x0b, 5	; 11
 42c:	fe cf       	rjmp	.-4      	; 0x42a <UARTSend>
	{
				
	}		
	UDR = Value;
 42e:	8c b9       	out	0x0c, r24	; 12
}
 430:	08 95       	ret

00000432 <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
 432:	5f 9b       	sbis	0x0b, 7	; 11
 434:	fe cf       	rjmp	.-4      	; 0x432 <UARTReceive>
	{
		
	}		
	return UDR; 
 436:	8c b1       	in	r24, 0x0c	; 12
}
 438:	08 95       	ret

0000043a <SendString>:

void SendString(char* str)
{
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	ec 01       	movw	r28, r24
	while(*str != '\0')
 440:	88 81       	ld	r24, Y
 442:	88 23       	and	r24, r24
 444:	31 f0       	breq	.+12     	; 0x452 <SendString+0x18>
		
	}		
	return UDR; 
}

void SendString(char* str)
 446:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
 448:	0e 94 15 02 	call	0x42a	; 0x42a <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
 44c:	89 91       	ld	r24, Y+
 44e:	88 23       	and	r24, r24
 450:	d9 f7       	brne	.-10     	; 0x448 <SendString+0xe>
	}
// 	//UARTSend(*str);
// 		
// 	UARTSend('\r');
// 	UARTSend('\n');
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <__divmodhi4>:
 458:	97 fb       	bst	r25, 7
 45a:	09 2e       	mov	r0, r25
 45c:	07 26       	eor	r0, r23
 45e:	0a d0       	rcall	.+20     	; 0x474 <__divmodhi4_neg1>
 460:	77 fd       	sbrc	r23, 7
 462:	04 d0       	rcall	.+8      	; 0x46c <__divmodhi4_neg2>
 464:	0c d0       	rcall	.+24     	; 0x47e <__udivmodhi4>
 466:	06 d0       	rcall	.+12     	; 0x474 <__divmodhi4_neg1>
 468:	00 20       	and	r0, r0
 46a:	1a f4       	brpl	.+6      	; 0x472 <__divmodhi4_exit>

0000046c <__divmodhi4_neg2>:
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255

00000472 <__divmodhi4_exit>:
 472:	08 95       	ret

00000474 <__divmodhi4_neg1>:
 474:	f6 f7       	brtc	.-4      	; 0x472 <__divmodhi4_exit>
 476:	90 95       	com	r25
 478:	81 95       	neg	r24
 47a:	9f 4f       	sbci	r25, 0xFF	; 255
 47c:	08 95       	ret

0000047e <__udivmodhi4>:
 47e:	aa 1b       	sub	r26, r26
 480:	bb 1b       	sub	r27, r27
 482:	51 e1       	ldi	r21, 0x11	; 17
 484:	07 c0       	rjmp	.+14     	; 0x494 <__udivmodhi4_ep>

00000486 <__udivmodhi4_loop>:
 486:	aa 1f       	adc	r26, r26
 488:	bb 1f       	adc	r27, r27
 48a:	a6 17       	cp	r26, r22
 48c:	b7 07       	cpc	r27, r23
 48e:	10 f0       	brcs	.+4      	; 0x494 <__udivmodhi4_ep>
 490:	a6 1b       	sub	r26, r22
 492:	b7 0b       	sbc	r27, r23

00000494 <__udivmodhi4_ep>:
 494:	88 1f       	adc	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	5a 95       	dec	r21
 49a:	a9 f7       	brne	.-22     	; 0x486 <__udivmodhi4_loop>
 49c:	80 95       	com	r24
 49e:	90 95       	com	r25
 4a0:	bc 01       	movw	r22, r24
 4a2:	cd 01       	movw	r24, r26
 4a4:	08 95       	ret

000004a6 <itoa>:
 4a6:	fb 01       	movw	r30, r22
 4a8:	9f 01       	movw	r18, r30
 4aa:	e8 94       	clt
 4ac:	42 30       	cpi	r20, 0x02	; 2
 4ae:	c4 f0       	brlt	.+48     	; 0x4e0 <itoa+0x3a>
 4b0:	45 32       	cpi	r20, 0x25	; 37
 4b2:	b4 f4       	brge	.+44     	; 0x4e0 <itoa+0x3a>
 4b4:	4a 30       	cpi	r20, 0x0A	; 10
 4b6:	29 f4       	brne	.+10     	; 0x4c2 <itoa+0x1c>
 4b8:	97 fb       	bst	r25, 7
 4ba:	1e f4       	brtc	.+6      	; 0x4c2 <itoa+0x1c>
 4bc:	90 95       	com	r25
 4be:	81 95       	neg	r24
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	64 2f       	mov	r22, r20
 4c4:	77 27       	eor	r23, r23
 4c6:	0e 94 3f 02 	call	0x47e	; 0x47e <__udivmodhi4>
 4ca:	80 5d       	subi	r24, 0xD0	; 208
 4cc:	8a 33       	cpi	r24, 0x3A	; 58
 4ce:	0c f0       	brlt	.+2      	; 0x4d2 <itoa+0x2c>
 4d0:	89 5d       	subi	r24, 0xD9	; 217
 4d2:	81 93       	st	Z+, r24
 4d4:	cb 01       	movw	r24, r22
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	a1 f7       	brne	.-24     	; 0x4c2 <itoa+0x1c>
 4da:	16 f4       	brtc	.+4      	; 0x4e0 <itoa+0x3a>
 4dc:	5d e2       	ldi	r21, 0x2D	; 45
 4de:	51 93       	st	Z+, r21
 4e0:	10 82       	st	Z, r1
 4e2:	c9 01       	movw	r24, r18
 4e4:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <strrev>

000004e8 <strrev>:
 4e8:	dc 01       	movw	r26, r24
 4ea:	fc 01       	movw	r30, r24
 4ec:	67 2f       	mov	r22, r23
 4ee:	71 91       	ld	r23, Z+
 4f0:	77 23       	and	r23, r23
 4f2:	e1 f7       	brne	.-8      	; 0x4ec <strrev+0x4>
 4f4:	32 97       	sbiw	r30, 0x02	; 2
 4f6:	04 c0       	rjmp	.+8      	; 0x500 <strrev+0x18>
 4f8:	7c 91       	ld	r23, X
 4fa:	6d 93       	st	X+, r22
 4fc:	70 83       	st	Z, r23
 4fe:	62 91       	ld	r22, -Z
 500:	ae 17       	cp	r26, r30
 502:	bf 07       	cpc	r27, r31
 504:	c8 f3       	brcs	.-14     	; 0x4f8 <strrev+0x10>
 506:	08 95       	ret

00000508 <_exit>:
 508:	f8 94       	cli

0000050a <__stop_program>:
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stop_program>
