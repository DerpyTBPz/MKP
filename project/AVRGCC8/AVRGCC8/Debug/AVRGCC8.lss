
AVRGCC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  00000710  000007a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a1  008000c6  008000c6  0000080a  2**0
                  ALLOC
  3 .stab         00000b40  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000243  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000158f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000152  00000000  00000000  000015cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005c7  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002d4  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000007f8  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  000027b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001ce  00000000  00000000  000028a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000016b  00000000  00000000  00002a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000056  00000000  00000000  00002bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00002c33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 b2 01 	jmp	0x364	; 0x364 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3c       	cpi	r26, 0xC6	; 198
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a6 ec       	ldi	r26, 0xC6	; 198
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  8a:	0c 94 86 03 	jmp	0x70c	; 0x70c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SendTime>:
		timeMode = 0;
	}
}

void SendTime()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	itoa(HH, string, 10);
  96:	cd ed       	ldi	r28, 0xDD	; 221
  98:	d0 e0       	ldi	r29, 0x00	; 0
  9a:	80 91 bf 00 	lds	r24, 0x00BF
  9e:	90 91 c0 00 	lds	r25, 0x00C0
  a2:	be 01       	movw	r22, r28
  a4:	4a e0       	ldi	r20, 0x0A	; 10
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	0e 94 4d 03 	call	0x69a	; 0x69a <itoa>
	SendString(string);
  ac:	ce 01       	movw	r24, r28
  ae:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SendString>
	UARTSend(':');
  b2:	8a e3       	ldi	r24, 0x3A	; 58
  b4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
	itoa(MM, string, 10);
  b8:	80 91 c1 00 	lds	r24, 0x00C1
  bc:	90 91 c2 00 	lds	r25, 0x00C2
  c0:	be 01       	movw	r22, r28
  c2:	4a e0       	ldi	r20, 0x0A	; 10
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	0e 94 4d 03 	call	0x69a	; 0x69a <itoa>
	SendString(string);
  ca:	ce 01       	movw	r24, r28
  cc:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SendString>
	UARTSend(':');
  d0:	8a e3       	ldi	r24, 0x3A	; 58
  d2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
	itoa(SS, string, 10);
  d6:	80 91 c3 00 	lds	r24, 0x00C3
  da:	90 91 c4 00 	lds	r25, 0x00C4
  de:	be 01       	movw	r22, r28
  e0:	4a e0       	ldi	r20, 0x0A	; 10
  e2:	50 e0       	ldi	r21, 0x00	; 0
  e4:	0e 94 4d 03 	call	0x69a	; 0x69a <itoa>
	SendString(string);	
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SendString>
	
 	UARTSend('\r');
  ee:	8d e0       	ldi	r24, 0x0D	; 13
  f0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
 	UARTSend('\n');
  f4:	8a e0       	ldi	r24, 0x0A	; 10
  f6:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
			
	sendTime = 0;
  fa:	10 92 cb 00 	sts	0x00CB, r1
  fe:	10 92 ca 00 	sts	0x00CA, r1
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <TimerInit>:
// 	TCCR0 |= (1 << WGM00) | (1 << CS02) | (1 << CS00);
// 	OCR0 = 200;
// 	TIMSK |= (1 << OCIE0);

 	//TIMER1	
	TCNT1 |= 0;
 108:	8c b5       	in	r24, 0x2c	; 44
 10a:	9d b5       	in	r25, 0x2d	; 45
 10c:	9d bd       	out	0x2d, r25	; 45
 10e:	8c bd       	out	0x2c, r24	; 44
	OCR1A |= 15625;
 110:	8a b5       	in	r24, 0x2a	; 42
 112:	9b b5       	in	r25, 0x2b	; 43
 114:	89 60       	ori	r24, 0x09	; 9
 116:	9d 63       	ori	r25, 0x3D	; 61
 118:	9b bd       	out	0x2b, r25	; 43
 11a:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (1 << FOC1A);
 11c:	8f b5       	in	r24, 0x2f	; 47
 11e:	88 60       	ori	r24, 0x08	; 8
 120:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
 122:	8e b5       	in	r24, 0x2e	; 46
 124:	8b 60       	ori	r24, 0x0B	; 11
 126:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
 128:	89 b7       	in	r24, 0x39	; 57
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	89 bf       	out	0x39, r24	; 57
	
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
 12e:	85 b5       	in	r24, 0x25	; 37
 130:	8e 60       	ori	r24, 0x0E	; 14
 132:	85 bd       	out	0x25, r24	; 37
	OCR2 = 5;
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
 138:	89 b7       	in	r24, 0x39	; 57
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	89 bf       	out	0x39, r24	; 57
}
 13e:	08 95       	ret

00000140 <main>:
int flag = 0;
char tmp[3];
int blink = 0;

int main(void)
{	
 140:	4f 92       	push	r4
 142:	5f 92       	push	r5
 144:	6f 92       	push	r6
 146:	7f 92       	push	r7
 148:	8f 92       	push	r8
 14a:	9f 92       	push	r9
 14c:	af 92       	push	r10
 14e:	bf 92       	push	r11
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	DDRA = 0xF0;
 160:	80 ef       	ldi	r24, 0xF0	; 240
 162:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	84 bb       	out	0x14, r24	; 20
	DDRD |= RED | GREEN | BLUE | BTN1 | BTN2;
 168:	81 b3       	in	r24, 0x11	; 17
 16a:	8c 6b       	ori	r24, 0xBC	; 188
 16c:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
 16e:	8f e0       	ldi	r24, 0x0F	; 15
 170:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 172:	80 ec       	ldi	r24, 0xC0	; 192
 174:	8b bf       	out	0x3b, r24	; 59
	
	TimerInit();
 176:	0e 94 84 00 	call	0x108	; 0x108 <TimerInit>
	UARTInit();
 17a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <UARTInit>
	
	sei();
 17e:	78 94       	sei
		
		if (timeMode == 1)
		{
			while(1)
			{			
				SendString("Enter hours (HH)");
 180:	0f 2e       	mov	r0, r31
 182:	f0 e6       	ldi	r31, 0x60	; 96
 184:	ef 2e       	mov	r14, r31
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ff 2e       	mov	r15, r31
 18a:	f0 2d       	mov	r31, r0
				UARTSend('\r');
 				UARTSend('\n');
				tmp[0] = UARTReceive();
 18c:	c2 ed       	ldi	r28, 0xD2	; 210
 18e:	d0 e0       	ldi	r29, 0x00	; 0
				tmp[1] = UARTReceive();				
 190:	8e 01       	movw	r16, r28
 192:	0f 5f       	subi	r16, 0xFF	; 255
 194:	1f 4f       	sbci	r17, 0xFF	; 255
 					UARTSend('\n');
					break;
				}
				_delay_ms(100);
				
				SendString("Enter minutes (MM)");
 196:	0f 2e       	mov	r0, r31
 198:	fd e7       	ldi	r31, 0x7D	; 125
 19a:	cf 2e       	mov	r12, r31
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	df 2e       	mov	r13, r31
 1a0:	f0 2d       	mov	r31, r0
 					UARTSend('\n');
					break;
				}
				_delay_ms(100);
				
				SendString("Enter seconds (SS)");
 1a2:	0f 2e       	mov	r0, r31
 1a4:	fe e9       	ldi	r31, 0x9E	; 158
 1a6:	af 2e       	mov	r10, r31
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	bf 2e       	mov	r11, r31
 1ac:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				SS = atoi(tmp);	
				if (SS > 59)
				{
					SendString("Wrong seconds");
 1ae:	0f 2e       	mov	r0, r31
 1b0:	f1 eb       	ldi	r31, 0xB1	; 177
 1b2:	4f 2e       	mov	r4, r31
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	5f 2e       	mov	r5, r31
 1b8:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				MM = atoi(tmp);				
				if (MM > 59)
				{
					SendString("Wrong minutes");
 1ba:	0f 2e       	mov	r0, r31
 1bc:	f0 e9       	ldi	r31, 0x90	; 144
 1be:	6f 2e       	mov	r6, r31
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	7f 2e       	mov	r7, r31
 1c4:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				HH = atoi(tmp);				
				if (HH > 23)
				{
					SendString("Wrong hours");
 1c6:	0f 2e       	mov	r0, r31
 1c8:	f1 e7       	ldi	r31, 0x71	; 113
 1ca:	8f 2e       	mov	r8, r31
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	9f 2e       	mov	r9, r31
 1d0:	f0 2d       	mov	r31, r0
	
	sei();
	
	while(1)
	{
		SendTime();
 1d2:	0e 94 49 00 	call	0x92	; 0x92 <SendTime>
		
		if (timeMode == 1)
 1d6:	80 91 cc 00 	lds	r24, 0x00CC
 1da:	90 91 cd 00 	lds	r25, 0x00CD
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 05       	cpc	r25, r1
 1e2:	b9 f7       	brne	.-18     	; 0x1d2 <main+0x92>
		{
			while(1)
			{			
				SendString("Enter hours (HH)");
 1e4:	c7 01       	movw	r24, r14
 1e6:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SendString>
				UARTSend('\r');
 1ea:	8d e0       	ldi	r24, 0x0D	; 13
 1ec:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
 				UARTSend('\n');
 1f0:	8a e0       	ldi	r24, 0x0A	; 10
 1f2:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
				tmp[0] = UARTReceive();
 1f6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <UARTReceive>
 1fa:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
 1fc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <UARTReceive>
 200:	f8 01       	movw	r30, r16
 202:	80 83       	st	Z, r24
				HH = atoi(tmp);				
 204:	ce 01       	movw	r24, r28
 206:	0e 94 2f 03 	call	0x65e	; 0x65e <atoi>
 20a:	90 93 c0 00 	sts	0x00C0, r25
 20e:	80 93 bf 00 	sts	0x00BF, r24
				if (HH > 23)
 212:	88 31       	cpi	r24, 0x18	; 24
 214:	91 05       	cpc	r25, r1
 216:	54 f0       	brlt	.+20     	; 0x22c <main+0xec>
				{
					SendString("Wrong hours");
 218:	c4 01       	movw	r24, r8
 21a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SendString>
					UARTSend('\r');
 21e:	8d e0       	ldi	r24, 0x0D	; 13
 220:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
 					UARTSend('\n');
 224:	8a e0       	ldi	r24, 0x0A	; 10
 226:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
					break;
 22a:	d3 cf       	rjmp	.-90     	; 0x1d2 <main+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	87 ea       	ldi	r24, 0xA7	; 167
 22e:	91 e6       	ldi	r25, 0x61	; 97
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0xf0>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0xf6>
 236:	00 00       	nop
				}
				_delay_ms(100);
				
				SendString("Enter minutes (MM)");
 238:	c6 01       	movw	r24, r12
 23a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SendString>
				UARTSend('\r');
 23e:	8d e0       	ldi	r24, 0x0D	; 13
 240:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
 				UARTSend('\n');				
 244:	8a e0       	ldi	r24, 0x0A	; 10
 246:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
				tmp[0] = UARTReceive();
 24a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <UARTReceive>
 24e:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
 250:	0e 94 f5 02 	call	0x5ea	; 0x5ea <UARTReceive>
 254:	f8 01       	movw	r30, r16
 256:	80 83       	st	Z, r24
				MM = atoi(tmp);				
 258:	ce 01       	movw	r24, r28
 25a:	0e 94 2f 03 	call	0x65e	; 0x65e <atoi>
 25e:	90 93 c2 00 	sts	0x00C2, r25
 262:	80 93 c1 00 	sts	0x00C1, r24
				if (MM > 59)
 266:	8c 33       	cpi	r24, 0x3C	; 60
 268:	91 05       	cpc	r25, r1
 26a:	54 f0       	brlt	.+20     	; 0x280 <main+0x140>
				{
					SendString("Wrong minutes");
 26c:	c3 01       	movw	r24, r6
 26e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SendString>
					UARTSend('\r');
 272:	8d e0       	ldi	r24, 0x0D	; 13
 274:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
 					UARTSend('\n');
 278:	8a e0       	ldi	r24, 0x0A	; 10
 27a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
					break;
 27e:	a9 cf       	rjmp	.-174    	; 0x1d2 <main+0x92>
 280:	87 ea       	ldi	r24, 0xA7	; 167
 282:	91 e6       	ldi	r25, 0x61	; 97
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x144>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x14a>
 28a:	00 00       	nop
				}
				_delay_ms(100);
				
				SendString("Enter seconds (SS)");
 28c:	c5 01       	movw	r24, r10
 28e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SendString>
				UARTSend('\r');
 292:	8d e0       	ldi	r24, 0x0D	; 13
 294:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
 				UARTSend('\n');				
 298:	8a e0       	ldi	r24, 0x0A	; 10
 29a:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
				tmp[0] = UARTReceive();
 29e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <UARTReceive>
 2a2:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
 2a4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <UARTReceive>
 2a8:	f8 01       	movw	r30, r16
 2aa:	80 83       	st	Z, r24
				SS = atoi(tmp);	
 2ac:	ce 01       	movw	r24, r28
 2ae:	0e 94 2f 03 	call	0x65e	; 0x65e <atoi>
 2b2:	90 93 c4 00 	sts	0x00C4, r25
 2b6:	80 93 c3 00 	sts	0x00C3, r24
				if (SS > 59)
 2ba:	8c 33       	cpi	r24, 0x3C	; 60
 2bc:	91 05       	cpc	r25, r1
 2be:	54 f0       	brlt	.+20     	; 0x2d4 <main+0x194>
				{
					SendString("Wrong seconds");
 2c0:	c2 01       	movw	r24, r4
 2c2:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <SendString>
					UARTSend('\r');
 2c6:	8d e0       	ldi	r24, 0x0D	; 13
 2c8:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
 					UARTSend('\n');
 2cc:	8a e0       	ldi	r24, 0x0A	; 10
 2ce:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
					break;
 2d2:	7f cf       	rjmp	.-258    	; 0x1d2 <main+0x92>
 2d4:	87 ea       	ldi	r24, 0xA7	; 167
 2d6:	91 e6       	ldi	r25, 0x61	; 97
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x198>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x19e>
 2de:	00 00       	nop
				}	
				_delay_ms(100);
				timeMode = 0;	
 2e0:	10 92 cd 00 	sts	0x00CD, r1
 2e4:	10 92 cc 00 	sts	0x00CC, r1
 2e8:	74 cf       	rjmp	.-280    	; 0x1d2 <main+0x92>

000002ea <__vector_19>:
	OCR2 = 5;
	TIMSK |= (1 << OCIE2);
}

ISR(TIMER0_COMP_vect)
{	
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
	
}
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_1>:
		j %= 4;
	}
}

ISR(INT0_vect)
{
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
	timeMode++;
 30c:	80 91 cc 00 	lds	r24, 0x00CC
 310:	90 91 cd 00 	lds	r25, 0x00CD
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	90 93 cd 00 	sts	0x00CD, r25
 31a:	80 93 cc 00 	sts	0x00CC, r24
	
	if (timeMode == 1)
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	91 05       	cpc	r25, r1
 322:	21 f0       	breq	.+8      	; 0x32c <__vector_1+0x2e>
	{
		
	}
	else
	{		
		timeMode = 0;
 324:	10 92 cd 00 	sts	0x00CD, r1
 328:	10 92 cc 00 	sts	0x00CC, r1
	}
}
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <NumToArr>:
			
	sendTime = 0;
}

void NumToArr(int numbr)
{	
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	e5 ed       	ldi	r30, 0xD5	; 213
 340:	f0 e0       	ldi	r31, 0x00	; 0
 	UARTSend('\n');
			
	sendTime = 0;
}

void NumToArr(int numbr)
 342:	ef 01       	movw	r28, r30
 344:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
 346:	2a e0       	ldi	r18, 0x0A	; 10
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	b9 01       	movw	r22, r18
 34c:	0e 94 08 03 	call	0x610	; 0x610 <__divmodhi4>
 350:	81 93       	st	Z+, r24
 352:	91 93       	st	Z+, r25
		numbr /= 10;
 354:	86 2f       	mov	r24, r22
 356:	97 2f       	mov	r25, r23
	sendTime = 0;
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
 358:	ec 17       	cp	r30, r28
 35a:	fd 07       	cpc	r31, r29
 35c:	b1 f7       	brne	.-20     	; 0x34a <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	08 95       	ret

00000364 <__vector_6>:
{	
	
}

ISR(TIMER1_COMPA_vect)
{
 364:	1f 92       	push	r1
 366:	0f 92       	push	r0
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	0f 92       	push	r0
 36c:	11 24       	eor	r1, r1
 36e:	2f 93       	push	r18
 370:	3f 93       	push	r19
 372:	4f 93       	push	r20
 374:	5f 93       	push	r21
 376:	6f 93       	push	r22
 378:	7f 93       	push	r23
 37a:	8f 93       	push	r24
 37c:	9f 93       	push	r25
 37e:	af 93       	push	r26
 380:	bf 93       	push	r27
 382:	ef 93       	push	r30
 384:	ff 93       	push	r31
	if (timeMode == 0)
 386:	80 91 cc 00 	lds	r24, 0x00CC
 38a:	90 91 cd 00 	lds	r25, 0x00CD
 38e:	00 97       	sbiw	r24, 0x00	; 0
 390:	09 f0       	breq	.+2      	; 0x394 <__vector_6+0x30>
 392:	69 c0       	rjmp	.+210    	; 0x466 <__stack+0x7>
	{
		SS++;
 394:	80 91 c3 00 	lds	r24, 0x00C3
 398:	90 91 c4 00 	lds	r25, 0x00C4
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	90 93 c4 00 	sts	0x00C4, r25
 3a2:	80 93 c3 00 	sts	0x00C3, r24
		if (SS == 60)
 3a6:	8c 33       	cpi	r24, 0x3C	; 60
 3a8:	91 05       	cpc	r25, r1
 3aa:	09 f0       	breq	.+2      	; 0x3ae <__vector_6+0x4a>
 3ac:	43 c0       	rjmp	.+134    	; 0x434 <__vector_6+0xd0>
		{
			MM++;
 3ae:	80 91 c1 00 	lds	r24, 0x00C1
 3b2:	90 91 c2 00 	lds	r25, 0x00C2
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	90 93 c2 00 	sts	0x00C2, r25
 3bc:	80 93 c1 00 	sts	0x00C1, r24
			SS = 0;
 3c0:	10 92 c4 00 	sts	0x00C4, r1
 3c4:	10 92 c3 00 	sts	0x00C3, r1
			if (MM == 60)
 3c8:	8c 33       	cpi	r24, 0x3C	; 60
 3ca:	91 05       	cpc	r25, r1
 3cc:	99 f5       	brne	.+102    	; 0x434 <__vector_6+0xd0>
			{
				HH++;
 3ce:	80 91 bf 00 	lds	r24, 0x00BF
 3d2:	90 91 c0 00 	lds	r25, 0x00C0
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	90 93 c0 00 	sts	0x00C0, r25
 3dc:	80 93 bf 00 	sts	0x00BF, r24
				MM = 0;
 3e0:	10 92 c2 00 	sts	0x00C2, r1
 3e4:	10 92 c1 00 	sts	0x00C1, r1
				if (HH == 24)
 3e8:	88 31       	cpi	r24, 0x18	; 24
 3ea:	91 05       	cpc	r25, r1
 3ec:	29 f4       	brne	.+10     	; 0x3f8 <__vector_6+0x94>
				{
					HH = 0;
 3ee:	10 92 c0 00 	sts	0x00C0, r1
 3f2:	10 92 bf 00 	sts	0x00BF, r1
 3f6:	11 c0       	rjmp	.+34     	; 0x41a <__vector_6+0xb6>
				}
				if (HH > 12)
 3f8:	80 91 bf 00 	lds	r24, 0x00BF
 3fc:	90 91 c0 00 	lds	r25, 0x00C0
 400:	8d 30       	cpi	r24, 0x0D	; 13
 402:	91 05       	cpc	r25, r1
 404:	44 f0       	brlt	.+16     	; 0x416 <__vector_6+0xb2>
				{
					blink = (HH - 12) * 2;
 406:	0c 97       	sbiw	r24, 0x0c	; 12
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	90 93 d1 00 	sts	0x00D1, r25
 410:	80 93 d0 00 	sts	0x00D0, r24
 414:	0f c0       	rjmp	.+30     	; 0x434 <__vector_6+0xd0>
				}
				else if (HH == 0)
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	39 f4       	brne	.+14     	; 0x428 <__vector_6+0xc4>
				{
					blink = 24;					
 41a:	88 e1       	ldi	r24, 0x18	; 24
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	90 93 d1 00 	sts	0x00D1, r25
 422:	80 93 d0 00 	sts	0x00D0, r24
 426:	06 c0       	rjmp	.+12     	; 0x434 <__vector_6+0xd0>
				}
				else
				{
					blink = HH * 2;
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	90 93 d1 00 	sts	0x00D1, r25
 430:	80 93 d0 00 	sts	0x00D0, r24
				}
			}
		}
		time = (HH * 100) + MM;	
 434:	40 91 bf 00 	lds	r20, 0x00BF
 438:	50 91 c0 00 	lds	r21, 0x00C0
 43c:	84 e6       	ldi	r24, 0x64	; 100
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	48 9f       	mul	r20, r24
 442:	90 01       	movw	r18, r0
 444:	49 9f       	mul	r20, r25
 446:	30 0d       	add	r19, r0
 448:	58 9f       	mul	r21, r24
 44a:	30 0d       	add	r19, r0
 44c:	11 24       	eor	r1, r1
 44e:	80 91 c1 00 	lds	r24, 0x00C1
 452:	90 91 c2 00 	lds	r25, 0x00C2
 456:	82 0f       	add	r24, r18
 458:	93 1f       	adc	r25, r19
 45a:	90 93 c9 00 	sts	0x00C9, r25
 45e:	80 93 c8 00 	sts	0x00C8, r24
		NumToArr(time);
 462:	0e 94 9d 01 	call	0x33a	; 0x33a <NumToArr>
	}
	
	if (blink != 0)	
 466:	80 91 d0 00 	lds	r24, 0x00D0
 46a:	90 91 d1 00 	lds	r25, 0x00D1
 46e:	00 97       	sbiw	r24, 0x00	; 0
 470:	69 f0       	breq	.+26     	; 0x48c <__stack+0x2d>
	{
		PORTD ^= RED | GREEN | BLUE;
 472:	92 b3       	in	r25, 0x12	; 18
 474:	80 eb       	ldi	r24, 0xB0	; 176
 476:	89 27       	eor	r24, r25
 478:	82 bb       	out	0x12, r24	; 18
		blink--;
 47a:	80 91 d0 00 	lds	r24, 0x00D0
 47e:	90 91 d1 00 	lds	r25, 0x00D1
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	90 93 d1 00 	sts	0x00D1, r25
 488:	80 93 d0 00 	sts	0x00D0, r24
// 	timeStr += string + ":";
// 	itoa(MM, string, 10);
// 	timeStr += string + ":";
// 	itoa(SS, string, 10);
// 	SendString(timeStr);
}
 48c:	ff 91       	pop	r31
 48e:	ef 91       	pop	r30
 490:	bf 91       	pop	r27
 492:	af 91       	pop	r26
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	7f 91       	pop	r23
 49a:	6f 91       	pop	r22
 49c:	5f 91       	pop	r21
 49e:	4f 91       	pop	r20
 4a0:	3f 91       	pop	r19
 4a2:	2f 91       	pop	r18
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 4ae:	84 30       	cpi	r24, 0x04	; 4
 4b0:	f9 f0       	breq	.+62     	; 0x4f0 <DecToDigit+0x42>
 4b2:	85 30       	cpi	r24, 0x05	; 5
 4b4:	48 f4       	brcc	.+18     	; 0x4c8 <DecToDigit+0x1a>
 4b6:	81 30       	cpi	r24, 0x01	; 1
 4b8:	49 f1       	breq	.+82     	; 0x50c <DecToDigit+0x5e>
 4ba:	81 30       	cpi	r24, 0x01	; 1
 4bc:	98 f0       	brcs	.+38     	; 0x4e4 <DecToDigit+0x36>
 4be:	82 30       	cpi	r24, 0x02	; 2
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <DecToDigit+0x3a>
 4c2:	83 30       	cpi	r24, 0x03	; 3
 4c4:	09 f5       	brne	.+66     	; 0x508 <DecToDigit+0x5a>
 4c6:	12 c0       	rjmp	.+36     	; 0x4ec <DecToDigit+0x3e>
 4c8:	87 30       	cpi	r24, 0x07	; 7
 4ca:	c1 f0       	breq	.+48     	; 0x4fc <DecToDigit+0x4e>
 4cc:	88 30       	cpi	r24, 0x08	; 8
 4ce:	28 f4       	brcc	.+10     	; 0x4da <DecToDigit+0x2c>
 4d0:	85 30       	cpi	r24, 0x05	; 5
 4d2:	81 f0       	breq	.+32     	; 0x4f4 <DecToDigit+0x46>
 4d4:	86 30       	cpi	r24, 0x06	; 6
 4d6:	c1 f4       	brne	.+48     	; 0x508 <DecToDigit+0x5a>
 4d8:	0f c0       	rjmp	.+30     	; 0x4f8 <DecToDigit+0x4a>
 4da:	88 30       	cpi	r24, 0x08	; 8
 4dc:	89 f0       	breq	.+34     	; 0x500 <DecToDigit+0x52>
 4de:	89 30       	cpi	r24, 0x09	; 9
 4e0:	99 f4       	brne	.+38     	; 0x508 <DecToDigit+0x5a>
 4e2:	10 c0       	rjmp	.+32     	; 0x504 <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 4e4:	8f e5       	ldi	r24, 0x5F	; 95
 4e6:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 4e8:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 4ea:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 4ec:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 4ee:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 4f0:	86 e6       	ldi	r24, 0x66	; 102
			break;
 4f2:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 4f4:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 4f6:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 4f8:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 4fa:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 4fc:	87 e0       	ldi	r24, 0x07	; 7
			break;
 4fe:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 500:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 502:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 504:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 506:	08 95       	ret
		default:
			Digit = 0b00000000;
 508:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 50a:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 50c:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
 50e:	08 95       	ret

00000510 <__vector_3>:
// 	itoa(SS, string, 10);
// 	SendString(timeStr);
}

ISR(TIMER2_COMP_vect)
{	
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	2f 93       	push	r18
 51c:	3f 93       	push	r19
 51e:	4f 93       	push	r20
 520:	5f 93       	push	r21
 522:	6f 93       	push	r22
 524:	7f 93       	push	r23
 526:	8f 93       	push	r24
 528:	9f 93       	push	r25
 52a:	af 93       	push	r26
 52c:	bf 93       	push	r27
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	ef 93       	push	r30
 534:	ff 93       	push	r31
	
	if (timeMode == 0)
 536:	80 91 cc 00 	lds	r24, 0x00CC
 53a:	90 91 cd 00 	lds	r25, 0x00CD
 53e:	00 97       	sbiw	r24, 0x00	; 0
 540:	99 f5       	brne	.+102    	; 0x5a8 <__vector_3+0x98>
	{
		
		PORTC = 0x00;
 542:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
 544:	1b ba       	out	0x1b, r1	; 27
			
		PORTC = DecToDigit(arr[j]);
 546:	c0 91 c6 00 	lds	r28, 0x00C6
 54a:	d0 91 c7 00 	lds	r29, 0x00C7
 54e:	fe 01       	movw	r30, r28
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	eb 52       	subi	r30, 0x2B	; 43
 556:	ff 4f       	sbci	r31, 0xFF	; 255
 558:	80 81       	ld	r24, Z
 55a:	0e 94 57 02 	call	0x4ae	; 0x4ae <DecToDigit>
 55e:	85 bb       	out	0x15, r24	; 21
		
		if ((j == 2) && ((SS % 2) == 0))
 560:	c2 30       	cpi	r28, 0x02	; 2
 562:	d1 05       	cpc	r29, r1
 564:	39 f4       	brne	.+14     	; 0x574 <__vector_3+0x64>
 566:	80 91 c3 00 	lds	r24, 0x00C3
 56a:	80 fd       	sbrc	r24, 0
 56c:	03 c0       	rjmp	.+6      	; 0x574 <__vector_3+0x64>
		{			
			PORTC ^= 0b10000000;	
 56e:	85 b3       	in	r24, 0x15	; 21
 570:	80 58       	subi	r24, 0x80	; 128
 572:	85 bb       	out	0x15, r24	; 21
		}	
		
		PORTA = (1 << (7 - j));			
 574:	80 91 c6 00 	lds	r24, 0x00C6
 578:	90 91 c7 00 	lds	r25, 0x00C7
 57c:	27 e0       	ldi	r18, 0x07	; 7
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	28 1b       	sub	r18, r24
 582:	39 0b       	sbc	r19, r25
 584:	41 e0       	ldi	r20, 0x01	; 1
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	ba 01       	movw	r22, r20
 58a:	02 c0       	rjmp	.+4      	; 0x590 <__vector_3+0x80>
 58c:	66 0f       	add	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	2a 95       	dec	r18
 592:	e2 f7       	brpl	.-8      	; 0x58c <__vector_3+0x7c>
 594:	6b bb       	out	0x1b, r22	; 27
		j++;
 596:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
 598:	64 e0       	ldi	r22, 0x04	; 4
 59a:	70 e0       	ldi	r23, 0x00	; 0
 59c:	0e 94 08 03 	call	0x610	; 0x610 <__divmodhi4>
 5a0:	90 93 c7 00 	sts	0x00C7, r25
 5a4:	80 93 c6 00 	sts	0x00C6, r24
	}
}
 5a8:	ff 91       	pop	r31
 5aa:	ef 91       	pop	r30
 5ac:	df 91       	pop	r29
 5ae:	cf 91       	pop	r28
 5b0:	bf 91       	pop	r27
 5b2:	af 91       	pop	r26
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	7f 91       	pop	r23
 5ba:	6f 91       	pop	r22
 5bc:	5f 91       	pop	r21
 5be:	4f 91       	pop	r20
 5c0:	3f 91       	pop	r19
 5c2:	2f 91       	pop	r18
 5c4:	0f 90       	pop	r0
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	0f 90       	pop	r0
 5ca:	1f 90       	pop	r1
 5cc:	18 95       	reti

000005ce <UARTInit>:
#include "main.h"
#include "uartlib.h"

void UARTInit()
{		
	UCSRA = 0x00;
 5ce:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 5d0:	8a b1       	in	r24, 0x0a	; 10
 5d2:	88 61       	ori	r24, 0x18	; 24
 5d4:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 5d6:	80 b5       	in	r24, 0x20	; 32
 5d8:	86 68       	ori	r24, 0x86	; 134
 5da:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;
 5dc:	89 e1       	ldi	r24, 0x19	; 25
 5de:	89 b9       	out	0x09, r24	; 9
}
 5e0:	08 95       	ret

000005e2 <UARTSend>:

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
 5e2:	5d 9b       	sbis	0x0b, 5	; 11
 5e4:	fe cf       	rjmp	.-4      	; 0x5e2 <UARTSend>
	{
				
	}		
	UDR = Value;
 5e6:	8c b9       	out	0x0c, r24	; 12
}
 5e8:	08 95       	ret

000005ea <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
 5ea:	5f 9b       	sbis	0x0b, 7	; 11
 5ec:	fe cf       	rjmp	.-4      	; 0x5ea <UARTReceive>
	{
		
	}		
	return UDR; 
 5ee:	8c b1       	in	r24, 0x0c	; 12
}
 5f0:	08 95       	ret

000005f2 <SendString>:

void SendString(char* str)
{
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	ec 01       	movw	r28, r24
	while(*str != '\0')
 5f8:	88 81       	ld	r24, Y
 5fa:	88 23       	and	r24, r24
 5fc:	31 f0       	breq	.+12     	; 0x60a <SendString+0x18>
		
	}		
	return UDR; 
}

void SendString(char* str)
 5fe:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
 600:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
 604:	89 91       	ld	r24, Y+
 606:	88 23       	and	r24, r24
 608:	d9 f7       	brne	.-10     	; 0x600 <SendString+0xe>
	}
// 	//UARTSend(*str);
// 		
// 	UARTSend('\r');
// 	UARTSend('\n');
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	08 95       	ret

00000610 <__divmodhi4>:
 610:	97 fb       	bst	r25, 7
 612:	09 2e       	mov	r0, r25
 614:	07 26       	eor	r0, r23
 616:	0a d0       	rcall	.+20     	; 0x62c <__divmodhi4_neg1>
 618:	77 fd       	sbrc	r23, 7
 61a:	04 d0       	rcall	.+8      	; 0x624 <__divmodhi4_neg2>
 61c:	0c d0       	rcall	.+24     	; 0x636 <__udivmodhi4>
 61e:	06 d0       	rcall	.+12     	; 0x62c <__divmodhi4_neg1>
 620:	00 20       	and	r0, r0
 622:	1a f4       	brpl	.+6      	; 0x62a <__divmodhi4_exit>

00000624 <__divmodhi4_neg2>:
 624:	70 95       	com	r23
 626:	61 95       	neg	r22
 628:	7f 4f       	sbci	r23, 0xFF	; 255

0000062a <__divmodhi4_exit>:
 62a:	08 95       	ret

0000062c <__divmodhi4_neg1>:
 62c:	f6 f7       	brtc	.-4      	; 0x62a <__divmodhi4_exit>
 62e:	90 95       	com	r25
 630:	81 95       	neg	r24
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	08 95       	ret

00000636 <__udivmodhi4>:
 636:	aa 1b       	sub	r26, r26
 638:	bb 1b       	sub	r27, r27
 63a:	51 e1       	ldi	r21, 0x11	; 17
 63c:	07 c0       	rjmp	.+14     	; 0x64c <__udivmodhi4_ep>

0000063e <__udivmodhi4_loop>:
 63e:	aa 1f       	adc	r26, r26
 640:	bb 1f       	adc	r27, r27
 642:	a6 17       	cp	r26, r22
 644:	b7 07       	cpc	r27, r23
 646:	10 f0       	brcs	.+4      	; 0x64c <__udivmodhi4_ep>
 648:	a6 1b       	sub	r26, r22
 64a:	b7 0b       	sbc	r27, r23

0000064c <__udivmodhi4_ep>:
 64c:	88 1f       	adc	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	5a 95       	dec	r21
 652:	a9 f7       	brne	.-22     	; 0x63e <__udivmodhi4_loop>
 654:	80 95       	com	r24
 656:	90 95       	com	r25
 658:	bc 01       	movw	r22, r24
 65a:	cd 01       	movw	r24, r26
 65c:	08 95       	ret

0000065e <atoi>:
 65e:	fc 01       	movw	r30, r24
 660:	88 27       	eor	r24, r24
 662:	99 27       	eor	r25, r25
 664:	e8 94       	clt
 666:	21 91       	ld	r18, Z+
 668:	20 32       	cpi	r18, 0x20	; 32
 66a:	e9 f3       	breq	.-6      	; 0x666 <atoi+0x8>
 66c:	29 30       	cpi	r18, 0x09	; 9
 66e:	10 f0       	brcs	.+4      	; 0x674 <atoi+0x16>
 670:	2e 30       	cpi	r18, 0x0E	; 14
 672:	c8 f3       	brcs	.-14     	; 0x666 <atoi+0x8>
 674:	2b 32       	cpi	r18, 0x2B	; 43
 676:	41 f0       	breq	.+16     	; 0x688 <atoi+0x2a>
 678:	2d 32       	cpi	r18, 0x2D	; 45
 67a:	39 f4       	brne	.+14     	; 0x68a <atoi+0x2c>
 67c:	68 94       	set
 67e:	04 c0       	rjmp	.+8      	; 0x688 <atoi+0x2a>
 680:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__mulhi_const_10>
 684:	82 0f       	add	r24, r18
 686:	91 1d       	adc	r25, r1
 688:	21 91       	ld	r18, Z+
 68a:	20 53       	subi	r18, 0x30	; 48
 68c:	2a 30       	cpi	r18, 0x0A	; 10
 68e:	c0 f3       	brcs	.-16     	; 0x680 <atoi+0x22>
 690:	1e f4       	brtc	.+6      	; 0x698 <atoi+0x3a>
 692:	90 95       	com	r25
 694:	81 95       	neg	r24
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	08 95       	ret

0000069a <itoa>:
 69a:	fb 01       	movw	r30, r22
 69c:	9f 01       	movw	r18, r30
 69e:	e8 94       	clt
 6a0:	42 30       	cpi	r20, 0x02	; 2
 6a2:	c4 f0       	brlt	.+48     	; 0x6d4 <itoa+0x3a>
 6a4:	45 32       	cpi	r20, 0x25	; 37
 6a6:	b4 f4       	brge	.+44     	; 0x6d4 <itoa+0x3a>
 6a8:	4a 30       	cpi	r20, 0x0A	; 10
 6aa:	29 f4       	brne	.+10     	; 0x6b6 <itoa+0x1c>
 6ac:	97 fb       	bst	r25, 7
 6ae:	1e f4       	brtc	.+6      	; 0x6b6 <itoa+0x1c>
 6b0:	90 95       	com	r25
 6b2:	81 95       	neg	r24
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	64 2f       	mov	r22, r20
 6b8:	77 27       	eor	r23, r23
 6ba:	0e 94 1b 03 	call	0x636	; 0x636 <__udivmodhi4>
 6be:	80 5d       	subi	r24, 0xD0	; 208
 6c0:	8a 33       	cpi	r24, 0x3A	; 58
 6c2:	0c f0       	brlt	.+2      	; 0x6c6 <itoa+0x2c>
 6c4:	89 5d       	subi	r24, 0xD9	; 217
 6c6:	81 93       	st	Z+, r24
 6c8:	cb 01       	movw	r24, r22
 6ca:	00 97       	sbiw	r24, 0x00	; 0
 6cc:	a1 f7       	brne	.-24     	; 0x6b6 <itoa+0x1c>
 6ce:	16 f4       	brtc	.+4      	; 0x6d4 <itoa+0x3a>
 6d0:	5d e2       	ldi	r21, 0x2D	; 45
 6d2:	51 93       	st	Z+, r21
 6d4:	10 82       	st	Z, r1
 6d6:	c9 01       	movw	r24, r18
 6d8:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <strrev>

000006dc <__mulhi_const_10>:
 6dc:	7a e0       	ldi	r23, 0x0A	; 10
 6de:	97 9f       	mul	r25, r23
 6e0:	90 2d       	mov	r25, r0
 6e2:	87 9f       	mul	r24, r23
 6e4:	80 2d       	mov	r24, r0
 6e6:	91 0d       	add	r25, r1
 6e8:	11 24       	eor	r1, r1
 6ea:	08 95       	ret

000006ec <strrev>:
 6ec:	dc 01       	movw	r26, r24
 6ee:	fc 01       	movw	r30, r24
 6f0:	67 2f       	mov	r22, r23
 6f2:	71 91       	ld	r23, Z+
 6f4:	77 23       	and	r23, r23
 6f6:	e1 f7       	brne	.-8      	; 0x6f0 <strrev+0x4>
 6f8:	32 97       	sbiw	r30, 0x02	; 2
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <strrev+0x18>
 6fc:	7c 91       	ld	r23, X
 6fe:	6d 93       	st	X+, r22
 700:	70 83       	st	Z, r23
 702:	62 91       	ld	r22, -Z
 704:	ae 17       	cp	r26, r30
 706:	bf 07       	cpc	r27, r31
 708:	c8 f3       	brcs	.-14     	; 0x6fc <strrev+0x10>
 70a:	08 95       	ret

0000070c <_exit>:
 70c:	f8 94       	cli

0000070e <__stop_program>:
 70e:	ff cf       	rjmp	.-2      	; 0x70e <__stop_program>
