
AVRGCC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000014  00800060  00800060  0000041a  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000041c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000f2  00000000  00000000  00000bb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000320  00000000  00000000  00000caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001de  00000000  00000000  00000fca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d4  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  0000167c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000016c  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016b  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000049  00000000  00000000  00001a23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 95 00 	jmp	0x12a	; 0x12a <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 37       	cpi	r26, 0x74	; 116
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  74:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TimerInit>:
// 	TCCR0 |= (1 << WGM00) | (1 << CS02) | (1 << CS00);
// 	OCR0 = 256;
// 	TIMSK |= (1 << OCIE0);

 	//TIMER1	
	TCNT1 |= 0;
  7c:	8c b5       	in	r24, 0x2c	; 44
  7e:	9d b5       	in	r25, 0x2d	; 45
  80:	9d bd       	out	0x2d, r25	; 45
  82:	8c bd       	out	0x2c, r24	; 44
	OCR1A |= 15625;
  84:	8a b5       	in	r24, 0x2a	; 42
  86:	9b b5       	in	r25, 0x2b	; 43
  88:	89 60       	ori	r24, 0x09	; 9
  8a:	9d 63       	ori	r25, 0x3D	; 61
  8c:	9b bd       	out	0x2b, r25	; 43
  8e:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (1 << FOC1A);
  90:	8f b5       	in	r24, 0x2f	; 47
  92:	88 60       	ori	r24, 0x08	; 8
  94:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
  96:	8e b5       	in	r24, 0x2e	; 46
  98:	8b 60       	ori	r24, 0x0B	; 11
  9a:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
  9c:	89 b7       	in	r24, 0x39	; 57
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	89 bf       	out	0x39, r24	; 57
	
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	8e 60       	ori	r24, 0x0E	; 14
  a6:	85 bd       	out	0x25, r24	; 37
	OCR2 = 10;
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
  ac:	89 b7       	in	r24, 0x39	; 57
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	89 bf       	out	0x39, r24	; 57
}
  b2:	08 95       	ret

000000b4 <main>:
int SS = 0;
int time = 0;

int main(void)
{	
	DDRA = 0xF0;
  b4:	80 ef       	ldi	r24, 0xF0	; 240
  b6:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 bb       	out	0x14, r24	; 20
	DDRD |= RED | GREEN | BLUE | BTN1 | BTN2;
  bc:	81 b3       	in	r24, 0x11	; 17
  be:	8c 6b       	ori	r24, 0xBC	; 188
  c0:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
  c2:	8f e0       	ldi	r24, 0x0F	; 15
  c4:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
  c6:	80 ec       	ldi	r24, 0xC0	; 192
  c8:	8b bf       	out	0x3b, r24	; 59
	
	TimerInit();
  ca:	0e 94 3e 00 	call	0x7c	; 0x7c <TimerInit>
	
	sei();
  ce:	78 94       	sei
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <main+0x1c>

000000d2 <__vector_19>:
	OCR2 = 10;
	TIMSK |= (1 << OCIE2);
}

ISR(TIMER0_COMP_vect)
{	
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	SS++;	
  e0:	80 91 68 00 	lds	r24, 0x0068
  e4:	90 91 69 00 	lds	r25, 0x0069
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	90 93 69 00 	sts	0x0069, r25
  ee:	80 93 68 00 	sts	0x0068, r24
}
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <NumToArr>:
	j++;
	j %= 4;
}

void NumToArr(int numbr)
{	
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	ec e6       	ldi	r30, 0x6C	; 108
 106:	f0 e0       	ldi	r31, 0x00	; 0
	PORTA = (1 << (7 - j));			
	j++;
	j %= 4;
}

void NumToArr(int numbr)
 108:	ef 01       	movw	r28, r30
 10a:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
 10c:	2a e0       	ldi	r18, 0x0A	; 10
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	b9 01       	movw	r22, r18
 112:	0e 94 aa 01 	call	0x354	; 0x354 <__divmodhi4>
 116:	81 93       	st	Z+, r24
 118:	91 93       	st	Z+, r25
		numbr /= 10;
 11a:	86 2f       	mov	r24, r22
 11c:	97 2f       	mov	r25, r23
	j %= 4;
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
 11e:	ec 17       	cp	r30, r28
 120:	fd 07       	cpc	r31, r29
 122:	b1 f7       	brne	.-20     	; 0x110 <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <__vector_6>:
{	
	SS++;	
}

ISR(TIMER1_COMPA_vect)
{
 12a:	1f 92       	push	r1
 12c:	0f 92       	push	r0
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	0f 92       	push	r0
 132:	11 24       	eor	r1, r1
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	SS++;
 14c:	80 91 68 00 	lds	r24, 0x0068
 150:	90 91 69 00 	lds	r25, 0x0069
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	90 93 69 00 	sts	0x0069, r25
 15a:	80 93 68 00 	sts	0x0068, r24
	if (SS == 60)
 15e:	8c 33       	cpi	r24, 0x3C	; 60
 160:	91 05       	cpc	r25, r1
 162:	e9 f4       	brne	.+58     	; 0x19e <__vector_6+0x74>
	{
		MM++;
 164:	80 91 66 00 	lds	r24, 0x0066
 168:	90 91 67 00 	lds	r25, 0x0067
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	90 93 67 00 	sts	0x0067, r25
 172:	80 93 66 00 	sts	0x0066, r24
		SS = 0;
 176:	10 92 69 00 	sts	0x0069, r1
 17a:	10 92 68 00 	sts	0x0068, r1
		if (MM == 60)
 17e:	8c 33       	cpi	r24, 0x3C	; 60
 180:	91 05       	cpc	r25, r1
 182:	69 f4       	brne	.+26     	; 0x19e <__vector_6+0x74>
		{
			HH++;
 184:	80 91 64 00 	lds	r24, 0x0064
 188:	90 91 65 00 	lds	r25, 0x0065
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 65 00 	sts	0x0065, r25
 192:	80 93 64 00 	sts	0x0064, r24
			MM = 0;
 196:	10 92 67 00 	sts	0x0067, r1
 19a:	10 92 66 00 	sts	0x0066, r1
		}
	}
	time = (HH * 100) + MM;
 19e:	40 91 64 00 	lds	r20, 0x0064
 1a2:	50 91 65 00 	lds	r21, 0x0065
 1a6:	84 e6       	ldi	r24, 0x64	; 100
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	48 9f       	mul	r20, r24
 1ac:	90 01       	movw	r18, r0
 1ae:	49 9f       	mul	r20, r25
 1b0:	30 0d       	add	r19, r0
 1b2:	58 9f       	mul	r21, r24
 1b4:	30 0d       	add	r19, r0
 1b6:	11 24       	eor	r1, r1
 1b8:	80 91 66 00 	lds	r24, 0x0066
 1bc:	90 91 67 00 	lds	r25, 0x0067
 1c0:	82 0f       	add	r24, r18
 1c2:	93 1f       	adc	r25, r19
 1c4:	90 93 6b 00 	sts	0x006B, r25
 1c8:	80 93 6a 00 	sts	0x006A, r24
	//time = (MM * 100) + SS;
	NumToArr(time);
 1cc:	0e 94 80 00 	call	0x100	; 0x100 <NumToArr>
}
 1d0:	ff 91       	pop	r31
 1d2:	ef 91       	pop	r30
 1d4:	bf 91       	pop	r27
 1d6:	af 91       	pop	r26
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	7f 91       	pop	r23
 1de:	6f 91       	pop	r22
 1e0:	5f 91       	pop	r21
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 1f2:	84 30       	cpi	r24, 0x04	; 4
 1f4:	f9 f0       	breq	.+62     	; 0x234 <DecToDigit+0x42>
 1f6:	85 30       	cpi	r24, 0x05	; 5
 1f8:	48 f4       	brcc	.+18     	; 0x20c <DecToDigit+0x1a>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	49 f1       	breq	.+82     	; 0x250 <DecToDigit+0x5e>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	98 f0       	brcs	.+38     	; 0x228 <DecToDigit+0x36>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	99 f0       	breq	.+38     	; 0x22c <DecToDigit+0x3a>
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	09 f5       	brne	.+66     	; 0x24c <DecToDigit+0x5a>
 20a:	12 c0       	rjmp	.+36     	; 0x230 <DecToDigit+0x3e>
 20c:	87 30       	cpi	r24, 0x07	; 7
 20e:	c1 f0       	breq	.+48     	; 0x240 <DecToDigit+0x4e>
 210:	88 30       	cpi	r24, 0x08	; 8
 212:	28 f4       	brcc	.+10     	; 0x21e <DecToDigit+0x2c>
 214:	85 30       	cpi	r24, 0x05	; 5
 216:	81 f0       	breq	.+32     	; 0x238 <DecToDigit+0x46>
 218:	86 30       	cpi	r24, 0x06	; 6
 21a:	c1 f4       	brne	.+48     	; 0x24c <DecToDigit+0x5a>
 21c:	0f c0       	rjmp	.+30     	; 0x23c <DecToDigit+0x4a>
 21e:	88 30       	cpi	r24, 0x08	; 8
 220:	89 f0       	breq	.+34     	; 0x244 <DecToDigit+0x52>
 222:	89 30       	cpi	r24, 0x09	; 9
 224:	99 f4       	brne	.+38     	; 0x24c <DecToDigit+0x5a>
 226:	10 c0       	rjmp	.+32     	; 0x248 <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 228:	8f e5       	ldi	r24, 0x5F	; 95
 22a:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 22c:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 22e:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 230:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 232:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 234:	86 e6       	ldi	r24, 0x66	; 102
			break;
 236:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 238:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 23a:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 23c:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 23e:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 240:	87 e0       	ldi	r24, 0x07	; 7
			break;
 242:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 244:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 246:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 248:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 24a:	08 95       	ret
		default:
			Digit = 0b00000000;
 24c:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 24e:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 250:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
 252:	08 95       	ret

00000254 <__vector_3>:
	//time = (MM * 100) + SS;
	NumToArr(time);
}

ISR(TIMER2_COMP_vect)
{	
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	5f 93       	push	r21
 266:	6f 93       	push	r22
 268:	7f 93       	push	r23
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	af 93       	push	r26
 270:	bf 93       	push	r27
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
	PORTC = 0x00;
 27a:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 27c:	1b ba       	out	0x1b, r1	; 27
	
	PORTC = DecToDigit(arr[j]);	
 27e:	c0 91 60 00 	lds	r28, 0x0060
 282:	d0 91 61 00 	lds	r29, 0x0061
 286:	fe 01       	movw	r30, r28
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	e4 59       	subi	r30, 0x94	; 148
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	80 81       	ld	r24, Z
 292:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <DecToDigit>
 296:	85 bb       	out	0x15, r24	; 21
	
	if ((j == 2) && ((SS % 2) == 0))
 298:	c2 30       	cpi	r28, 0x02	; 2
 29a:	d1 05       	cpc	r29, r1
 29c:	39 f4       	brne	.+14     	; 0x2ac <__vector_3+0x58>
 29e:	80 91 68 00 	lds	r24, 0x0068
 2a2:	80 fd       	sbrc	r24, 0
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <__vector_3+0x58>
	{			
		PORTC ^= 0b10000000;	
 2a6:	85 b3       	in	r24, 0x15	; 21
 2a8:	80 58       	subi	r24, 0x80	; 128
 2aa:	85 bb       	out	0x15, r24	; 21
	}	
		
	PORTA = (1 << (7 - j));			
 2ac:	80 91 60 00 	lds	r24, 0x0060
 2b0:	90 91 61 00 	lds	r25, 0x0061
 2b4:	27 e0       	ldi	r18, 0x07	; 7
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	28 1b       	sub	r18, r24
 2ba:	39 0b       	sbc	r19, r25
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	50 e0       	ldi	r21, 0x00	; 0
 2c0:	ba 01       	movw	r22, r20
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <__vector_3+0x74>
 2c4:	66 0f       	add	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	2a 95       	dec	r18
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <__vector_3+0x70>
 2cc:	6b bb       	out	0x1b, r22	; 27
	j++;
 2ce:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 2d0:	64 e0       	ldi	r22, 0x04	; 4
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	0e 94 aa 01 	call	0x354	; 0x354 <__divmodhi4>
 2d8:	90 93 61 00 	sts	0x0061, r25
 2dc:	80 93 60 00 	sts	0x0060, r24
}
 2e0:	ff 91       	pop	r31
 2e2:	ef 91       	pop	r30
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	bf 91       	pop	r27
 2ea:	af 91       	pop	r26
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	7f 91       	pop	r23
 2f2:	6f 91       	pop	r22
 2f4:	5f 91       	pop	r21
 2f6:	4f 91       	pop	r20
 2f8:	3f 91       	pop	r19
 2fa:	2f 91       	pop	r18
 2fc:	0f 90       	pop	r0
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	0f 90       	pop	r0
 302:	1f 90       	pop	r1
 304:	18 95       	reti

00000306 <UARTInit>:
 306:	1b b8       	out	0x0b, r1	; 11
 308:	8a b1       	in	r24, 0x0a	; 10
 30a:	88 61       	ori	r24, 0x18	; 24
 30c:	8a b9       	out	0x0a, r24	; 10
 30e:	80 b5       	in	r24, 0x20	; 32
 310:	86 68       	ori	r24, 0x86	; 134
 312:	80 bd       	out	0x20, r24	; 32
 314:	89 e1       	ldi	r24, 0x19	; 25
 316:	89 b9       	out	0x09, r24	; 9
 318:	08 95       	ret

0000031a <UARTSend>:
 31a:	5d 9b       	sbis	0x0b, 5	; 11
 31c:	fe cf       	rjmp	.-4      	; 0x31a <UARTSend>
 31e:	8c b9       	out	0x0c, r24	; 12
 320:	08 95       	ret

00000322 <UARTReceive>:
 322:	5f 9b       	sbis	0x0b, 7	; 11
 324:	fe cf       	rjmp	.-4      	; 0x322 <UARTReceive>
 326:	8c b1       	in	r24, 0x0c	; 12
 328:	08 95       	ret

0000032a <SendString>:
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	ec 01       	movw	r28, r24
 330:	88 81       	ld	r24, Y
 332:	88 23       	and	r24, r24
 334:	31 f0       	breq	.+12     	; 0x342 <SendString+0x18>
 336:	21 96       	adiw	r28, 0x01	; 1
 338:	0e 94 8d 01 	call	0x31a	; 0x31a <UARTSend>
 33c:	89 91       	ld	r24, Y+
 33e:	88 23       	and	r24, r24
 340:	d9 f7       	brne	.-10     	; 0x338 <SendString+0xe>
 342:	8d e0       	ldi	r24, 0x0D	; 13
 344:	0e 94 8d 01 	call	0x31a	; 0x31a <UARTSend>
 348:	8a e0       	ldi	r24, 0x0A	; 10
 34a:	0e 94 8d 01 	call	0x31a	; 0x31a <UARTSend>
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <__divmodhi4>:
 354:	97 fb       	bst	r25, 7
 356:	09 2e       	mov	r0, r25
 358:	07 26       	eor	r0, r23
 35a:	0a d0       	rcall	.+20     	; 0x370 <__divmodhi4_neg1>
 35c:	77 fd       	sbrc	r23, 7
 35e:	04 d0       	rcall	.+8      	; 0x368 <__divmodhi4_neg2>
 360:	0c d0       	rcall	.+24     	; 0x37a <__udivmodhi4>
 362:	06 d0       	rcall	.+12     	; 0x370 <__divmodhi4_neg1>
 364:	00 20       	and	r0, r0
 366:	1a f4       	brpl	.+6      	; 0x36e <__divmodhi4_exit>

00000368 <__divmodhi4_neg2>:
 368:	70 95       	com	r23
 36a:	61 95       	neg	r22
 36c:	7f 4f       	sbci	r23, 0xFF	; 255

0000036e <__divmodhi4_exit>:
 36e:	08 95       	ret

00000370 <__divmodhi4_neg1>:
 370:	f6 f7       	brtc	.-4      	; 0x36e <__divmodhi4_exit>
 372:	90 95       	com	r25
 374:	81 95       	neg	r24
 376:	9f 4f       	sbci	r25, 0xFF	; 255
 378:	08 95       	ret

0000037a <__udivmodhi4>:
 37a:	aa 1b       	sub	r26, r26
 37c:	bb 1b       	sub	r27, r27
 37e:	51 e1       	ldi	r21, 0x11	; 17
 380:	07 c0       	rjmp	.+14     	; 0x390 <__udivmodhi4_ep>

00000382 <__udivmodhi4_loop>:
 382:	aa 1f       	adc	r26, r26
 384:	bb 1f       	adc	r27, r27
 386:	a6 17       	cp	r26, r22
 388:	b7 07       	cpc	r27, r23
 38a:	10 f0       	brcs	.+4      	; 0x390 <__udivmodhi4_ep>
 38c:	a6 1b       	sub	r26, r22
 38e:	b7 0b       	sbc	r27, r23

00000390 <__udivmodhi4_ep>:
 390:	88 1f       	adc	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	5a 95       	dec	r21
 396:	a9 f7       	brne	.-22     	; 0x382 <__udivmodhi4_loop>
 398:	80 95       	com	r24
 39a:	90 95       	com	r25
 39c:	bc 01       	movw	r22, r24
 39e:	cd 01       	movw	r24, r26
 3a0:	08 95       	ret

000003a2 <_exit>:
 3a2:	f8 94       	cli

000003a4 <__stop_program>:
 3a4:	ff cf       	rjmp	.-2      	; 0x3a4 <__stop_program>
