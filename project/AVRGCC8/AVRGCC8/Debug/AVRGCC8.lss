
AVRGCC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  000012b0  00001344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012d  008000d2  008000d2  000013b6  2**0
                  ALLOC
  3 .stab         00002874  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000987  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000045b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000024b  00000000  00000000  00004613  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b58  00000000  00000000  0000485e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000425  00000000  00000000  000053b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ef0  00000000  00000000  000057db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000066cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000398  00000000  00000000  000068ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005a9  00000000  00000000  00006c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000080  00000000  00000000  000071ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  0000726d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_2>
       c:	0c 94 31 04 	jmp	0x862	; 0x862 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3f       	cpi	r26, 0xFF	; 255
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 72 02 	call	0x4e4	; 0x4e4 <main>
      8a:	0c 94 56 09 	jmp	0x12ac	; 0x12ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
		j %= 4;
	}		
}

ISR(INT0_vect)
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	9f 93       	push	r25
	timeMode++;
      a0:	80 91 de 00 	lds	r24, 0x00DE
      a4:	90 91 df 00 	lds	r25, 0x00DF
      a8:	01 96       	adiw	r24, 0x01	; 1
      aa:	90 93 df 00 	sts	0x00DF, r25
      ae:	80 93 de 00 	sts	0x00DE, r24
}
      b2:	9f 91       	pop	r25
      b4:	8f 91       	pop	r24
      b6:	0f 90       	pop	r0
      b8:	0f be       	out	0x3f, r0	; 63
      ba:	0f 90       	pop	r0
      bc:	1f 90       	pop	r1
      be:	18 95       	reti

000000c0 <TimerInit>:
}

void TimerInit()
{
 	//TIMER1	
	TCNT1 |= 0;
      c0:	8c b5       	in	r24, 0x2c	; 44
      c2:	9d b5       	in	r25, 0x2d	; 45
      c4:	9d bd       	out	0x2d, r25	; 45
      c6:	8c bd       	out	0x2c, r24	; 44
	OCR1A |= 15625;
      c8:	8a b5       	in	r24, 0x2a	; 42
      ca:	9b b5       	in	r25, 0x2b	; 43
      cc:	89 60       	ori	r24, 0x09	; 9
      ce:	9d 63       	ori	r25, 0x3D	; 61
      d0:	9b bd       	out	0x2b, r25	; 43
      d2:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (1 << FOC1A);
      d4:	8f b5       	in	r24, 0x2f	; 47
      d6:	88 60       	ori	r24, 0x08	; 8
      d8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
      da:	8e b5       	in	r24, 0x2e	; 46
      dc:	8b 60       	ori	r24, 0x0B	; 11
      de:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
      e0:	89 b7       	in	r24, 0x39	; 57
      e2:	80 61       	ori	r24, 0x10	; 16
      e4:	89 bf       	out	0x39, r24	; 57
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
      e6:	85 b5       	in	r24, 0x25	; 37
      e8:	8e 60       	ori	r24, 0x0E	; 14
      ea:	85 bd       	out	0x25, r24	; 37
	OCR2 = 2;
      ec:	82 e0       	ldi	r24, 0x02	; 2
      ee:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
      f0:	89 b7       	in	r24, 0x39	; 57
      f2:	80 68       	ori	r24, 0x80	; 128
      f4:	89 bf       	out	0x39, r24	; 57
}
      f6:	08 95       	ret

000000f8 <CalculateTemp>:

void CalculateTemp()
{	
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
	TIMSK ^= (1 << OCIE2);
      fc:	89 b7       	in	r24, 0x39	; 57
      fe:	80 58       	subi	r24, 0x80	; 128
     100:	89 bf       	out	0x39, r24	; 57
	
	TWBR = (mode == standard) ? 32 : 2;
     102:	80 91 c4 00 	lds	r24, 0x00C4
     106:	90 91 c5 00 	lds	r25, 0x00C5
     10a:	00 97       	sbiw	r24, 0x00	; 0
     10c:	11 f4       	brne	.+4      	; 0x112 <CalculateTemp+0x1a>
     10e:	80 e2       	ldi	r24, 0x20	; 32
     110:	01 c0       	rjmp	.+2      	; 0x114 <CalculateTemp+0x1c>
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~(0b11 << TWPS0); 
     116:	81 b1       	in	r24, 0x01	; 1
     118:	8c 7f       	andi	r24, 0xFC	; 252
     11a:	81 b9       	out	0x01, r24	; 1
	TWCR |= (1 << TWEN); 
     11c:	86 b7       	in	r24, 0x36	; 54
     11e:	84 60       	ori	r24, 0x04	; 4
     120:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     122:	89 ef       	ldi	r24, 0xF9	; 249
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	f1 f7       	brne	.-4      	; 0x126 <CalculateTemp+0x2e>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <CalculateTemp+0x34>
     12c:	00 00       	nop
	_delay_ms(1);
	
	twi_master_tx_rx(0x44, sendData, 2, data, 6);
     12e:	84 e4       	ldi	r24, 0x44	; 68
     130:	60 ed       	ldi	r22, 0xD0	; 208
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	42 e0       	ldi	r20, 0x02	; 2
     136:	50 e0       	ldi	r21, 0x00	; 0
     138:	28 ed       	ldi	r18, 0xD8	; 216
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	06 e0       	ldi	r16, 0x06	; 6
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	0e 94 bb 05 	call	0xb76	; 0xb76 <twi_master_tx_rx>
	
	temp = (data[0] * 256 + data[1]);
     144:	70 91 d8 00 	lds	r23, 0x00D8
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	80 91 d9 00 	lds	r24, 0x00D9
     14e:	68 0f       	add	r22, r24
     150:	71 1d       	adc	r23, r1
     152:	88 27       	eor	r24, r24
     154:	77 fd       	sbrc	r23, 7
     156:	80 95       	com	r24
     158:	98 2f       	mov	r25, r24
     15a:	60 93 cc 00 	sts	0x00CC, r22
     15e:	70 93 cd 00 	sts	0x00CD, r23
     162:	80 93 ce 00 	sts	0x00CE, r24
     166:	90 93 cf 00 	sts	0x00CF, r25
	cTemp = ((double)(175 * temp / 65535.0) - 45) * 10;	
     16a:	2f ea       	ldi	r18, 0xAF	; 175
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	50 e0       	ldi	r21, 0x00	; 0
     172:	0e 94 63 08 	call	0x10c6	; 0x10c6 <__mulsi3>
     176:	0e 94 74 07 	call	0xee8	; 0xee8 <__floatsisf>
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	3f ef       	ldi	r19, 0xFF	; 255
     17e:	4f e7       	ldi	r20, 0x7F	; 127
     180:	57 e4       	ldi	r21, 0x47	; 71
     182:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <__divsf3>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	44 e3       	ldi	r20, 0x34	; 52
     18c:	52 e4       	ldi	r21, 0x42	; 66
     18e:	0e 94 74 06 	call	0xce8	; 0xce8 <__subsf3>
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	40 e2       	ldi	r20, 0x20	; 32
     198:	51 e4       	ldi	r21, 0x41	; 65
     19a:	0e 94 00 08 	call	0x1000	; 0x1000 <__mulsf3>
     19e:	60 93 fb 01 	sts	0x01FB, r22
     1a2:	70 93 fc 01 	sts	0x01FC, r23
     1a6:	80 93 fd 01 	sts	0x01FD, r24
     1aa:	90 93 fe 01 	sts	0x01FE, r25
	
	TWBR = 0;
     1ae:	10 b8       	out	0x00, r1	; 0
	TWSR = 0;
     1b0:	11 b8       	out	0x01, r1	; 1
	TWCR = 0;
     1b2:	16 be       	out	0x36, r1	; 54
	
	TIMSK ^= (1 << OCIE2);
     1b4:	89 b7       	in	r24, 0x39	; 57
     1b6:	80 58       	subi	r24, 0x80	; 128
     1b8:	89 bf       	out	0x39, r24	; 57
}
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	08 95       	ret

000001c0 <__vector_2>:
{
	timeMode++;
}

ISR(INT1_vect)
{
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	2f 93       	push	r18
     1cc:	3f 93       	push	r19
     1ce:	4f 93       	push	r20
     1d0:	5f 93       	push	r21
     1d2:	6f 93       	push	r22
     1d4:	7f 93       	push	r23
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
     1da:	af 93       	push	r26
     1dc:	bf 93       	push	r27
     1de:	ef 93       	push	r30
     1e0:	ff 93       	push	r31
	segMode++;
     1e2:	80 91 e4 00 	lds	r24, 0x00E4
     1e6:	90 91 e5 00 	lds	r25, 0x00E5
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	90 93 e5 00 	sts	0x00E5, r25
     1f0:	80 93 e4 00 	sts	0x00E4, r24
	
	if (segMode == 1)
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	91 05       	cpc	r25, r1
     1f8:	29 f4       	brne	.+10     	; 0x204 <__vector_2+0x44>
	{		
		PORTC = 0x00;
     1fa:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     1fc:	1b ba       	out	0x1b, r1	; 27
		CalculateTemp();
     1fe:	0e 94 7c 00 	call	0xf8	; 0xf8 <CalculateTemp>
     202:	04 c0       	rjmp	.+8      	; 0x20c <__vector_2+0x4c>
		//TIMSK ^= (1 << OCIE2);		
	}
	else
	{
		//TIMSK ^= (1 << OCIE2);
 		segMode = 0;
     204:	10 92 e5 00 	sts	0x00E5, r1
     208:	10 92 e4 00 	sts	0x00E4, r1
	}
}
     20c:	ff 91       	pop	r31
     20e:	ef 91       	pop	r30
     210:	bf 91       	pop	r27
     212:	af 91       	pop	r26
     214:	9f 91       	pop	r25
     216:	8f 91       	pop	r24
     218:	7f 91       	pop	r23
     21a:	6f 91       	pop	r22
     21c:	5f 91       	pop	r21
     21e:	4f 91       	pop	r20
     220:	3f 91       	pop	r19
     222:	2f 91       	pop	r18
     224:	0f 90       	pop	r0
     226:	0f be       	out	0x3f, r0	; 63
     228:	0f 90       	pop	r0
     22a:	1f 90       	pop	r1
     22c:	18 95       	reti

0000022e <SendTime>:
	
	TIMSK ^= (1 << OCIE2);
}

void SendTime()
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
	itoa(HH, string, 10);
     232:	c9 ee       	ldi	r28, 0xE9	; 233
     234:	d0 e0       	ldi	r29, 0x00	; 0
     236:	80 91 c6 00 	lds	r24, 0x00C6
     23a:	90 91 c7 00 	lds	r25, 0x00C7
     23e:	be 01       	movw	r22, r28
     240:	4a e0       	ldi	r20, 0x0A	; 10
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	0e 94 c7 08 	call	0x118e	; 0x118e <itoa>
	SendString(string);
     248:	ce 01       	movw	r24, r28
     24a:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
	UARTSend(':');
     24e:	8a e3       	ldi	r24, 0x3A	; 58
     250:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
	itoa(MM, string, 10);
     254:	80 91 c8 00 	lds	r24, 0x00C8
     258:	90 91 c9 00 	lds	r25, 0x00C9
     25c:	be 01       	movw	r22, r28
     25e:	4a e0       	ldi	r20, 0x0A	; 10
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	0e 94 c7 08 	call	0x118e	; 0x118e <itoa>
	SendString(string);
     266:	ce 01       	movw	r24, r28
     268:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
	UARTSend(':');
     26c:	8a e3       	ldi	r24, 0x3A	; 58
     26e:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
	itoa(SS, string, 10);
     272:	80 91 ca 00 	lds	r24, 0x00CA
     276:	90 91 cb 00 	lds	r25, 0x00CB
     27a:	be 01       	movw	r22, r28
     27c:	4a e0       	ldi	r20, 0x0A	; 10
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	0e 94 c7 08 	call	0x118e	; 0x118e <itoa>
	SendString(string);	
     284:	ce 01       	movw	r24, r28
     286:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
	
 	UARTSend('\r');
     28a:	8d e0       	ldi	r24, 0x0D	; 13
     28c:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
 	UARTSend('\n');
     290:	8a e0       	ldi	r24, 0x0A	; 10
     292:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
}
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <SendTemperature>:

void SendTemperature()
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
	itoa(tempArr[3], string, 10);
     2a0:	c9 ee       	ldi	r28, 0xE9	; 233
     2a2:	d0 e0       	ldi	r29, 0x00	; 0
     2a4:	80 91 f9 01 	lds	r24, 0x01F9
     2a8:	90 91 fa 01 	lds	r25, 0x01FA
     2ac:	be 01       	movw	r22, r28
     2ae:	4a e0       	ldi	r20, 0x0A	; 10
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	0e 94 c7 08 	call	0x118e	; 0x118e <itoa>
	SendString(string);
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
	itoa(tempArr[2], string, 10);
     2bc:	80 91 f7 01 	lds	r24, 0x01F7
     2c0:	90 91 f8 01 	lds	r25, 0x01F8
     2c4:	be 01       	movw	r22, r28
     2c6:	4a e0       	ldi	r20, 0x0A	; 10
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	0e 94 c7 08 	call	0x118e	; 0x118e <itoa>
	SendString(string);
     2ce:	ce 01       	movw	r24, r28
     2d0:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
	SendString(".");
     2d4:	80 e6       	ldi	r24, 0x60	; 96
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
	itoa(tempArr[1], string, 10);
     2dc:	80 91 f5 01 	lds	r24, 0x01F5
     2e0:	90 91 f6 01 	lds	r25, 0x01F6
     2e4:	be 01       	movw	r22, r28
     2e6:	4a e0       	ldi	r20, 0x0A	; 10
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	0e 94 c7 08 	call	0x118e	; 0x118e <itoa>
	SendString(string);
     2ee:	ce 01       	movw	r24, r28
     2f0:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
	SendString(" C");
     2f4:	82 e6       	ldi	r24, 0x62	; 98
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
	
	UARTSend('\r');
     2fc:	8d e0       	ldi	r24, 0x0D	; 13
     2fe:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
 	UARTSend('\n');
     302:	8a e0       	ldi	r24, 0x0A	; 10
     304:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <NumToArr>:
	PORTC = DecToDigit(tempArr[3]);
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
{	
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	e9 e6       	ldi	r30, 0x69	; 105
     314:	f1 e0       	ldi	r31, 0x01	; 1
	
	PORTC = DecToDigit(tempArr[3]);
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
     316:	ef 01       	movw	r28, r30
     318:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		timeArr[k] = numbr % 10;
     31a:	2a e0       	ldi	r18, 0x0A	; 10
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	b9 01       	movw	r22, r18
     320:	0e 94 82 08 	call	0x1104	; 0x1104 <__divmodhi4>
     324:	81 93       	st	Z+, r24
     326:	91 93       	st	Z+, r25
		numbr /= 10;
     328:	86 2f       	mov	r24, r22
     32a:	97 2f       	mov	r25, r23
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
     32c:	ec 17       	cp	r30, r28
     32e:	fd 07       	cpc	r31, r29
     330:	b1 f7       	brne	.-20     	; 0x31e <NumToArr+0x10>
	{		
		timeArr[k] = numbr % 10;
		numbr /= 10;
	}
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <__vector_6>:
		}
	}
}

ISR(TIMER1_COMPA_vect)
{
     338:	1f 92       	push	r1
     33a:	0f 92       	push	r0
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	0f 92       	push	r0
     340:	11 24       	eor	r1, r1
     342:	2f 93       	push	r18
     344:	3f 93       	push	r19
     346:	4f 93       	push	r20
     348:	5f 93       	push	r21
     34a:	6f 93       	push	r22
     34c:	7f 93       	push	r23
     34e:	8f 93       	push	r24
     350:	9f 93       	push	r25
     352:	af 93       	push	r26
     354:	bf 93       	push	r27
     356:	ef 93       	push	r30
     358:	ff 93       	push	r31
	if (timeMode == 0)
     35a:	80 91 de 00 	lds	r24, 0x00DE
     35e:	90 91 df 00 	lds	r25, 0x00DF
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	09 f0       	breq	.+2      	; 0x368 <__vector_6+0x30>
     366:	7a c0       	rjmp	.+244    	; 0x45c <__vector_6+0x124>
	{
		SS++;
     368:	80 91 ca 00 	lds	r24, 0x00CA
     36c:	90 91 cb 00 	lds	r25, 0x00CB
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	90 93 cb 00 	sts	0x00CB, r25
     376:	80 93 ca 00 	sts	0x00CA, r24
		if (SS == 60)
     37a:	8c 33       	cpi	r24, 0x3C	; 60
     37c:	91 05       	cpc	r25, r1
     37e:	09 f0       	breq	.+2      	; 0x382 <__vector_6+0x4a>
     380:	43 c0       	rjmp	.+134    	; 0x408 <__vector_6+0xd0>
		{
			MM++;
     382:	80 91 c8 00 	lds	r24, 0x00C8
     386:	90 91 c9 00 	lds	r25, 0x00C9
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	90 93 c9 00 	sts	0x00C9, r25
     390:	80 93 c8 00 	sts	0x00C8, r24
			SS = 0;
     394:	10 92 cb 00 	sts	0x00CB, r1
     398:	10 92 ca 00 	sts	0x00CA, r1
			if (MM == 60)
     39c:	8c 33       	cpi	r24, 0x3C	; 60
     39e:	91 05       	cpc	r25, r1
     3a0:	99 f5       	brne	.+102    	; 0x408 <__vector_6+0xd0>
			{
				HH++;
     3a2:	80 91 c6 00 	lds	r24, 0x00C6
     3a6:	90 91 c7 00 	lds	r25, 0x00C7
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	90 93 c7 00 	sts	0x00C7, r25
     3b0:	80 93 c6 00 	sts	0x00C6, r24
				MM = 0;
     3b4:	10 92 c9 00 	sts	0x00C9, r1
     3b8:	10 92 c8 00 	sts	0x00C8, r1
				if (HH == 24)
     3bc:	88 31       	cpi	r24, 0x18	; 24
     3be:	91 05       	cpc	r25, r1
     3c0:	29 f4       	brne	.+10     	; 0x3cc <__vector_6+0x94>
				{
					HH = 0;
     3c2:	10 92 c7 00 	sts	0x00C7, r1
     3c6:	10 92 c6 00 	sts	0x00C6, r1
     3ca:	11 c0       	rjmp	.+34     	; 0x3ee <__vector_6+0xb6>
				}
				if (HH > 12)
     3cc:	80 91 c6 00 	lds	r24, 0x00C6
     3d0:	90 91 c7 00 	lds	r25, 0x00C7
     3d4:	8d 30       	cpi	r24, 0x0D	; 13
     3d6:	91 05       	cpc	r25, r1
     3d8:	44 f0       	brlt	.+16     	; 0x3ea <__vector_6+0xb2>
				{
					blink = (HH - 12) * 2;
     3da:	0c 97       	sbiw	r24, 0x0c	; 12
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	90 93 e3 00 	sts	0x00E3, r25
     3e4:	80 93 e2 00 	sts	0x00E2, r24
     3e8:	0f c0       	rjmp	.+30     	; 0x408 <__vector_6+0xd0>
				}
				else if (HH == 0)
     3ea:	00 97       	sbiw	r24, 0x00	; 0
     3ec:	39 f4       	brne	.+14     	; 0x3fc <__vector_6+0xc4>
				{
					blink = 24;					
     3ee:	88 e1       	ldi	r24, 0x18	; 24
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	90 93 e3 00 	sts	0x00E3, r25
     3f6:	80 93 e2 00 	sts	0x00E2, r24
     3fa:	06 c0       	rjmp	.+12     	; 0x408 <__vector_6+0xd0>
				}
				else
				{
					blink = HH * 2;
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	90 93 e3 00 	sts	0x00E3, r25
     404:	80 93 e2 00 	sts	0x00E2, r24
				}	
			}
		}		
		time = (HH * 100) + MM;			
     408:	40 91 c6 00 	lds	r20, 0x00C6
     40c:	50 91 c7 00 	lds	r21, 0x00C7
     410:	84 e6       	ldi	r24, 0x64	; 100
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	48 9f       	mul	r20, r24
     416:	90 01       	movw	r18, r0
     418:	49 9f       	mul	r20, r25
     41a:	30 0d       	add	r19, r0
     41c:	58 9f       	mul	r21, r24
     41e:	30 0d       	add	r19, r0
     420:	11 24       	eor	r1, r1
     422:	80 91 c8 00 	lds	r24, 0x00C8
     426:	90 91 c9 00 	lds	r25, 0x00C9
     42a:	82 0f       	add	r24, r18
     42c:	93 1f       	adc	r25, r19
     42e:	90 93 d7 00 	sts	0x00D7, r25
     432:	80 93 d6 00 	sts	0x00D6, r24
		NumToArr(time);
     436:	0e 94 87 01 	call	0x30e	; 0x30e <NumToArr>
		
		flag = 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	90 93 e1 00 	sts	0x00E1, r25
     442:	80 93 e0 00 	sts	0x00E0, r24
		
		if (segMode == 1)
     446:	80 91 e4 00 	lds	r24, 0x00E4
     44a:	90 91 e5 00 	lds	r25, 0x00E5
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	91 05       	cpc	r25, r1
     452:	21 f4       	brne	.+8      	; 0x45c <__vector_6+0x124>
		{			
			PORTC = 0x00;
     454:	15 ba       	out	0x15, r1	; 21
			PORTA = 0x00;
     456:	1b ba       	out	0x1b, r1	; 27
			CalculateTemp();
     458:	0e 94 7c 00 	call	0xf8	; 0xf8 <CalculateTemp>
		}
	}
	
	if (blink != 0)	
     45c:	80 91 e2 00 	lds	r24, 0x00E2
     460:	90 91 e3 00 	lds	r25, 0x00E3
     464:	00 97       	sbiw	r24, 0x00	; 0
     466:	69 f0       	breq	.+26     	; 0x482 <__stack+0x23>
	{
		PORTD ^= RED | GREEN | BLUE;
     468:	92 b3       	in	r25, 0x12	; 18
     46a:	80 eb       	ldi	r24, 0xB0	; 176
     46c:	89 27       	eor	r24, r25
     46e:	82 bb       	out	0x12, r24	; 18
		blink--;
     470:	80 91 e2 00 	lds	r24, 0x00E2
     474:	90 91 e3 00 	lds	r25, 0x00E3
     478:	01 97       	sbiw	r24, 0x01	; 1
     47a:	90 93 e3 00 	sts	0x00E3, r25
     47e:	80 93 e2 00 	sts	0x00E2, r24
	}
}
     482:	ff 91       	pop	r31
     484:	ef 91       	pop	r30
     486:	bf 91       	pop	r27
     488:	af 91       	pop	r26
     48a:	9f 91       	pop	r25
     48c:	8f 91       	pop	r24
     48e:	7f 91       	pop	r23
     490:	6f 91       	pop	r22
     492:	5f 91       	pop	r21
     494:	4f 91       	pop	r20
     496:	3f 91       	pop	r19
     498:	2f 91       	pop	r18
     49a:	0f 90       	pop	r0
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	0f 90       	pop	r0
     4a0:	1f 90       	pop	r1
     4a2:	18 95       	reti

000004a4 <TempToArr>:
	}
}

void TempToArr(int tempr)
{	
	tempArr[0] = 12;
     4a4:	2c e0       	ldi	r18, 0x0C	; 12
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	30 93 f4 01 	sts	0x01F4, r19
     4ac:	20 93 f3 01 	sts	0x01F3, r18
	for (int k = 1; k < DIGITS; k++)
	{		
		tempArr[k] = tempr % 10;
     4b0:	2a e0       	ldi	r18, 0x0A	; 10
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	b9 01       	movw	r22, r18
     4b6:	0e 94 82 08 	call	0x1104	; 0x1104 <__divmodhi4>
     4ba:	90 93 f6 01 	sts	0x01F6, r25
     4be:	80 93 f5 01 	sts	0x01F5, r24
     4c2:	cb 01       	movw	r24, r22
     4c4:	b9 01       	movw	r22, r18
     4c6:	0e 94 82 08 	call	0x1104	; 0x1104 <__divmodhi4>
     4ca:	90 93 f8 01 	sts	0x01F8, r25
     4ce:	80 93 f7 01 	sts	0x01F7, r24
     4d2:	cb 01       	movw	r24, r22
     4d4:	b9 01       	movw	r22, r18
     4d6:	0e 94 82 08 	call	0x1104	; 0x1104 <__divmodhi4>
     4da:	90 93 fa 01 	sts	0x01FA, r25
     4de:	80 93 f9 01 	sts	0x01F9, r24
		tempr /= 10;
	}
}
     4e2:	08 95       	ret

000004e4 <main>:
char tmp[3];
int blink = 0;
int segMode = 0;

int main(void)
{	
     4e4:	2f 92       	push	r2
     4e6:	3f 92       	push	r3
     4e8:	4f 92       	push	r4
     4ea:	5f 92       	push	r5
     4ec:	6f 92       	push	r6
     4ee:	7f 92       	push	r7
     4f0:	8f 92       	push	r8
     4f2:	9f 92       	push	r9
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
	DDRA = 0xF0;
     508:	80 ef       	ldi	r24, 0xF0	; 240
     50a:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	84 bb       	out	0x14, r24	; 20
	DDRD |= RED | GREEN | BLUE | BTN1 | BTN2;
     510:	81 b3       	in	r24, 0x11	; 17
     512:	8c 6b       	ori	r24, 0xBC	; 188
     514:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
     516:	8f e0       	ldi	r24, 0x0F	; 15
     518:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
     51a:	80 ec       	ldi	r24, 0xC0	; 192
     51c:	8b bf       	out	0x3b, r24	; 59
     51e:	89 ef       	ldi	r24, 0xF9	; 249
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	01 97       	sbiw	r24, 0x01	; 1
     524:	f1 f7       	brne	.-4      	; 0x522 <main+0x3e>
     526:	00 c0       	rjmp	.+0      	; 0x528 <main+0x44>
     528:	00 00       	nop
	
	_delay_ms(1);
	TimerInit();
     52a:	0e 94 60 00 	call	0xc0	; 0xc0 <TimerInit>
	UARTInit();
     52e:	0e 94 53 06 	call	0xca6	; 0xca6 <UARTInit>
	
	sei();
     532:	78 94       	sei
			SendTime();
			flag = 0;
		}
		else if ((segMode == 1) && (timeMode < 1) && (flag != 0))
		{	
			ltoa((long int)(cTemp), tmpStr, 10);
     534:	0f 2e       	mov	r0, r31
     536:	f3 e7       	ldi	r31, 0x73	; 115
     538:	4f 2e       	mov	r4, r31
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	5f 2e       	mov	r5, r31
     53e:	f0 2d       	mov	r31, r0
			while(1)
			{	
				HH = 0;
				MM = 0;
				SS = 0;		
				SendString("Enter hours (HH)");
     540:	0f 2e       	mov	r0, r31
     542:	f5 e6       	ldi	r31, 0x65	; 101
     544:	ef 2e       	mov	r14, r31
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	ff 2e       	mov	r15, r31
     54a:	f0 2d       	mov	r31, r0
				UARTSend('\r');
 				UARTSend('\n');
				tmp[0] = UARTReceive();
     54c:	c6 ee       	ldi	r28, 0xE6	; 230
     54e:	d0 e0       	ldi	r29, 0x00	; 0
				tmp[1] = UARTReceive();				
     550:	8e 01       	movw	r16, r28
     552:	0f 5f       	subi	r16, 0xFF	; 255
     554:	1f 4f       	sbci	r17, 0xFF	; 255
					tmp[0] = 0;
					tmp[1] = 0;
				}
				_delay_ms(100);
				
				SendString("Enter minutes (MM)");
     556:	0f 2e       	mov	r0, r31
     558:	f2 e8       	ldi	r31, 0x82	; 130
     55a:	cf 2e       	mov	r12, r31
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	df 2e       	mov	r13, r31
     560:	f0 2d       	mov	r31, r0
					tmp[0] = 0;
					tmp[1] = 0;
				}
				_delay_ms(100);
				
				SendString("Enter seconds (SS)");
     562:	0f 2e       	mov	r0, r31
     564:	f3 ea       	ldi	r31, 0xA3	; 163
     566:	af 2e       	mov	r10, r31
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	bf 2e       	mov	r11, r31
     56c:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				tmpTime = atoi(tmp);	
				if (tmpTime > 59)
				{
					SendString("Wrong seconds");
     56e:	0f 2e       	mov	r0, r31
     570:	f6 eb       	ldi	r31, 0xB6	; 182
     572:	2f 2e       	mov	r2, r31
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	3f 2e       	mov	r3, r31
     578:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				tmpTime = atoi(tmp);				
				if (tmpTime > 59)
				{
					SendString("Wrong minutes");
     57a:	0f 2e       	mov	r0, r31
     57c:	f5 e9       	ldi	r31, 0x95	; 149
     57e:	6f 2e       	mov	r6, r31
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	7f 2e       	mov	r7, r31
     584:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				tmpTime = atoi(tmp);				
				if (tmpTime > 23)
				{
					SendString("Wrong hours");
     586:	0f 2e       	mov	r0, r31
     588:	f6 e7       	ldi	r31, 0x76	; 118
     58a:	8f 2e       	mov	r8, r31
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	9f 2e       	mov	r9, r31
     590:	f0 2d       	mov	r31, r0
	
	sei();
	
	while(1)
	{
		if ((segMode == 0) && (timeMode < 1) && (flag != 0))
     592:	80 91 e4 00 	lds	r24, 0x00E4
     596:	90 91 e5 00 	lds	r25, 0x00E5
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	a1 f4       	brne	.+40     	; 0x5c6 <main+0xe2>
     59e:	20 91 de 00 	lds	r18, 0x00DE
     5a2:	30 91 df 00 	lds	r19, 0x00DF
     5a6:	12 16       	cp	r1, r18
     5a8:	13 06       	cpc	r1, r19
     5aa:	6c f0       	brlt	.+26     	; 0x5c6 <main+0xe2>
     5ac:	80 91 e0 00 	lds	r24, 0x00E0
     5b0:	90 91 e1 00 	lds	r25, 0x00E1
     5b4:	00 97       	sbiw	r24, 0x00	; 0
     5b6:	69 f3       	breq	.-38     	; 0x592 <main+0xae>
		{
			SendTime();
     5b8:	0e 94 17 01 	call	0x22e	; 0x22e <SendTime>
			flag = 0;
     5bc:	10 92 e1 00 	sts	0x00E1, r1
     5c0:	10 92 e0 00 	sts	0x00E0, r1
     5c4:	33 c0       	rjmp	.+102    	; 0x62c <main+0x148>
		}
		else if ((segMode == 1) && (timeMode < 1) && (flag != 0))
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	91 05       	cpc	r25, r1
     5ca:	81 f5       	brne	.+96     	; 0x62c <main+0x148>
     5cc:	80 91 de 00 	lds	r24, 0x00DE
     5d0:	90 91 df 00 	lds	r25, 0x00DF
     5d4:	18 16       	cp	r1, r24
     5d6:	19 06       	cpc	r1, r25
     5d8:	8c f1       	brlt	.+98     	; 0x63c <main+0x158>
     5da:	80 91 e0 00 	lds	r24, 0x00E0
     5de:	90 91 e1 00 	lds	r25, 0x00E1
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	b1 f2       	breq	.-84     	; 0x592 <main+0xae>
		{	
			ltoa((long int)(cTemp), tmpStr, 10);
     5e6:	60 91 fb 01 	lds	r22, 0x01FB
     5ea:	70 91 fc 01 	lds	r23, 0x01FC
     5ee:	80 91 fd 01 	lds	r24, 0x01FD
     5f2:	90 91 fe 01 	lds	r25, 0x01FE
     5f6:	0e 94 41 07 	call	0xe82	; 0xe82 <__fixsfsi>
     5fa:	a2 01       	movw	r20, r4
     5fc:	2a e0       	ldi	r18, 0x0A	; 10
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <ltoa>
			TempToArr((long int)(cTemp));
     604:	60 91 fb 01 	lds	r22, 0x01FB
     608:	70 91 fc 01 	lds	r23, 0x01FC
     60c:	80 91 fd 01 	lds	r24, 0x01FD
     610:	90 91 fe 01 	lds	r25, 0x01FE
     614:	0e 94 41 07 	call	0xe82	; 0xe82 <__fixsfsi>
     618:	dc 01       	movw	r26, r24
     61a:	cb 01       	movw	r24, r22
     61c:	0e 94 52 02 	call	0x4a4	; 0x4a4 <TempToArr>
			SendTemperature();
     620:	0e 94 4e 01 	call	0x29c	; 0x29c <SendTemperature>
			flag = 0;				
     624:	10 92 e1 00 	sts	0x00E1, r1
     628:	10 92 e0 00 	sts	0x00E0, r1
		}
		
		if (timeMode >= 1)
     62c:	80 91 de 00 	lds	r24, 0x00DE
     630:	90 91 df 00 	lds	r25, 0x00DF
     634:	18 16       	cp	r1, r24
     636:	19 06       	cpc	r1, r25
     638:	0c f0       	brlt	.+2      	; 0x63c <main+0x158>
     63a:	ab cf       	rjmp	.-170    	; 0x592 <main+0xae>
		{
			while(1)
			{	
				HH = 0;
     63c:	10 92 c7 00 	sts	0x00C7, r1
     640:	10 92 c6 00 	sts	0x00C6, r1
				MM = 0;
     644:	10 92 c9 00 	sts	0x00C9, r1
     648:	10 92 c8 00 	sts	0x00C8, r1
				SS = 0;		
     64c:	10 92 cb 00 	sts	0x00CB, r1
     650:	10 92 ca 00 	sts	0x00CA, r1
				SendString("Enter hours (HH)");
     654:	c7 01       	movw	r24, r14
     656:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
				UARTSend('\r');
     65a:	8d e0       	ldi	r24, 0x0D	; 13
     65c:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
 				UARTSend('\n');
     660:	8a e0       	ldi	r24, 0x0A	; 10
     662:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
				tmp[0] = UARTReceive();
     666:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UARTReceive>
     66a:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     66c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UARTReceive>
     670:	f8 01       	movw	r30, r16
     672:	80 83       	st	Z, r24
				tmpTime = atoi(tmp);				
     674:	ce 01       	movw	r24, r28
     676:	0e 94 a9 08 	call	0x1152	; 0x1152 <atoi>
     67a:	90 93 72 01 	sts	0x0172, r25
     67e:	80 93 71 01 	sts	0x0171, r24
				if (tmpTime > 23)
     682:	88 31       	cpi	r24, 0x18	; 24
     684:	91 05       	cpc	r25, r1
     686:	54 f0       	brlt	.+20     	; 0x69c <main+0x1b8>
				{
					SendString("Wrong hours");
     688:	c4 01       	movw	r24, r8
     68a:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
					UARTSend('\r');
     68e:	8d e0       	ldi	r24, 0x0D	; 13
     690:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
 					UARTSend('\n');
     694:	8a e0       	ldi	r24, 0x0A	; 10
     696:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
					break;
     69a:	7b cf       	rjmp	.-266    	; 0x592 <main+0xae>
				}
				else
				{
					HH = tmpTime;
     69c:	90 93 c7 00 	sts	0x00C7, r25
     6a0:	80 93 c6 00 	sts	0x00C6, r24
					tmpTime = 0;
     6a4:	10 92 72 01 	sts	0x0172, r1
     6a8:	10 92 71 01 	sts	0x0171, r1
					tmp[0] = 0;
     6ac:	18 82       	st	Y, r1
					tmp[1] = 0;
     6ae:	f8 01       	movw	r30, r16
     6b0:	10 82       	st	Z, r1
     6b2:	87 ea       	ldi	r24, 0xA7	; 167
     6b4:	91 e6       	ldi	r25, 0x61	; 97
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <main+0x1d2>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <main+0x1d8>
     6bc:	00 00       	nop
				}
				_delay_ms(100);
				
				SendString("Enter minutes (MM)");
     6be:	c6 01       	movw	r24, r12
     6c0:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
				UARTSend('\r');
     6c4:	8d e0       	ldi	r24, 0x0D	; 13
     6c6:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
 				UARTSend('\n');				
     6ca:	8a e0       	ldi	r24, 0x0A	; 10
     6cc:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
				tmp[0] = UARTReceive();
     6d0:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UARTReceive>
     6d4:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     6d6:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UARTReceive>
     6da:	f8 01       	movw	r30, r16
     6dc:	80 83       	st	Z, r24
				tmpTime = atoi(tmp);				
     6de:	ce 01       	movw	r24, r28
     6e0:	0e 94 a9 08 	call	0x1152	; 0x1152 <atoi>
     6e4:	90 93 72 01 	sts	0x0172, r25
     6e8:	80 93 71 01 	sts	0x0171, r24
				if (tmpTime > 59)
     6ec:	8c 33       	cpi	r24, 0x3C	; 60
     6ee:	91 05       	cpc	r25, r1
     6f0:	54 f0       	brlt	.+20     	; 0x706 <main+0x222>
				{
					SendString("Wrong minutes");
     6f2:	c3 01       	movw	r24, r6
     6f4:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
					UARTSend('\r');
     6f8:	8d e0       	ldi	r24, 0x0D	; 13
     6fa:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
 					UARTSend('\n');
     6fe:	8a e0       	ldi	r24, 0x0A	; 10
     700:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
					break;
     704:	46 cf       	rjmp	.-372    	; 0x592 <main+0xae>
				}
				else
				{
					MM = tmpTime;
     706:	90 93 c9 00 	sts	0x00C9, r25
     70a:	80 93 c8 00 	sts	0x00C8, r24
					tmpTime = 0;
     70e:	10 92 72 01 	sts	0x0172, r1
     712:	10 92 71 01 	sts	0x0171, r1
					tmp[0] = 0;
     716:	18 82       	st	Y, r1
					tmp[1] = 0;
     718:	f8 01       	movw	r30, r16
     71a:	10 82       	st	Z, r1
     71c:	87 ea       	ldi	r24, 0xA7	; 167
     71e:	91 e6       	ldi	r25, 0x61	; 97
     720:	01 97       	sbiw	r24, 0x01	; 1
     722:	f1 f7       	brne	.-4      	; 0x720 <main+0x23c>
     724:	00 c0       	rjmp	.+0      	; 0x726 <main+0x242>
     726:	00 00       	nop
				}
				_delay_ms(100);
				
				SendString("Enter seconds (SS)");
     728:	c5 01       	movw	r24, r10
     72a:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
				UARTSend('\r');
     72e:	8d e0       	ldi	r24, 0x0D	; 13
     730:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
 				UARTSend('\n');				
     734:	8a e0       	ldi	r24, 0x0A	; 10
     736:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
				tmp[0] = UARTReceive();
     73a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UARTReceive>
     73e:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     740:	0e 94 61 06 	call	0xcc2	; 0xcc2 <UARTReceive>
     744:	f8 01       	movw	r30, r16
     746:	80 83       	st	Z, r24
				tmpTime = atoi(tmp);	
     748:	ce 01       	movw	r24, r28
     74a:	0e 94 a9 08 	call	0x1152	; 0x1152 <atoi>
     74e:	90 93 72 01 	sts	0x0172, r25
     752:	80 93 71 01 	sts	0x0171, r24
				if (tmpTime > 59)
     756:	8c 33       	cpi	r24, 0x3C	; 60
     758:	91 05       	cpc	r25, r1
     75a:	54 f0       	brlt	.+20     	; 0x770 <main+0x28c>
				{
					SendString("Wrong seconds");
     75c:	c1 01       	movw	r24, r2
     75e:	0e 94 65 06 	call	0xcca	; 0xcca <SendString>
					UARTSend('\r');
     762:	8d e0       	ldi	r24, 0x0D	; 13
     764:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
 					UARTSend('\n');
     768:	8a e0       	ldi	r24, 0x0A	; 10
     76a:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
					break;
     76e:	11 cf       	rjmp	.-478    	; 0x592 <main+0xae>
				}
				else
				{
					SS = tmpTime;
     770:	90 93 cb 00 	sts	0x00CB, r25
     774:	80 93 ca 00 	sts	0x00CA, r24
					tmpTime = 0;
     778:	10 92 72 01 	sts	0x0172, r1
     77c:	10 92 71 01 	sts	0x0171, r1
					tmp[0] = 0;
     780:	18 82       	st	Y, r1
					tmp[1] = 0;
     782:	f8 01       	movw	r30, r16
     784:	10 82       	st	Z, r1
     786:	87 ea       	ldi	r24, 0xA7	; 167
     788:	91 e6       	ldi	r25, 0x61	; 97
     78a:	01 97       	sbiw	r24, 0x01	; 1
     78c:	f1 f7       	brne	.-4      	; 0x78a <main+0x2a6>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <main+0x2ac>
     790:	00 00       	nop
				}	
				_delay_ms(100);
				timeMode = 0;	
     792:	10 92 df 00 	sts	0x00DF, r1
     796:	10 92 de 00 	sts	0x00DE, r1
     79a:	fb ce       	rjmp	.-522    	; 0x592 <main+0xae>

0000079c <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
     79c:	87 30       	cpi	r24, 0x07	; 7
     79e:	71 f1       	breq	.+92     	; 0x7fc <DecToDigit+0x60>
     7a0:	88 30       	cpi	r24, 0x08	; 8
     7a2:	70 f4       	brcc	.+28     	; 0x7c0 <DecToDigit+0x24>
     7a4:	83 30       	cpi	r24, 0x03	; 3
     7a6:	11 f1       	breq	.+68     	; 0x7ec <DecToDigit+0x50>
     7a8:	84 30       	cpi	r24, 0x04	; 4
     7aa:	28 f4       	brcc	.+10     	; 0x7b6 <DecToDigit+0x1a>
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	d1 f1       	breq	.+116    	; 0x824 <DecToDigit+0x88>
     7b0:	82 30       	cpi	r24, 0x02	; 2
     7b2:	d0 f4       	brcc	.+52     	; 0x7e8 <DecToDigit+0x4c>
     7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <DecToDigit+0x48>
     7b6:	85 30       	cpi	r24, 0x05	; 5
     7b8:	e9 f0       	breq	.+58     	; 0x7f4 <DecToDigit+0x58>
     7ba:	86 30       	cpi	r24, 0x06	; 6
     7bc:	e8 f4       	brcc	.+58     	; 0x7f8 <DecToDigit+0x5c>
     7be:	18 c0       	rjmp	.+48     	; 0x7f0 <DecToDigit+0x54>
     7c0:	8b 30       	cpi	r24, 0x0B	; 11
     7c2:	21 f1       	breq	.+72     	; 0x80c <DecToDigit+0x70>
     7c4:	8c 30       	cpi	r24, 0x0C	; 12
     7c6:	28 f4       	brcc	.+10     	; 0x7d2 <DecToDigit+0x36>
     7c8:	89 30       	cpi	r24, 0x09	; 9
     7ca:	e1 f0       	breq	.+56     	; 0x804 <DecToDigit+0x68>
     7cc:	8a 30       	cpi	r24, 0x0A	; 10
     7ce:	e0 f4       	brcc	.+56     	; 0x808 <DecToDigit+0x6c>
     7d0:	17 c0       	rjmp	.+46     	; 0x800 <DecToDigit+0x64>
     7d2:	8d 30       	cpi	r24, 0x0D	; 13
     7d4:	f9 f0       	breq	.+62     	; 0x814 <DecToDigit+0x78>
     7d6:	8d 30       	cpi	r24, 0x0D	; 13
     7d8:	d8 f0       	brcs	.+54     	; 0x810 <DecToDigit+0x74>
     7da:	8e 30       	cpi	r24, 0x0E	; 14
     7dc:	e9 f0       	breq	.+58     	; 0x818 <DecToDigit+0x7c>
     7de:	8f 30       	cpi	r24, 0x0F	; 15
     7e0:	f9 f4       	brne	.+62     	; 0x820 <DecToDigit+0x84>
     7e2:	1c c0       	rjmp	.+56     	; 0x81c <DecToDigit+0x80>
	{
		case 0:
			Digit = 0b01011111;				
     7e4:	8f e5       	ldi	r24, 0x5F	; 95
     7e6:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
     7e8:	8b e3       	ldi	r24, 0x3B	; 59
			break;
     7ea:	08 95       	ret
		case 3:
			Digit = 0b00101111;
     7ec:	8f e2       	ldi	r24, 0x2F	; 47
			break;
     7ee:	08 95       	ret
		case 4:
			Digit = 0b01100110;
     7f0:	86 e6       	ldi	r24, 0x66	; 102
			break;
     7f2:	08 95       	ret
		case 5:
			Digit = 0b01101101;
     7f4:	8d e6       	ldi	r24, 0x6D	; 109
			break;
     7f6:	08 95       	ret
		case 6:
			Digit = 0b01111101;
     7f8:	8d e7       	ldi	r24, 0x7D	; 125
			break;
     7fa:	08 95       	ret
		case 7:
			Digit = 0b00000111;
     7fc:	87 e0       	ldi	r24, 0x07	; 7
			break;
     7fe:	08 95       	ret
		case 8:
			Digit = 0b01111111;
     800:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
     802:	08 95       	ret
		case 9:
			Digit = 0b01101111;
     804:	8f e6       	ldi	r24, 0x6F	; 111
			break;
     806:	08 95       	ret
		case 10:
			Digit = 0b01110111;
     808:	87 e7       	ldi	r24, 0x77	; 119
			break;
     80a:	08 95       	ret
		case 11:
			Digit = 0b01111100;
     80c:	8c e7       	ldi	r24, 0x7C	; 124
			break;
     80e:	08 95       	ret
		case 12:
			Digit = 0b01011001;
     810:	89 e5       	ldi	r24, 0x59	; 89
			break;
     812:	08 95       	ret
		case 13:
			Digit = 0b00111110;
     814:	8e e3       	ldi	r24, 0x3E	; 62
			break;
     816:	08 95       	ret
		case 14:
			Digit = 0b01111001;
     818:	89 e7       	ldi	r24, 0x79	; 121
			break;
     81a:	08 95       	ret
		case 15:
			Digit = 0b01110001;
     81c:	81 e7       	ldi	r24, 0x71	; 113
			break;
     81e:	08 95       	ret
		default:
			Digit = 0b00000000;
     820:	80 e0       	ldi	r24, 0x00	; 0
			break;			
     822:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
     824:	86 e0       	ldi	r24, 0x06	; 6
		default:
			Digit = 0b00000000;
			break;			
 	}		 
	return Digit;
     826:	08 95       	ret

00000828 <TempTo7Seg>:
 	UARTSend('\n');
}

void TempTo7Seg()
{	
	PORTC = DecToDigit(tempArr[0]);
     828:	80 91 f3 01 	lds	r24, 0x01F3
     82c:	0e 94 ce 03 	call	0x79c	; 0x79c <DecToDigit>
     830:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 7);
     832:	80 e8       	ldi	r24, 0x80	; 128
     834:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[1]);
     836:	80 91 f5 01 	lds	r24, 0x01F5
     83a:	0e 94 ce 03 	call	0x79c	; 0x79c <DecToDigit>
     83e:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 6);
     840:	80 e4       	ldi	r24, 0x40	; 64
     842:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[2]);
     844:	80 91 f7 01 	lds	r24, 0x01F7
     848:	0e 94 ce 03 	call	0x79c	; 0x79c <DecToDigit>
     84c:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 5);
     84e:	80 e2       	ldi	r24, 0x20	; 32
     850:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[3]);
     852:	80 91 f9 01 	lds	r24, 0x01F9
     856:	0e 94 ce 03 	call	0x79c	; 0x79c <DecToDigit>
     85a:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 4);
     85c:	80 e1       	ldi	r24, 0x10	; 16
     85e:	8b bb       	out	0x1b, r24	; 27
}
     860:	08 95       	ret

00000862 <__vector_3>:
		blink--;
	}
}

ISR(TIMER2_COMP_vect)
{
     862:	1f 92       	push	r1
     864:	0f 92       	push	r0
     866:	0f b6       	in	r0, 0x3f	; 63
     868:	0f 92       	push	r0
     86a:	11 24       	eor	r1, r1
     86c:	2f 93       	push	r18
     86e:	3f 93       	push	r19
     870:	4f 93       	push	r20
     872:	5f 93       	push	r21
     874:	6f 93       	push	r22
     876:	7f 93       	push	r23
     878:	8f 93       	push	r24
     87a:	9f 93       	push	r25
     87c:	af 93       	push	r26
     87e:	bf 93       	push	r27
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	ef 93       	push	r30
     886:	ff 93       	push	r31
	if (segMode == 0)
     888:	80 91 e4 00 	lds	r24, 0x00E4
     88c:	90 91 e5 00 	lds	r25, 0x00E5
     890:	00 97       	sbiw	r24, 0x00	; 0
     892:	d1 f5       	brne	.+116    	; 0x908 <__vector_3+0xa6>
	{
		PORTC = 0x00;
     894:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     896:	1b ba       	out	0x1b, r1	; 27
		PORTC = DecToDigit(timeArr[j]);
     898:	c0 91 d2 00 	lds	r28, 0x00D2
     89c:	d0 91 d3 00 	lds	r29, 0x00D3
     8a0:	fe 01       	movw	r30, r28
     8a2:	ee 0f       	add	r30, r30
     8a4:	ff 1f       	adc	r31, r31
     8a6:	e7 59       	subi	r30, 0x97	; 151
     8a8:	fe 4f       	sbci	r31, 0xFE	; 254
     8aa:	80 81       	ld	r24, Z
     8ac:	0e 94 ce 03 	call	0x79c	; 0x79c <DecToDigit>
     8b0:	85 bb       	out	0x15, r24	; 21
		
		if ((j == 2) && ((SS % 2) == 0) && (segMode == 0))
     8b2:	c2 30       	cpi	r28, 0x02	; 2
     8b4:	d1 05       	cpc	r29, r1
     8b6:	69 f4       	brne	.+26     	; 0x8d2 <__vector_3+0x70>
     8b8:	80 91 ca 00 	lds	r24, 0x00CA
     8bc:	80 fd       	sbrc	r24, 0
     8be:	09 c0       	rjmp	.+18     	; 0x8d2 <__vector_3+0x70>
     8c0:	80 91 e4 00 	lds	r24, 0x00E4
     8c4:	90 91 e5 00 	lds	r25, 0x00E5
     8c8:	00 97       	sbiw	r24, 0x00	; 0
     8ca:	19 f4       	brne	.+6      	; 0x8d2 <__vector_3+0x70>
		{			
			PORTC ^= 0b10000000;	
     8cc:	85 b3       	in	r24, 0x15	; 21
     8ce:	80 58       	subi	r24, 0x80	; 128
     8d0:	85 bb       	out	0x15, r24	; 21
		}	
			
		PORTA = (1 << (7 - j));			
     8d2:	80 91 d2 00 	lds	r24, 0x00D2
     8d6:	90 91 d3 00 	lds	r25, 0x00D3
     8da:	27 e0       	ldi	r18, 0x07	; 7
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	28 1b       	sub	r18, r24
     8e0:	39 0b       	sbc	r19, r25
     8e2:	41 e0       	ldi	r20, 0x01	; 1
     8e4:	50 e0       	ldi	r21, 0x00	; 0
     8e6:	ba 01       	movw	r22, r20
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__vector_3+0x8c>
     8ea:	66 0f       	add	r22, r22
     8ec:	77 1f       	adc	r23, r23
     8ee:	2a 95       	dec	r18
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__vector_3+0x88>
     8f2:	6b bb       	out	0x1b, r22	; 27
		j++;
     8f4:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
     8f6:	64 e0       	ldi	r22, 0x04	; 4
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	0e 94 82 08 	call	0x1104	; 0x1104 <__divmodhi4>
     8fe:	90 93 d3 00 	sts	0x00D3, r25
     902:	80 93 d2 00 	sts	0x00D2, r24
     906:	2d c0       	rjmp	.+90     	; 0x962 <__vector_3+0x100>
	}	
	else
	{
		PORTC = 0x00;
     908:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     90a:	1b ba       	out	0x1b, r1	; 27
		PORTC = DecToDigit(tempArr[j]);
     90c:	c0 91 d2 00 	lds	r28, 0x00D2
     910:	d0 91 d3 00 	lds	r29, 0x00D3
     914:	fe 01       	movw	r30, r28
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	ed 50       	subi	r30, 0x0D	; 13
     91c:	fe 4f       	sbci	r31, 0xFE	; 254
     91e:	80 81       	ld	r24, Z
     920:	0e 94 ce 03 	call	0x79c	; 0x79c <DecToDigit>
     924:	85 bb       	out	0x15, r24	; 21
		
		if (j == 3)
     926:	c3 30       	cpi	r28, 0x03	; 3
     928:	d1 05       	cpc	r29, r1
     92a:	09 f4       	brne	.+2      	; 0x92e <__vector_3+0xcc>
		{			
			PORTC |= 0b10000000;	
     92c:	af 9a       	sbi	0x15, 7	; 21
		}
		
		PORTA = (1 << (7 - j));			
     92e:	80 91 d2 00 	lds	r24, 0x00D2
     932:	90 91 d3 00 	lds	r25, 0x00D3
     936:	27 e0       	ldi	r18, 0x07	; 7
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	28 1b       	sub	r18, r24
     93c:	39 0b       	sbc	r19, r25
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	ba 01       	movw	r22, r20
     944:	02 c0       	rjmp	.+4      	; 0x94a <__vector_3+0xe8>
     946:	66 0f       	add	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	2a 95       	dec	r18
     94c:	e2 f7       	brpl	.-8      	; 0x946 <__vector_3+0xe4>
     94e:	6b bb       	out	0x1b, r22	; 27
		j++;		
     950:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
     952:	64 e0       	ldi	r22, 0x04	; 4
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	0e 94 82 08 	call	0x1104	; 0x1104 <__divmodhi4>
     95a:	90 93 d3 00 	sts	0x00D3, r25
     95e:	80 93 d2 00 	sts	0x00D2, r24
	}		
}
     962:	ff 91       	pop	r31
     964:	ef 91       	pop	r30
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	bf 91       	pop	r27
     96c:	af 91       	pop	r26
     96e:	9f 91       	pop	r25
     970:	8f 91       	pop	r24
     972:	7f 91       	pop	r23
     974:	6f 91       	pop	r22
     976:	5f 91       	pop	r21
     978:	4f 91       	pop	r20
     97a:	3f 91       	pop	r19
     97c:	2f 91       	pop	r18
     97e:	0f 90       	pop	r0
     980:	0f be       	out	0x3f, r0	; 63
     982:	0f 90       	pop	r0
     984:	1f 90       	pop	r1
     986:	18 95       	reti

00000988 <get_status>:
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
	PORTC &= ~0b00000011; // Clear pull-up on both lines
}

static uint8_t get_status(uint8_t status)
{
     988:	98 2f       	mov	r25, r24
	uint8_t st;

	while (!(TWCR & (1 << TWINT)))
     98a:	06 b6       	in	r0, 0x36	; 54
     98c:	07 fe       	sbrs	r0, 7
     98e:	fd cf       	rjmp	.-6      	; 0x98a <get_status+0x2>
		;
	if ((st = (TWSR & 0xF8)) == status)
     990:	81 b1       	in	r24, 0x01	; 1
     992:	88 7f       	andi	r24, 0xF8	; 248
     994:	89 17       	cp	r24, r25
     996:	09 f4       	brne	.+2      	; 0x99a <get_status+0x12>
		return 0;
     998:	80 e0       	ldi	r24, 0x00	; 0
	else
		return st;
}
     99a:	08 95       	ret

0000099c <send_start>:

static int send_start(uint8_t status)
{
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     99c:	94 ea       	ldi	r25, 0xA4	; 164
     99e:	96 bf       	out	0x36, r25	; 54
	return get_status(status);
     9a0:	0e 94 c4 04 	call	0x988	; 0x988 <get_status>
}
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	08 95       	ret

000009a8 <send_stop>:

static void send_stop(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     9a8:	84 e9       	ldi	r24, 0x94	; 148
     9aa:	86 bf       	out	0x36, r24	; 54
}
     9ac:	08 95       	ret

000009ae <send_data>:

static int send_data(uint8_t data, uint8_t status)
{
	TWDR = data;
     9ae:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);
     9b0:	84 e8       	ldi	r24, 0x84	; 132
     9b2:	86 bf       	out	0x36, r24	; 54
	return get_status(status);
     9b4:	86 2f       	mov	r24, r22
     9b6:	0e 94 c4 04 	call	0x988	; 0x988 <get_status>
}
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	08 95       	ret

000009be <recv_data>:

static int recv_data(uint8_t *data, uint8_t status, uint8_t ack)
{
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	ec 01       	movw	r28, r24
     9c4:	86 2f       	mov	r24, r22
	TWCR = (1 << TWINT) | (ack << TWEA) | (1 << TWEN);
     9c6:	42 95       	swap	r20
     9c8:	44 0f       	add	r20, r20
     9ca:	44 0f       	add	r20, r20
     9cc:	40 7c       	andi	r20, 0xC0	; 192
     9ce:	44 68       	ori	r20, 0x84	; 132
     9d0:	46 bf       	out	0x36, r20	; 54
	if (get_status(status) == 0)
     9d2:	0e 94 c4 04 	call	0x988	; 0x988 <get_status>
     9d6:	88 23       	and	r24, r24
     9d8:	29 f4       	brne	.+10     	; 0x9e4 <recv_data+0x26>
	{
		*data = TWDR;
     9da:	83 b1       	in	r24, 0x03	; 3
     9dc:	88 83       	st	Y, r24
		return 0;
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <recv_data+0x2a>
	}
	else
	{
		return -1;
     9e4:	2f ef       	ldi	r18, 0xFF	; 255
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
	}
}
     9e8:	82 2f       	mov	r24, r18
     9ea:	93 2f       	mov	r25, r19
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <twi_init>:
} TwiOperation;

void twi_init(TwiMode mode)
{
	// 1 = output, 0 = input
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
     9f2:	94 b3       	in	r25, 0x14	; 20
     9f4:	9c 7f       	andi	r25, 0xFC	; 252
     9f6:	94 bb       	out	0x14, r25	; 20
	PORTC |= 0b00000011; // Internal pull-up on both lines
     9f8:	95 b3       	in	r25, 0x15	; 21
     9fa:	93 60       	ori	r25, 0x03	; 3
     9fc:	95 bb       	out	0x15, r25	; 21

	TWBR = (mode == standard) ? 32 : 2;
     9fe:	88 23       	and	r24, r24
     a00:	11 f4       	brne	.+4      	; 0xa06 <twi_init+0x14>
     a02:	80 e2       	ldi	r24, 0x20	; 32
     a04:	01 c0       	rjmp	.+2      	; 0xa08 <twi_init+0x16>
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~(0b11 << TWPS0); // Clearing TWSP to 0
     a0a:	81 b1       	in	r24, 0x01	; 1
     a0c:	8c 7f       	andi	r24, 0xFC	; 252
     a0e:	81 b9       	out	0x01, r24	; 1

	TWCR |= (1 << TWEN); // Enable TWI, generating the SCLK
     a10:	86 b7       	in	r24, 0x36	; 54
     a12:	84 60       	ori	r24, 0x04	; 4
     a14:	86 bf       	out	0x36, r24	; 54
}
     a16:	08 95       	ret

00000a18 <twi_shut>:

void twi_shut(void)
{
	TWCR &= ~(1 << TWEN); // Disable TWI
     a18:	86 b7       	in	r24, 0x36	; 54
     a1a:	8b 7f       	andi	r24, 0xFB	; 251
     a1c:	86 bf       	out	0x36, r24	; 54

	TWBR = 0;
     a1e:	10 b8       	out	0x00, r1	; 0
	TWSR &= ~(0b11 << TWPS0);
     a20:	81 b1       	in	r24, 0x01	; 1
     a22:	8c 7f       	andi	r24, 0xFC	; 252
     a24:	81 b9       	out	0x01, r24	; 1

	// 1 = output, 0 = input
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
     a26:	84 b3       	in	r24, 0x14	; 20
     a28:	8c 7f       	andi	r24, 0xFC	; 252
     a2a:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~0b00000011; // Clear pull-up on both lines
     a2c:	85 b3       	in	r24, 0x15	; 21
     a2e:	8c 7f       	andi	r24, 0xFC	; 252
     a30:	85 bb       	out	0x15, r24	; 21
}
     a32:	08 95       	ret

00000a34 <twi_master_tx>:
		return -1;
	}
}

int twi_master_tx(uint8_t addr, uint8_t *data, int len)
{
     a34:	df 92       	push	r13
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	08 2f       	mov	r16, r24
     a44:	16 2f       	mov	r17, r22
     a46:	d7 2e       	mov	r13, r23
     a48:	7a 01       	movw	r14, r20
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     a4a:	88 e0       	ldi	r24, 0x08	; 8
     a4c:	0e 94 ce 04 	call	0x99c	; 0x99c <send_start>
     a50:	00 97       	sbiw	r24, 0x00	; 0
     a52:	29 f0       	breq	.+10     	; 0xa5e <twi_master_tx+0x2a>
     a54:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     a58:	2f ef       	ldi	r18, 0xFF	; 255
     a5a:	3f ef       	ldi	r19, 0xFF	; 255
     a5c:	29 c0       	rjmp	.+82     	; 0xab0 <twi_master_tx+0x7c>
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     a5e:	80 2f       	mov	r24, r16
     a60:	88 0f       	add	r24, r24
     a62:	68 e1       	ldi	r22, 0x18	; 24
     a64:	0e 94 d7 04 	call	0x9ae	; 0x9ae <send_data>
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	21 f4       	brne	.+8      	; 0xa74 <twi_master_tx+0x40>
	for (i = 0; i < len; i++)
     a6c:	1e 14       	cp	r1, r14
     a6e:	1f 04       	cpc	r1, r15
     a70:	34 f0       	brlt	.+12     	; 0xa7e <twi_master_tx+0x4a>
     a72:	1a c0       	rjmp	.+52     	; 0xaa8 <twi_master_tx+0x74>
int twi_master_tx(uint8_t addr, uint8_t *data, int len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     a74:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     a78:	2f ef       	ldi	r18, 0xFF	; 255
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	19 c0       	rjmp	.+50     	; 0xab0 <twi_master_tx+0x7c>
     a7e:	01 2f       	mov	r16, r17
     a80:	1d 2d       	mov	r17, r13
	for (i = 0; i < len; i++)
     a82:	c0 e0       	ldi	r28, 0x00	; 0
     a84:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (send_data(data[i], st_data_w_ack)) QUIT_TWI_OP;
     a86:	f8 01       	movw	r30, r16
     a88:	81 91       	ld	r24, Z+
     a8a:	8f 01       	movw	r16, r30
     a8c:	68 e2       	ldi	r22, 0x28	; 40
     a8e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <send_data>
     a92:	00 97       	sbiw	r24, 0x00	; 0
     a94:	29 f0       	breq	.+10     	; 0xaa0 <twi_master_tx+0x6c>
     a96:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     a9a:	2f ef       	ldi	r18, 0xFF	; 255
     a9c:	3f ef       	ldi	r19, 0xFF	; 255
     a9e:	08 c0       	rjmp	.+16     	; 0xab0 <twi_master_tx+0x7c>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
	for (i = 0; i < len; i++)
     aa0:	21 96       	adiw	r28, 0x01	; 1
     aa2:	ce 15       	cp	r28, r14
     aa4:	df 05       	cpc	r29, r15
     aa6:	7c f3       	brlt	.-34     	; 0xa86 <twi_master_tx+0x52>
	{
		if (send_data(data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	send_stop();
     aa8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
	return 0;
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
}
     ab0:	82 2f       	mov	r24, r18
     ab2:	93 2f       	mov	r25, r19
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	1f 91       	pop	r17
     aba:	0f 91       	pop	r16
     abc:	ff 90       	pop	r15
     abe:	ef 90       	pop	r14
     ac0:	df 90       	pop	r13
     ac2:	08 95       	ret

00000ac4 <twi_master_rx>:

int twi_master_rx(uint8_t addr, uint8_t *data, int len)
{
     ac4:	df 92       	push	r13
     ac6:	ef 92       	push	r14
     ac8:	ff 92       	push	r15
     aca:	0f 93       	push	r16
     acc:	1f 93       	push	r17
     ace:	cf 93       	push	r28
     ad0:	df 93       	push	r29
     ad2:	d8 2e       	mov	r13, r24
     ad4:	7b 01       	movw	r14, r22
     ad6:	8a 01       	movw	r16, r20
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     ad8:	88 e0       	ldi	r24, 0x08	; 8
     ada:	0e 94 ce 04 	call	0x99c	; 0x99c <send_start>
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	29 f0       	breq	.+10     	; 0xaec <twi_master_rx+0x28>
     ae2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     ae6:	2f ef       	ldi	r18, 0xFF	; 255
     ae8:	3f ef       	ldi	r19, 0xFF	; 255
     aea:	3b c0       	rjmp	.+118    	; 0xb62 <twi_master_rx+0x9e>
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     aec:	8d 2d       	mov	r24, r13
     aee:	88 0f       	add	r24, r24
     af0:	81 60       	ori	r24, 0x01	; 1
     af2:	60 e4       	ldi	r22, 0x40	; 64
     af4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <send_data>
     af8:	00 97       	sbiw	r24, 0x00	; 0
     afa:	41 f4       	brne	.+16     	; 0xb0c <twi_master_rx+0x48>
	for (i = 0; i < len - 1; i++)
     afc:	01 50       	subi	r16, 0x01	; 1
     afe:	10 40       	sbci	r17, 0x00	; 0
     b00:	10 16       	cp	r1, r16
     b02:	11 06       	cpc	r1, r17
     b04:	44 f0       	brlt	.+16     	; 0xb16 <twi_master_rx+0x52>
     b06:	c0 e0       	ldi	r28, 0x00	; 0
     b08:	d0 e0       	ldi	r29, 0x00	; 0
     b0a:	19 c0       	rjmp	.+50     	; 0xb3e <twi_master_rx+0x7a>
int twi_master_rx(uint8_t addr, uint8_t *data, int len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     b0c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     b10:	2f ef       	ldi	r18, 0xFF	; 255
     b12:	3f ef       	ldi	r19, 0xFF	; 255
     b14:	26 c0       	rjmp	.+76     	; 0xb62 <twi_master_rx+0x9e>
	for (i = 0; i < len - 1; i++)
     b16:	c0 e0       	ldi	r28, 0x00	; 0
     b18:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (recv_data(&data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
     b1a:	c7 01       	movw	r24, r14
     b1c:	8c 0f       	add	r24, r28
     b1e:	9d 1f       	adc	r25, r29
     b20:	60 e5       	ldi	r22, 0x50	; 80
     b22:	41 e0       	ldi	r20, 0x01	; 1
     b24:	0e 94 df 04 	call	0x9be	; 0x9be <recv_data>
     b28:	00 97       	sbiw	r24, 0x00	; 0
     b2a:	29 f0       	breq	.+10     	; 0xb36 <twi_master_rx+0x72>
     b2c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	16 c0       	rjmp	.+44     	; 0xb62 <twi_master_rx+0x9e>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
	for (i = 0; i < len - 1; i++)
     b36:	21 96       	adiw	r28, 0x01	; 1
     b38:	c0 17       	cp	r28, r16
     b3a:	d1 07       	cpc	r29, r17
     b3c:	74 f3       	brlt	.-36     	; 0xb1a <twi_master_rx+0x56>
	{
		if (recv_data(&data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
	}
	if (recv_data(&data[i], st_data_r_noack, 0)) QUIT_TWI_OP;
     b3e:	c7 01       	movw	r24, r14
     b40:	8c 0f       	add	r24, r28
     b42:	9d 1f       	adc	r25, r29
     b44:	68 e5       	ldi	r22, 0x58	; 88
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	0e 94 df 04 	call	0x9be	; 0x9be <recv_data>
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	29 f0       	breq	.+10     	; 0xb5a <twi_master_rx+0x96>
     b50:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     b54:	2f ef       	ldi	r18, 0xFF	; 255
     b56:	3f ef       	ldi	r19, 0xFF	; 255
     b58:	04 c0       	rjmp	.+8      	; 0xb62 <twi_master_rx+0x9e>
	send_stop();
     b5a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
	return 0;
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
}
     b62:	82 2f       	mov	r24, r18
     b64:	93 2f       	mov	r25, r19
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	df 90       	pop	r13
     b74:	08 95       	ret

00000b76 <twi_master_tx_rx>:

int twi_master_tx_rx(uint8_t addr, uint8_t *tx_data, int tx_len, uint8_t *rx_data,
			int rx_len)
{
     b76:	7f 92       	push	r7
     b78:	8f 92       	push	r8
     b7a:	9f 92       	push	r9
     b7c:	af 92       	push	r10
     b7e:	bf 92       	push	r11
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	b8 2e       	mov	r11, r24
     b92:	a6 2e       	mov	r10, r22
     b94:	77 2e       	mov	r7, r23
     b96:	7a 01       	movw	r14, r20
     b98:	69 01       	movw	r12, r18
     b9a:	48 01       	movw	r8, r16
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     b9c:	88 e0       	ldi	r24, 0x08	; 8
     b9e:	0e 94 ce 04 	call	0x99c	; 0x99c <send_start>
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	29 f0       	breq	.+10     	; 0xbb0 <twi_master_tx_rx+0x3a>
     ba6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     baa:	2f ef       	ldi	r18, 0xFF	; 255
     bac:	3f ef       	ldi	r19, 0xFF	; 255
     bae:	6b c0       	rjmp	.+214    	; 0xc86 <twi_master_tx_rx+0x110>
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     bb0:	8b 2d       	mov	r24, r11
     bb2:	88 0f       	add	r24, r24
     bb4:	68 e1       	ldi	r22, 0x18	; 24
     bb6:	0e 94 d7 04 	call	0x9ae	; 0x9ae <send_data>
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	21 f4       	brne	.+8      	; 0xbc6 <twi_master_tx_rx+0x50>
	for (i = 0; i < tx_len; i++)
     bbe:	1e 14       	cp	r1, r14
     bc0:	1f 04       	cpc	r1, r15
     bc2:	34 f0       	brlt	.+12     	; 0xbd0 <twi_master_tx_rx+0x5a>
     bc4:	1a c0       	rjmp	.+52     	; 0xbfa <twi_master_tx_rx+0x84>
			int rx_len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     bc6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     bca:	2f ef       	ldi	r18, 0xFF	; 255
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	5b c0       	rjmp	.+182    	; 0xc86 <twi_master_tx_rx+0x110>
     bd0:	0a 2d       	mov	r16, r10
     bd2:	17 2d       	mov	r17, r7
	for (i = 0; i < tx_len; i++)
     bd4:	c0 e0       	ldi	r28, 0x00	; 0
     bd6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
     bd8:	f8 01       	movw	r30, r16
     bda:	81 91       	ld	r24, Z+
     bdc:	8f 01       	movw	r16, r30
     bde:	68 e2       	ldi	r22, 0x28	; 40
     be0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <send_data>
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	29 f0       	breq	.+10     	; 0xbf2 <twi_master_tx_rx+0x7c>
     be8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     bec:	2f ef       	ldi	r18, 0xFF	; 255
     bee:	3f ef       	ldi	r19, 0xFF	; 255
     bf0:	4a c0       	rjmp	.+148    	; 0xc86 <twi_master_tx_rx+0x110>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
	for (i = 0; i < tx_len; i++)
     bf2:	21 96       	adiw	r28, 0x01	; 1
     bf4:	ce 15       	cp	r28, r14
     bf6:	df 05       	cpc	r29, r15
     bf8:	7c f3       	brlt	.-34     	; 0xbd8 <twi_master_tx_rx+0x62>
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
     bfa:	80 e1       	ldi	r24, 0x10	; 16
     bfc:	0e 94 ce 04 	call	0x99c	; 0x99c <send_start>
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	29 f0       	breq	.+10     	; 0xc0e <twi_master_tx_rx+0x98>
     c04:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     c08:	2f ef       	ldi	r18, 0xFF	; 255
     c0a:	3f ef       	ldi	r19, 0xFF	; 255
     c0c:	3c c0       	rjmp	.+120    	; 0xc86 <twi_master_tx_rx+0x110>
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     c0e:	8b 2d       	mov	r24, r11
     c10:	88 0f       	add	r24, r24
     c12:	81 60       	ori	r24, 0x01	; 1
     c14:	60 e4       	ldi	r22, 0x40	; 64
     c16:	0e 94 d7 04 	call	0x9ae	; 0x9ae <send_data>
     c1a:	00 97       	sbiw	r24, 0x00	; 0
     c1c:	49 f4       	brne	.+18     	; 0xc30 <twi_master_tx_rx+0xba>
	for (i = 0; i < rx_len - 1; i++)
     c1e:	84 01       	movw	r16, r8
     c20:	01 50       	subi	r16, 0x01	; 1
     c22:	10 40       	sbci	r17, 0x00	; 0
     c24:	10 16       	cp	r1, r16
     c26:	11 06       	cpc	r1, r17
     c28:	44 f0       	brlt	.+16     	; 0xc3a <twi_master_tx_rx+0xc4>
     c2a:	c0 e0       	ldi	r28, 0x00	; 0
     c2c:	d0 e0       	ldi	r29, 0x00	; 0
     c2e:	19 c0       	rjmp	.+50     	; 0xc62 <twi_master_tx_rx+0xec>
	for (i = 0; i < tx_len; i++)
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     c30:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     c34:	2f ef       	ldi	r18, 0xFF	; 255
     c36:	3f ef       	ldi	r19, 0xFF	; 255
     c38:	26 c0       	rjmp	.+76     	; 0xc86 <twi_master_tx_rx+0x110>
	for (i = 0; i < rx_len - 1; i++)
     c3a:	c0 e0       	ldi	r28, 0x00	; 0
     c3c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (recv_data(&rx_data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
     c3e:	c6 01       	movw	r24, r12
     c40:	8c 0f       	add	r24, r28
     c42:	9d 1f       	adc	r25, r29
     c44:	60 e5       	ldi	r22, 0x50	; 80
     c46:	41 e0       	ldi	r20, 0x01	; 1
     c48:	0e 94 df 04 	call	0x9be	; 0x9be <recv_data>
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	29 f0       	breq	.+10     	; 0xc5a <twi_master_tx_rx+0xe4>
     c50:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     c54:	2f ef       	ldi	r18, 0xFF	; 255
     c56:	3f ef       	ldi	r19, 0xFF	; 255
     c58:	16 c0       	rjmp	.+44     	; 0xc86 <twi_master_tx_rx+0x110>
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
	for (i = 0; i < rx_len - 1; i++)
     c5a:	21 96       	adiw	r28, 0x01	; 1
     c5c:	c0 17       	cp	r28, r16
     c5e:	d1 07       	cpc	r29, r17
     c60:	74 f3       	brlt	.-36     	; 0xc3e <twi_master_tx_rx+0xc8>
	{
		if (recv_data(&rx_data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
	}
	if (recv_data(&rx_data[i], st_data_r_noack, 0)) QUIT_TWI_OP;
     c62:	c6 01       	movw	r24, r12
     c64:	8c 0f       	add	r24, r28
     c66:	9d 1f       	adc	r25, r29
     c68:	68 e5       	ldi	r22, 0x58	; 88
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 df 04 	call	0x9be	; 0x9be <recv_data>
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	29 f0       	breq	.+10     	; 0xc7e <twi_master_tx_rx+0x108>
     c74:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
     c78:	2f ef       	ldi	r18, 0xFF	; 255
     c7a:	3f ef       	ldi	r19, 0xFF	; 255
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <twi_master_tx_rx+0x110>
	send_stop();
     c7e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <send_stop>
	return 0;
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
}
     c86:	82 2f       	mov	r24, r18
     c88:	93 2f       	mov	r25, r19
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	df 90       	pop	r13
     c98:	cf 90       	pop	r12
     c9a:	bf 90       	pop	r11
     c9c:	af 90       	pop	r10
     c9e:	9f 90       	pop	r9
     ca0:	8f 90       	pop	r8
     ca2:	7f 90       	pop	r7
     ca4:	08 95       	ret

00000ca6 <UARTInit>:
#include "main.h"
#include "uartlib.h"

void UARTInit()
{		
	UCSRA = 0x00;
     ca6:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
     ca8:	8a b1       	in	r24, 0x0a	; 10
     caa:	88 61       	ori	r24, 0x18	; 24
     cac:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
     cae:	80 b5       	in	r24, 0x20	; 32
     cb0:	86 68       	ori	r24, 0x86	; 134
     cb2:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;
     cb4:	89 e1       	ldi	r24, 0x19	; 25
     cb6:	89 b9       	out	0x09, r24	; 9
}
     cb8:	08 95       	ret

00000cba <UARTSend>:

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
     cba:	5d 9b       	sbis	0x0b, 5	; 11
     cbc:	fe cf       	rjmp	.-4      	; 0xcba <UARTSend>
	{
				
	}		
	UDR = Value;
     cbe:	8c b9       	out	0x0c, r24	; 12
}
     cc0:	08 95       	ret

00000cc2 <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
     cc2:	5f 9b       	sbis	0x0b, 7	; 11
     cc4:	fe cf       	rjmp	.-4      	; 0xcc2 <UARTReceive>
	{
		
	}		
	return UDR; 
     cc6:	8c b1       	in	r24, 0x0c	; 12
}
     cc8:	08 95       	ret

00000cca <SendString>:

void SendString(char* str)
{
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	ec 01       	movw	r28, r24
	while(*str != '\0')
     cd0:	88 81       	ld	r24, Y
     cd2:	88 23       	and	r24, r24
     cd4:	31 f0       	breq	.+12     	; 0xce2 <SendString+0x18>
		
	}		
	return UDR; 
}

void SendString(char* str)
     cd6:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
     cd8:	0e 94 5d 06 	call	0xcba	; 0xcba <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
     cdc:	89 91       	ld	r24, Y+
     cde:	88 23       	and	r24, r24
     ce0:	d9 f7       	brne	.-10     	; 0xcd8 <SendString+0xe>
	}
// 	//UARTSend(*str);
// 		
// 	UARTSend('\r');
// 	UARTSend('\n');
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <__subsf3>:
     ce8:	50 58       	subi	r21, 0x80	; 128

00000cea <__addsf3>:
     cea:	bb 27       	eor	r27, r27
     cec:	aa 27       	eor	r26, r26
     cee:	0e d0       	rcall	.+28     	; 0xd0c <__addsf3x>
     cf0:	4d c1       	rjmp	.+666    	; 0xf8c <__fp_round>
     cf2:	3e d1       	rcall	.+636    	; 0xf70 <__fp_pscA>
     cf4:	30 f0       	brcs	.+12     	; 0xd02 <__addsf3+0x18>
     cf6:	43 d1       	rcall	.+646    	; 0xf7e <__fp_pscB>
     cf8:	20 f0       	brcs	.+8      	; 0xd02 <__addsf3+0x18>
     cfa:	31 f4       	brne	.+12     	; 0xd08 <__addsf3+0x1e>
     cfc:	9f 3f       	cpi	r25, 0xFF	; 255
     cfe:	11 f4       	brne	.+4      	; 0xd04 <__addsf3+0x1a>
     d00:	1e f4       	brtc	.+6      	; 0xd08 <__addsf3+0x1e>
     d02:	33 c1       	rjmp	.+614    	; 0xf6a <__fp_nan>
     d04:	0e f4       	brtc	.+2      	; 0xd08 <__addsf3+0x1e>
     d06:	e0 95       	com	r30
     d08:	e7 fb       	bst	r30, 7
     d0a:	29 c1       	rjmp	.+594    	; 0xf5e <__fp_inf>

00000d0c <__addsf3x>:
     d0c:	e9 2f       	mov	r30, r25
     d0e:	4f d1       	rcall	.+670    	; 0xfae <__fp_split3>
     d10:	80 f3       	brcs	.-32     	; 0xcf2 <__addsf3+0x8>
     d12:	ba 17       	cp	r27, r26
     d14:	62 07       	cpc	r22, r18
     d16:	73 07       	cpc	r23, r19
     d18:	84 07       	cpc	r24, r20
     d1a:	95 07       	cpc	r25, r21
     d1c:	18 f0       	brcs	.+6      	; 0xd24 <__addsf3x+0x18>
     d1e:	71 f4       	brne	.+28     	; 0xd3c <__addsf3x+0x30>
     d20:	9e f5       	brtc	.+102    	; 0xd88 <__addsf3x+0x7c>
     d22:	67 c1       	rjmp	.+718    	; 0xff2 <__fp_zero>
     d24:	0e f4       	brtc	.+2      	; 0xd28 <__addsf3x+0x1c>
     d26:	e0 95       	com	r30
     d28:	0b 2e       	mov	r0, r27
     d2a:	ba 2f       	mov	r27, r26
     d2c:	a0 2d       	mov	r26, r0
     d2e:	0b 01       	movw	r0, r22
     d30:	b9 01       	movw	r22, r18
     d32:	90 01       	movw	r18, r0
     d34:	0c 01       	movw	r0, r24
     d36:	ca 01       	movw	r24, r20
     d38:	a0 01       	movw	r20, r0
     d3a:	11 24       	eor	r1, r1
     d3c:	ff 27       	eor	r31, r31
     d3e:	59 1b       	sub	r21, r25
     d40:	99 f0       	breq	.+38     	; 0xd68 <__addsf3x+0x5c>
     d42:	59 3f       	cpi	r21, 0xF9	; 249
     d44:	50 f4       	brcc	.+20     	; 0xd5a <__addsf3x+0x4e>
     d46:	50 3e       	cpi	r21, 0xE0	; 224
     d48:	68 f1       	brcs	.+90     	; 0xda4 <__addsf3x+0x98>
     d4a:	1a 16       	cp	r1, r26
     d4c:	f0 40       	sbci	r31, 0x00	; 0
     d4e:	a2 2f       	mov	r26, r18
     d50:	23 2f       	mov	r18, r19
     d52:	34 2f       	mov	r19, r20
     d54:	44 27       	eor	r20, r20
     d56:	58 5f       	subi	r21, 0xF8	; 248
     d58:	f3 cf       	rjmp	.-26     	; 0xd40 <__addsf3x+0x34>
     d5a:	46 95       	lsr	r20
     d5c:	37 95       	ror	r19
     d5e:	27 95       	ror	r18
     d60:	a7 95       	ror	r26
     d62:	f0 40       	sbci	r31, 0x00	; 0
     d64:	53 95       	inc	r21
     d66:	c9 f7       	brne	.-14     	; 0xd5a <__addsf3x+0x4e>
     d68:	7e f4       	brtc	.+30     	; 0xd88 <__addsf3x+0x7c>
     d6a:	1f 16       	cp	r1, r31
     d6c:	ba 0b       	sbc	r27, r26
     d6e:	62 0b       	sbc	r22, r18
     d70:	73 0b       	sbc	r23, r19
     d72:	84 0b       	sbc	r24, r20
     d74:	ba f0       	brmi	.+46     	; 0xda4 <__addsf3x+0x98>
     d76:	91 50       	subi	r25, 0x01	; 1
     d78:	a1 f0       	breq	.+40     	; 0xda2 <__addsf3x+0x96>
     d7a:	ff 0f       	add	r31, r31
     d7c:	bb 1f       	adc	r27, r27
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	88 1f       	adc	r24, r24
     d84:	c2 f7       	brpl	.-16     	; 0xd76 <__addsf3x+0x6a>
     d86:	0e c0       	rjmp	.+28     	; 0xda4 <__addsf3x+0x98>
     d88:	ba 0f       	add	r27, r26
     d8a:	62 1f       	adc	r22, r18
     d8c:	73 1f       	adc	r23, r19
     d8e:	84 1f       	adc	r24, r20
     d90:	48 f4       	brcc	.+18     	; 0xda4 <__addsf3x+0x98>
     d92:	87 95       	ror	r24
     d94:	77 95       	ror	r23
     d96:	67 95       	ror	r22
     d98:	b7 95       	ror	r27
     d9a:	f7 95       	ror	r31
     d9c:	9e 3f       	cpi	r25, 0xFE	; 254
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <__addsf3x+0x96>
     da0:	b3 cf       	rjmp	.-154    	; 0xd08 <__addsf3+0x1e>
     da2:	93 95       	inc	r25
     da4:	88 0f       	add	r24, r24
     da6:	08 f0       	brcs	.+2      	; 0xdaa <__addsf3x+0x9e>
     da8:	99 27       	eor	r25, r25
     daa:	ee 0f       	add	r30, r30
     dac:	97 95       	ror	r25
     dae:	87 95       	ror	r24
     db0:	08 95       	ret

00000db2 <__divsf3>:
     db2:	0c d0       	rcall	.+24     	; 0xdcc <__divsf3x>
     db4:	eb c0       	rjmp	.+470    	; 0xf8c <__fp_round>
     db6:	e3 d0       	rcall	.+454    	; 0xf7e <__fp_pscB>
     db8:	40 f0       	brcs	.+16     	; 0xdca <__divsf3+0x18>
     dba:	da d0       	rcall	.+436    	; 0xf70 <__fp_pscA>
     dbc:	30 f0       	brcs	.+12     	; 0xdca <__divsf3+0x18>
     dbe:	21 f4       	brne	.+8      	; 0xdc8 <__divsf3+0x16>
     dc0:	5f 3f       	cpi	r21, 0xFF	; 255
     dc2:	19 f0       	breq	.+6      	; 0xdca <__divsf3+0x18>
     dc4:	cc c0       	rjmp	.+408    	; 0xf5e <__fp_inf>
     dc6:	51 11       	cpse	r21, r1
     dc8:	15 c1       	rjmp	.+554    	; 0xff4 <__fp_szero>
     dca:	cf c0       	rjmp	.+414    	; 0xf6a <__fp_nan>

00000dcc <__divsf3x>:
     dcc:	f0 d0       	rcall	.+480    	; 0xfae <__fp_split3>
     dce:	98 f3       	brcs	.-26     	; 0xdb6 <__divsf3+0x4>

00000dd0 <__divsf3_pse>:
     dd0:	99 23       	and	r25, r25
     dd2:	c9 f3       	breq	.-14     	; 0xdc6 <__divsf3+0x14>
     dd4:	55 23       	and	r21, r21
     dd6:	b1 f3       	breq	.-20     	; 0xdc4 <__divsf3+0x12>
     dd8:	95 1b       	sub	r25, r21
     dda:	55 0b       	sbc	r21, r21
     ddc:	bb 27       	eor	r27, r27
     dde:	aa 27       	eor	r26, r26
     de0:	62 17       	cp	r22, r18
     de2:	73 07       	cpc	r23, r19
     de4:	84 07       	cpc	r24, r20
     de6:	38 f0       	brcs	.+14     	; 0xdf6 <__divsf3_pse+0x26>
     de8:	9f 5f       	subi	r25, 0xFF	; 255
     dea:	5f 4f       	sbci	r21, 0xFF	; 255
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	aa 1f       	adc	r26, r26
     df4:	a9 f3       	breq	.-22     	; 0xde0 <__divsf3_pse+0x10>
     df6:	33 d0       	rcall	.+102    	; 0xe5e <__divsf3_pse+0x8e>
     df8:	0e 2e       	mov	r0, r30
     dfa:	3a f0       	brmi	.+14     	; 0xe0a <__divsf3_pse+0x3a>
     dfc:	e0 e8       	ldi	r30, 0x80	; 128
     dfe:	30 d0       	rcall	.+96     	; 0xe60 <__divsf3_pse+0x90>
     e00:	91 50       	subi	r25, 0x01	; 1
     e02:	50 40       	sbci	r21, 0x00	; 0
     e04:	e6 95       	lsr	r30
     e06:	00 1c       	adc	r0, r0
     e08:	ca f7       	brpl	.-14     	; 0xdfc <__divsf3_pse+0x2c>
     e0a:	29 d0       	rcall	.+82     	; 0xe5e <__divsf3_pse+0x8e>
     e0c:	fe 2f       	mov	r31, r30
     e0e:	27 d0       	rcall	.+78     	; 0xe5e <__divsf3_pse+0x8e>
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	bb 1f       	adc	r27, r27
     e18:	26 17       	cp	r18, r22
     e1a:	37 07       	cpc	r19, r23
     e1c:	48 07       	cpc	r20, r24
     e1e:	ab 07       	cpc	r26, r27
     e20:	b0 e8       	ldi	r27, 0x80	; 128
     e22:	09 f0       	breq	.+2      	; 0xe26 <__divsf3_pse+0x56>
     e24:	bb 0b       	sbc	r27, r27
     e26:	80 2d       	mov	r24, r0
     e28:	bf 01       	movw	r22, r30
     e2a:	ff 27       	eor	r31, r31
     e2c:	93 58       	subi	r25, 0x83	; 131
     e2e:	5f 4f       	sbci	r21, 0xFF	; 255
     e30:	2a f0       	brmi	.+10     	; 0xe3c <__divsf3_pse+0x6c>
     e32:	9e 3f       	cpi	r25, 0xFE	; 254
     e34:	51 05       	cpc	r21, r1
     e36:	68 f0       	brcs	.+26     	; 0xe52 <__divsf3_pse+0x82>
     e38:	92 c0       	rjmp	.+292    	; 0xf5e <__fp_inf>
     e3a:	dc c0       	rjmp	.+440    	; 0xff4 <__fp_szero>
     e3c:	5f 3f       	cpi	r21, 0xFF	; 255
     e3e:	ec f3       	brlt	.-6      	; 0xe3a <__divsf3_pse+0x6a>
     e40:	98 3e       	cpi	r25, 0xE8	; 232
     e42:	dc f3       	brlt	.-10     	; 0xe3a <__divsf3_pse+0x6a>
     e44:	86 95       	lsr	r24
     e46:	77 95       	ror	r23
     e48:	67 95       	ror	r22
     e4a:	b7 95       	ror	r27
     e4c:	f7 95       	ror	r31
     e4e:	9f 5f       	subi	r25, 0xFF	; 255
     e50:	c9 f7       	brne	.-14     	; 0xe44 <__divsf3_pse+0x74>
     e52:	88 0f       	add	r24, r24
     e54:	91 1d       	adc	r25, r1
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	97 f9       	bld	r25, 7
     e5c:	08 95       	ret
     e5e:	e1 e0       	ldi	r30, 0x01	; 1
     e60:	66 0f       	add	r22, r22
     e62:	77 1f       	adc	r23, r23
     e64:	88 1f       	adc	r24, r24
     e66:	bb 1f       	adc	r27, r27
     e68:	62 17       	cp	r22, r18
     e6a:	73 07       	cpc	r23, r19
     e6c:	84 07       	cpc	r24, r20
     e6e:	ba 07       	cpc	r27, r26
     e70:	20 f0       	brcs	.+8      	; 0xe7a <__divsf3_pse+0xaa>
     e72:	62 1b       	sub	r22, r18
     e74:	73 0b       	sbc	r23, r19
     e76:	84 0b       	sbc	r24, r20
     e78:	ba 0b       	sbc	r27, r26
     e7a:	ee 1f       	adc	r30, r30
     e7c:	88 f7       	brcc	.-30     	; 0xe60 <__divsf3_pse+0x90>
     e7e:	e0 95       	com	r30
     e80:	08 95       	ret

00000e82 <__fixsfsi>:
     e82:	04 d0       	rcall	.+8      	; 0xe8c <__fixunssfsi>
     e84:	68 94       	set
     e86:	b1 11       	cpse	r27, r1
     e88:	b5 c0       	rjmp	.+362    	; 0xff4 <__fp_szero>
     e8a:	08 95       	ret

00000e8c <__fixunssfsi>:
     e8c:	98 d0       	rcall	.+304    	; 0xfbe <__fp_splitA>
     e8e:	88 f0       	brcs	.+34     	; 0xeb2 <__fixunssfsi+0x26>
     e90:	9f 57       	subi	r25, 0x7F	; 127
     e92:	90 f0       	brcs	.+36     	; 0xeb8 <__fixunssfsi+0x2c>
     e94:	b9 2f       	mov	r27, r25
     e96:	99 27       	eor	r25, r25
     e98:	b7 51       	subi	r27, 0x17	; 23
     e9a:	a0 f0       	brcs	.+40     	; 0xec4 <__fixunssfsi+0x38>
     e9c:	d1 f0       	breq	.+52     	; 0xed2 <__fixunssfsi+0x46>
     e9e:	66 0f       	add	r22, r22
     ea0:	77 1f       	adc	r23, r23
     ea2:	88 1f       	adc	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	1a f0       	brmi	.+6      	; 0xeae <__fixunssfsi+0x22>
     ea8:	ba 95       	dec	r27
     eaa:	c9 f7       	brne	.-14     	; 0xe9e <__fixunssfsi+0x12>
     eac:	12 c0       	rjmp	.+36     	; 0xed2 <__fixunssfsi+0x46>
     eae:	b1 30       	cpi	r27, 0x01	; 1
     eb0:	81 f0       	breq	.+32     	; 0xed2 <__fixunssfsi+0x46>
     eb2:	9f d0       	rcall	.+318    	; 0xff2 <__fp_zero>
     eb4:	b1 e0       	ldi	r27, 0x01	; 1
     eb6:	08 95       	ret
     eb8:	9c c0       	rjmp	.+312    	; 0xff2 <__fp_zero>
     eba:	67 2f       	mov	r22, r23
     ebc:	78 2f       	mov	r23, r24
     ebe:	88 27       	eor	r24, r24
     ec0:	b8 5f       	subi	r27, 0xF8	; 248
     ec2:	39 f0       	breq	.+14     	; 0xed2 <__fixunssfsi+0x46>
     ec4:	b9 3f       	cpi	r27, 0xF9	; 249
     ec6:	cc f3       	brlt	.-14     	; 0xeba <__fixunssfsi+0x2e>
     ec8:	86 95       	lsr	r24
     eca:	77 95       	ror	r23
     ecc:	67 95       	ror	r22
     ece:	b3 95       	inc	r27
     ed0:	d9 f7       	brne	.-10     	; 0xec8 <__fixunssfsi+0x3c>
     ed2:	3e f4       	brtc	.+14     	; 0xee2 <__fixunssfsi+0x56>
     ed4:	90 95       	com	r25
     ed6:	80 95       	com	r24
     ed8:	70 95       	com	r23
     eda:	61 95       	neg	r22
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	8f 4f       	sbci	r24, 0xFF	; 255
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	08 95       	ret

00000ee4 <__floatunsisf>:
     ee4:	e8 94       	clt
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <__floatsisf+0x12>

00000ee8 <__floatsisf>:
     ee8:	97 fb       	bst	r25, 7
     eea:	3e f4       	brtc	.+14     	; 0xefa <__floatsisf+0x12>
     eec:	90 95       	com	r25
     eee:	80 95       	com	r24
     ef0:	70 95       	com	r23
     ef2:	61 95       	neg	r22
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	8f 4f       	sbci	r24, 0xFF	; 255
     ef8:	9f 4f       	sbci	r25, 0xFF	; 255
     efa:	99 23       	and	r25, r25
     efc:	a9 f0       	breq	.+42     	; 0xf28 <__floatsisf+0x40>
     efe:	f9 2f       	mov	r31, r25
     f00:	96 e9       	ldi	r25, 0x96	; 150
     f02:	bb 27       	eor	r27, r27
     f04:	93 95       	inc	r25
     f06:	f6 95       	lsr	r31
     f08:	87 95       	ror	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b7 95       	ror	r27
     f10:	f1 11       	cpse	r31, r1
     f12:	f8 cf       	rjmp	.-16     	; 0xf04 <__floatsisf+0x1c>
     f14:	fa f4       	brpl	.+62     	; 0xf54 <__floatsisf+0x6c>
     f16:	bb 0f       	add	r27, r27
     f18:	11 f4       	brne	.+4      	; 0xf1e <__floatsisf+0x36>
     f1a:	60 ff       	sbrs	r22, 0
     f1c:	1b c0       	rjmp	.+54     	; 0xf54 <__floatsisf+0x6c>
     f1e:	6f 5f       	subi	r22, 0xFF	; 255
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	8f 4f       	sbci	r24, 0xFF	; 255
     f24:	9f 4f       	sbci	r25, 0xFF	; 255
     f26:	16 c0       	rjmp	.+44     	; 0xf54 <__floatsisf+0x6c>
     f28:	88 23       	and	r24, r24
     f2a:	11 f0       	breq	.+4      	; 0xf30 <__floatsisf+0x48>
     f2c:	96 e9       	ldi	r25, 0x96	; 150
     f2e:	11 c0       	rjmp	.+34     	; 0xf52 <__floatsisf+0x6a>
     f30:	77 23       	and	r23, r23
     f32:	21 f0       	breq	.+8      	; 0xf3c <__floatsisf+0x54>
     f34:	9e e8       	ldi	r25, 0x8E	; 142
     f36:	87 2f       	mov	r24, r23
     f38:	76 2f       	mov	r23, r22
     f3a:	05 c0       	rjmp	.+10     	; 0xf46 <__floatsisf+0x5e>
     f3c:	66 23       	and	r22, r22
     f3e:	71 f0       	breq	.+28     	; 0xf5c <__floatsisf+0x74>
     f40:	96 e8       	ldi	r25, 0x86	; 134
     f42:	86 2f       	mov	r24, r22
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	2a f0       	brmi	.+10     	; 0xf54 <__floatsisf+0x6c>
     f4a:	9a 95       	dec	r25
     f4c:	66 0f       	add	r22, r22
     f4e:	77 1f       	adc	r23, r23
     f50:	88 1f       	adc	r24, r24
     f52:	da f7       	brpl	.-10     	; 0xf4a <__floatsisf+0x62>
     f54:	88 0f       	add	r24, r24
     f56:	96 95       	lsr	r25
     f58:	87 95       	ror	r24
     f5a:	97 f9       	bld	r25, 7
     f5c:	08 95       	ret

00000f5e <__fp_inf>:
     f5e:	97 f9       	bld	r25, 7
     f60:	9f 67       	ori	r25, 0x7F	; 127
     f62:	80 e8       	ldi	r24, 0x80	; 128
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	08 95       	ret

00000f6a <__fp_nan>:
     f6a:	9f ef       	ldi	r25, 0xFF	; 255
     f6c:	80 ec       	ldi	r24, 0xC0	; 192
     f6e:	08 95       	ret

00000f70 <__fp_pscA>:
     f70:	00 24       	eor	r0, r0
     f72:	0a 94       	dec	r0
     f74:	16 16       	cp	r1, r22
     f76:	17 06       	cpc	r1, r23
     f78:	18 06       	cpc	r1, r24
     f7a:	09 06       	cpc	r0, r25
     f7c:	08 95       	ret

00000f7e <__fp_pscB>:
     f7e:	00 24       	eor	r0, r0
     f80:	0a 94       	dec	r0
     f82:	12 16       	cp	r1, r18
     f84:	13 06       	cpc	r1, r19
     f86:	14 06       	cpc	r1, r20
     f88:	05 06       	cpc	r0, r21
     f8a:	08 95       	ret

00000f8c <__fp_round>:
     f8c:	09 2e       	mov	r0, r25
     f8e:	03 94       	inc	r0
     f90:	00 0c       	add	r0, r0
     f92:	11 f4       	brne	.+4      	; 0xf98 <__fp_round+0xc>
     f94:	88 23       	and	r24, r24
     f96:	52 f0       	brmi	.+20     	; 0xfac <__fp_round+0x20>
     f98:	bb 0f       	add	r27, r27
     f9a:	40 f4       	brcc	.+16     	; 0xfac <__fp_round+0x20>
     f9c:	bf 2b       	or	r27, r31
     f9e:	11 f4       	brne	.+4      	; 0xfa4 <__fp_round+0x18>
     fa0:	60 ff       	sbrs	r22, 0
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <__fp_round+0x20>
     fa4:	6f 5f       	subi	r22, 0xFF	; 255
     fa6:	7f 4f       	sbci	r23, 0xFF	; 255
     fa8:	8f 4f       	sbci	r24, 0xFF	; 255
     faa:	9f 4f       	sbci	r25, 0xFF	; 255
     fac:	08 95       	ret

00000fae <__fp_split3>:
     fae:	57 fd       	sbrc	r21, 7
     fb0:	90 58       	subi	r25, 0x80	; 128
     fb2:	44 0f       	add	r20, r20
     fb4:	55 1f       	adc	r21, r21
     fb6:	59 f0       	breq	.+22     	; 0xfce <__fp_splitA+0x10>
     fb8:	5f 3f       	cpi	r21, 0xFF	; 255
     fba:	71 f0       	breq	.+28     	; 0xfd8 <__fp_splitA+0x1a>
     fbc:	47 95       	ror	r20

00000fbe <__fp_splitA>:
     fbe:	88 0f       	add	r24, r24
     fc0:	97 fb       	bst	r25, 7
     fc2:	99 1f       	adc	r25, r25
     fc4:	61 f0       	breq	.+24     	; 0xfde <__fp_splitA+0x20>
     fc6:	9f 3f       	cpi	r25, 0xFF	; 255
     fc8:	79 f0       	breq	.+30     	; 0xfe8 <__fp_splitA+0x2a>
     fca:	87 95       	ror	r24
     fcc:	08 95       	ret
     fce:	12 16       	cp	r1, r18
     fd0:	13 06       	cpc	r1, r19
     fd2:	14 06       	cpc	r1, r20
     fd4:	55 1f       	adc	r21, r21
     fd6:	f2 cf       	rjmp	.-28     	; 0xfbc <__fp_split3+0xe>
     fd8:	46 95       	lsr	r20
     fda:	f1 df       	rcall	.-30     	; 0xfbe <__fp_splitA>
     fdc:	08 c0       	rjmp	.+16     	; 0xfee <__fp_splitA+0x30>
     fde:	16 16       	cp	r1, r22
     fe0:	17 06       	cpc	r1, r23
     fe2:	18 06       	cpc	r1, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	f1 cf       	rjmp	.-30     	; 0xfca <__fp_splitA+0xc>
     fe8:	86 95       	lsr	r24
     fea:	71 05       	cpc	r23, r1
     fec:	61 05       	cpc	r22, r1
     fee:	08 94       	sec
     ff0:	08 95       	ret

00000ff2 <__fp_zero>:
     ff2:	e8 94       	clt

00000ff4 <__fp_szero>:
     ff4:	bb 27       	eor	r27, r27
     ff6:	66 27       	eor	r22, r22
     ff8:	77 27       	eor	r23, r23
     ffa:	cb 01       	movw	r24, r22
     ffc:	97 f9       	bld	r25, 7
     ffe:	08 95       	ret

00001000 <__mulsf3>:
    1000:	0b d0       	rcall	.+22     	; 0x1018 <__mulsf3x>
    1002:	c4 cf       	rjmp	.-120    	; 0xf8c <__fp_round>
    1004:	b5 df       	rcall	.-150    	; 0xf70 <__fp_pscA>
    1006:	28 f0       	brcs	.+10     	; 0x1012 <__mulsf3+0x12>
    1008:	ba df       	rcall	.-140    	; 0xf7e <__fp_pscB>
    100a:	18 f0       	brcs	.+6      	; 0x1012 <__mulsf3+0x12>
    100c:	95 23       	and	r25, r21
    100e:	09 f0       	breq	.+2      	; 0x1012 <__mulsf3+0x12>
    1010:	a6 cf       	rjmp	.-180    	; 0xf5e <__fp_inf>
    1012:	ab cf       	rjmp	.-170    	; 0xf6a <__fp_nan>
    1014:	11 24       	eor	r1, r1
    1016:	ee cf       	rjmp	.-36     	; 0xff4 <__fp_szero>

00001018 <__mulsf3x>:
    1018:	ca df       	rcall	.-108    	; 0xfae <__fp_split3>
    101a:	a0 f3       	brcs	.-24     	; 0x1004 <__mulsf3+0x4>

0000101c <__mulsf3_pse>:
    101c:	95 9f       	mul	r25, r21
    101e:	d1 f3       	breq	.-12     	; 0x1014 <__mulsf3+0x14>
    1020:	95 0f       	add	r25, r21
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	55 1f       	adc	r21, r21
    1026:	62 9f       	mul	r22, r18
    1028:	f0 01       	movw	r30, r0
    102a:	72 9f       	mul	r23, r18
    102c:	bb 27       	eor	r27, r27
    102e:	f0 0d       	add	r31, r0
    1030:	b1 1d       	adc	r27, r1
    1032:	63 9f       	mul	r22, r19
    1034:	aa 27       	eor	r26, r26
    1036:	f0 0d       	add	r31, r0
    1038:	b1 1d       	adc	r27, r1
    103a:	aa 1f       	adc	r26, r26
    103c:	64 9f       	mul	r22, r20
    103e:	66 27       	eor	r22, r22
    1040:	b0 0d       	add	r27, r0
    1042:	a1 1d       	adc	r26, r1
    1044:	66 1f       	adc	r22, r22
    1046:	82 9f       	mul	r24, r18
    1048:	22 27       	eor	r18, r18
    104a:	b0 0d       	add	r27, r0
    104c:	a1 1d       	adc	r26, r1
    104e:	62 1f       	adc	r22, r18
    1050:	73 9f       	mul	r23, r19
    1052:	b0 0d       	add	r27, r0
    1054:	a1 1d       	adc	r26, r1
    1056:	62 1f       	adc	r22, r18
    1058:	83 9f       	mul	r24, r19
    105a:	a0 0d       	add	r26, r0
    105c:	61 1d       	adc	r22, r1
    105e:	22 1f       	adc	r18, r18
    1060:	74 9f       	mul	r23, r20
    1062:	33 27       	eor	r19, r19
    1064:	a0 0d       	add	r26, r0
    1066:	61 1d       	adc	r22, r1
    1068:	23 1f       	adc	r18, r19
    106a:	84 9f       	mul	r24, r20
    106c:	60 0d       	add	r22, r0
    106e:	21 1d       	adc	r18, r1
    1070:	82 2f       	mov	r24, r18
    1072:	76 2f       	mov	r23, r22
    1074:	6a 2f       	mov	r22, r26
    1076:	11 24       	eor	r1, r1
    1078:	9f 57       	subi	r25, 0x7F	; 127
    107a:	50 40       	sbci	r21, 0x00	; 0
    107c:	8a f0       	brmi	.+34     	; 0x10a0 <__mulsf3_pse+0x84>
    107e:	e1 f0       	breq	.+56     	; 0x10b8 <__mulsf3_pse+0x9c>
    1080:	88 23       	and	r24, r24
    1082:	4a f0       	brmi	.+18     	; 0x1096 <__mulsf3_pse+0x7a>
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	bb 1f       	adc	r27, r27
    108a:	66 1f       	adc	r22, r22
    108c:	77 1f       	adc	r23, r23
    108e:	88 1f       	adc	r24, r24
    1090:	91 50       	subi	r25, 0x01	; 1
    1092:	50 40       	sbci	r21, 0x00	; 0
    1094:	a9 f7       	brne	.-22     	; 0x1080 <__mulsf3_pse+0x64>
    1096:	9e 3f       	cpi	r25, 0xFE	; 254
    1098:	51 05       	cpc	r21, r1
    109a:	70 f0       	brcs	.+28     	; 0x10b8 <__mulsf3_pse+0x9c>
    109c:	60 cf       	rjmp	.-320    	; 0xf5e <__fp_inf>
    109e:	aa cf       	rjmp	.-172    	; 0xff4 <__fp_szero>
    10a0:	5f 3f       	cpi	r21, 0xFF	; 255
    10a2:	ec f3       	brlt	.-6      	; 0x109e <__mulsf3_pse+0x82>
    10a4:	98 3e       	cpi	r25, 0xE8	; 232
    10a6:	dc f3       	brlt	.-10     	; 0x109e <__mulsf3_pse+0x82>
    10a8:	86 95       	lsr	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	b7 95       	ror	r27
    10b0:	f7 95       	ror	r31
    10b2:	e7 95       	ror	r30
    10b4:	9f 5f       	subi	r25, 0xFF	; 255
    10b6:	c1 f7       	brne	.-16     	; 0x10a8 <__mulsf3_pse+0x8c>
    10b8:	fe 2b       	or	r31, r30
    10ba:	88 0f       	add	r24, r24
    10bc:	91 1d       	adc	r25, r1
    10be:	96 95       	lsr	r25
    10c0:	87 95       	ror	r24
    10c2:	97 f9       	bld	r25, 7
    10c4:	08 95       	ret

000010c6 <__mulsi3>:
    10c6:	62 9f       	mul	r22, r18
    10c8:	d0 01       	movw	r26, r0
    10ca:	73 9f       	mul	r23, r19
    10cc:	f0 01       	movw	r30, r0
    10ce:	82 9f       	mul	r24, r18
    10d0:	e0 0d       	add	r30, r0
    10d2:	f1 1d       	adc	r31, r1
    10d4:	64 9f       	mul	r22, r20
    10d6:	e0 0d       	add	r30, r0
    10d8:	f1 1d       	adc	r31, r1
    10da:	92 9f       	mul	r25, r18
    10dc:	f0 0d       	add	r31, r0
    10de:	83 9f       	mul	r24, r19
    10e0:	f0 0d       	add	r31, r0
    10e2:	74 9f       	mul	r23, r20
    10e4:	f0 0d       	add	r31, r0
    10e6:	65 9f       	mul	r22, r21
    10e8:	f0 0d       	add	r31, r0
    10ea:	99 27       	eor	r25, r25
    10ec:	72 9f       	mul	r23, r18
    10ee:	b0 0d       	add	r27, r0
    10f0:	e1 1d       	adc	r30, r1
    10f2:	f9 1f       	adc	r31, r25
    10f4:	63 9f       	mul	r22, r19
    10f6:	b0 0d       	add	r27, r0
    10f8:	e1 1d       	adc	r30, r1
    10fa:	f9 1f       	adc	r31, r25
    10fc:	bd 01       	movw	r22, r26
    10fe:	cf 01       	movw	r24, r30
    1100:	11 24       	eor	r1, r1
    1102:	08 95       	ret

00001104 <__divmodhi4>:
    1104:	97 fb       	bst	r25, 7
    1106:	09 2e       	mov	r0, r25
    1108:	07 26       	eor	r0, r23
    110a:	0a d0       	rcall	.+20     	; 0x1120 <__divmodhi4_neg1>
    110c:	77 fd       	sbrc	r23, 7
    110e:	04 d0       	rcall	.+8      	; 0x1118 <__divmodhi4_neg2>
    1110:	0c d0       	rcall	.+24     	; 0x112a <__udivmodhi4>
    1112:	06 d0       	rcall	.+12     	; 0x1120 <__divmodhi4_neg1>
    1114:	00 20       	and	r0, r0
    1116:	1a f4       	brpl	.+6      	; 0x111e <__divmodhi4_exit>

00001118 <__divmodhi4_neg2>:
    1118:	70 95       	com	r23
    111a:	61 95       	neg	r22
    111c:	7f 4f       	sbci	r23, 0xFF	; 255

0000111e <__divmodhi4_exit>:
    111e:	08 95       	ret

00001120 <__divmodhi4_neg1>:
    1120:	f6 f7       	brtc	.-4      	; 0x111e <__divmodhi4_exit>
    1122:	90 95       	com	r25
    1124:	81 95       	neg	r24
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	08 95       	ret

0000112a <__udivmodhi4>:
    112a:	aa 1b       	sub	r26, r26
    112c:	bb 1b       	sub	r27, r27
    112e:	51 e1       	ldi	r21, 0x11	; 17
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <__udivmodhi4_ep>

00001132 <__udivmodhi4_loop>:
    1132:	aa 1f       	adc	r26, r26
    1134:	bb 1f       	adc	r27, r27
    1136:	a6 17       	cp	r26, r22
    1138:	b7 07       	cpc	r27, r23
    113a:	10 f0       	brcs	.+4      	; 0x1140 <__udivmodhi4_ep>
    113c:	a6 1b       	sub	r26, r22
    113e:	b7 0b       	sbc	r27, r23

00001140 <__udivmodhi4_ep>:
    1140:	88 1f       	adc	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	5a 95       	dec	r21
    1146:	a9 f7       	brne	.-22     	; 0x1132 <__udivmodhi4_loop>
    1148:	80 95       	com	r24
    114a:	90 95       	com	r25
    114c:	bc 01       	movw	r22, r24
    114e:	cd 01       	movw	r24, r26
    1150:	08 95       	ret

00001152 <atoi>:
    1152:	fc 01       	movw	r30, r24
    1154:	88 27       	eor	r24, r24
    1156:	99 27       	eor	r25, r25
    1158:	e8 94       	clt
    115a:	21 91       	ld	r18, Z+
    115c:	20 32       	cpi	r18, 0x20	; 32
    115e:	e9 f3       	breq	.-6      	; 0x115a <atoi+0x8>
    1160:	29 30       	cpi	r18, 0x09	; 9
    1162:	10 f0       	brcs	.+4      	; 0x1168 <atoi+0x16>
    1164:	2e 30       	cpi	r18, 0x0E	; 14
    1166:	c8 f3       	brcs	.-14     	; 0x115a <atoi+0x8>
    1168:	2b 32       	cpi	r18, 0x2B	; 43
    116a:	41 f0       	breq	.+16     	; 0x117c <atoi+0x2a>
    116c:	2d 32       	cpi	r18, 0x2D	; 45
    116e:	39 f4       	brne	.+14     	; 0x117e <atoi+0x2c>
    1170:	68 94       	set
    1172:	04 c0       	rjmp	.+8      	; 0x117c <atoi+0x2a>
    1174:	0e 94 1c 09 	call	0x1238	; 0x1238 <__mulhi_const_10>
    1178:	82 0f       	add	r24, r18
    117a:	91 1d       	adc	r25, r1
    117c:	21 91       	ld	r18, Z+
    117e:	20 53       	subi	r18, 0x30	; 48
    1180:	2a 30       	cpi	r18, 0x0A	; 10
    1182:	c0 f3       	brcs	.-16     	; 0x1174 <atoi+0x22>
    1184:	1e f4       	brtc	.+6      	; 0x118c <atoi+0x3a>
    1186:	90 95       	com	r25
    1188:	81 95       	neg	r24
    118a:	9f 4f       	sbci	r25, 0xFF	; 255
    118c:	08 95       	ret

0000118e <itoa>:
    118e:	fb 01       	movw	r30, r22
    1190:	9f 01       	movw	r18, r30
    1192:	e8 94       	clt
    1194:	42 30       	cpi	r20, 0x02	; 2
    1196:	c4 f0       	brlt	.+48     	; 0x11c8 <itoa+0x3a>
    1198:	45 32       	cpi	r20, 0x25	; 37
    119a:	b4 f4       	brge	.+44     	; 0x11c8 <itoa+0x3a>
    119c:	4a 30       	cpi	r20, 0x0A	; 10
    119e:	29 f4       	brne	.+10     	; 0x11aa <itoa+0x1c>
    11a0:	97 fb       	bst	r25, 7
    11a2:	1e f4       	brtc	.+6      	; 0x11aa <itoa+0x1c>
    11a4:	90 95       	com	r25
    11a6:	81 95       	neg	r24
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	64 2f       	mov	r22, r20
    11ac:	77 27       	eor	r23, r23
    11ae:	0e 94 95 08 	call	0x112a	; 0x112a <__udivmodhi4>
    11b2:	80 5d       	subi	r24, 0xD0	; 208
    11b4:	8a 33       	cpi	r24, 0x3A	; 58
    11b6:	0c f0       	brlt	.+2      	; 0x11ba <itoa+0x2c>
    11b8:	89 5d       	subi	r24, 0xD9	; 217
    11ba:	81 93       	st	Z+, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	a1 f7       	brne	.-24     	; 0x11aa <itoa+0x1c>
    11c2:	16 f4       	brtc	.+4      	; 0x11c8 <itoa+0x3a>
    11c4:	5d e2       	ldi	r21, 0x2D	; 45
    11c6:	51 93       	st	Z+, r21
    11c8:	10 82       	st	Z, r1
    11ca:	c9 01       	movw	r24, r18
    11cc:	0c 94 24 09 	jmp	0x1248	; 0x1248 <strrev>

000011d0 <ltoa>:
    11d0:	fa 01       	movw	r30, r20
    11d2:	cf 93       	push	r28
    11d4:	ff 93       	push	r31
    11d6:	ef 93       	push	r30
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	44 f1       	brlt	.+80     	; 0x122c <ltoa+0x5c>
    11dc:	25 32       	cpi	r18, 0x25	; 37
    11de:	34 f5       	brge	.+76     	; 0x122c <ltoa+0x5c>
    11e0:	c2 2f       	mov	r28, r18
    11e2:	e8 94       	clt
    11e4:	ca 30       	cpi	r28, 0x0A	; 10
    11e6:	49 f4       	brne	.+18     	; 0x11fa <ltoa+0x2a>
    11e8:	97 fb       	bst	r25, 7
    11ea:	3e f4       	brtc	.+14     	; 0x11fa <ltoa+0x2a>
    11ec:	90 95       	com	r25
    11ee:	80 95       	com	r24
    11f0:	70 95       	com	r23
    11f2:	61 95       	neg	r22
    11f4:	7f 4f       	sbci	r23, 0xFF	; 255
    11f6:	8f 4f       	sbci	r24, 0xFF	; 255
    11f8:	9f 4f       	sbci	r25, 0xFF	; 255
    11fa:	2c 2f       	mov	r18, r28
    11fc:	33 27       	eor	r19, r19
    11fe:	44 27       	eor	r20, r20
    1200:	55 27       	eor	r21, r21
    1202:	ff 93       	push	r31
    1204:	ef 93       	push	r30
    1206:	0e 94 34 09 	call	0x1268	; 0x1268 <__udivmodsi4>
    120a:	ef 91       	pop	r30
    120c:	ff 91       	pop	r31
    120e:	60 5d       	subi	r22, 0xD0	; 208
    1210:	6a 33       	cpi	r22, 0x3A	; 58
    1212:	0c f0       	brlt	.+2      	; 0x1216 <ltoa+0x46>
    1214:	69 5d       	subi	r22, 0xD9	; 217
    1216:	61 93       	st	Z+, r22
    1218:	b9 01       	movw	r22, r18
    121a:	ca 01       	movw	r24, r20
    121c:	60 50       	subi	r22, 0x00	; 0
    121e:	70 40       	sbci	r23, 0x00	; 0
    1220:	80 40       	sbci	r24, 0x00	; 0
    1222:	90 40       	sbci	r25, 0x00	; 0
    1224:	51 f7       	brne	.-44     	; 0x11fa <ltoa+0x2a>
    1226:	16 f4       	brtc	.+4      	; 0x122c <ltoa+0x5c>
    1228:	cd e2       	ldi	r28, 0x2D	; 45
    122a:	c1 93       	st	Z+, r28
    122c:	10 82       	st	Z, r1
    122e:	8f 91       	pop	r24
    1230:	9f 91       	pop	r25
    1232:	cf 91       	pop	r28
    1234:	0c 94 24 09 	jmp	0x1248	; 0x1248 <strrev>

00001238 <__mulhi_const_10>:
    1238:	7a e0       	ldi	r23, 0x0A	; 10
    123a:	97 9f       	mul	r25, r23
    123c:	90 2d       	mov	r25, r0
    123e:	87 9f       	mul	r24, r23
    1240:	80 2d       	mov	r24, r0
    1242:	91 0d       	add	r25, r1
    1244:	11 24       	eor	r1, r1
    1246:	08 95       	ret

00001248 <strrev>:
    1248:	dc 01       	movw	r26, r24
    124a:	fc 01       	movw	r30, r24
    124c:	67 2f       	mov	r22, r23
    124e:	71 91       	ld	r23, Z+
    1250:	77 23       	and	r23, r23
    1252:	e1 f7       	brne	.-8      	; 0x124c <strrev+0x4>
    1254:	32 97       	sbiw	r30, 0x02	; 2
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <strrev+0x18>
    1258:	7c 91       	ld	r23, X
    125a:	6d 93       	st	X+, r22
    125c:	70 83       	st	Z, r23
    125e:	62 91       	ld	r22, -Z
    1260:	ae 17       	cp	r26, r30
    1262:	bf 07       	cpc	r27, r31
    1264:	c8 f3       	brcs	.-14     	; 0x1258 <strrev+0x10>
    1266:	08 95       	ret

00001268 <__udivmodsi4>:
    1268:	a1 e2       	ldi	r26, 0x21	; 33
    126a:	1a 2e       	mov	r1, r26
    126c:	aa 1b       	sub	r26, r26
    126e:	bb 1b       	sub	r27, r27
    1270:	fd 01       	movw	r30, r26
    1272:	0d c0       	rjmp	.+26     	; 0x128e <__udivmodsi4_ep>

00001274 <__udivmodsi4_loop>:
    1274:	aa 1f       	adc	r26, r26
    1276:	bb 1f       	adc	r27, r27
    1278:	ee 1f       	adc	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	a2 17       	cp	r26, r18
    127e:	b3 07       	cpc	r27, r19
    1280:	e4 07       	cpc	r30, r20
    1282:	f5 07       	cpc	r31, r21
    1284:	20 f0       	brcs	.+8      	; 0x128e <__udivmodsi4_ep>
    1286:	a2 1b       	sub	r26, r18
    1288:	b3 0b       	sbc	r27, r19
    128a:	e4 0b       	sbc	r30, r20
    128c:	f5 0b       	sbc	r31, r21

0000128e <__udivmodsi4_ep>:
    128e:	66 1f       	adc	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	1a 94       	dec	r1
    1298:	69 f7       	brne	.-38     	; 0x1274 <__udivmodsi4_loop>
    129a:	60 95       	com	r22
    129c:	70 95       	com	r23
    129e:	80 95       	com	r24
    12a0:	90 95       	com	r25
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	bd 01       	movw	r22, r26
    12a8:	cf 01       	movw	r24, r30
    12aa:	08 95       	ret

000012ac <_exit>:
    12ac:	f8 94       	cli

000012ae <__stop_program>:
    12ae:	ff cf       	rjmp	.-2      	; 0x12ae <__stop_program>
