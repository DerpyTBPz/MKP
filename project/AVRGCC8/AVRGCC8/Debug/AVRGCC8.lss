
AVRGCC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  000011da  0000126e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012b  008000d2  008000d2  000012e0  2**0
                  ALLOC
  3 .stab         00002874  00000000  00000000  000012e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000987  00000000  00000000  00003b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000044db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000024f  00000000  00000000  0000453b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b71  00000000  00000000  0000478a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000446  00000000  00000000  000052fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e4d  00000000  00000000  00005741  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f0  00000000  00000000  00006590  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000039c  00000000  00000000  00006780  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005a9  00000000  00000000  00006b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000080  00000000  00000000  000070c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  00007145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_1>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_2>
       c:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3f       	cpi	r26, 0xFD	; 253
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5d 02 	call	0x4ba	; 0x4ba <main>
      8a:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SendTemperature>:
 	UARTSend('\r');
 	UARTSend('\n');
}

void SendTemperature()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
	itoa(tempArr[3], string, 10);
      96:	c9 ee       	ldi	r28, 0xE9	; 233
      98:	d0 e0       	ldi	r29, 0x00	; 0
      9a:	80 91 f7 01 	lds	r24, 0x01F7
      9e:	90 91 f8 01 	lds	r25, 0x01F8
      a2:	be 01       	movw	r22, r28
      a4:	4a e0       	ldi	r20, 0x0A	; 10
      a6:	50 e0       	ldi	r21, 0x00	; 0
      a8:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <itoa>
	SendString(string);
      ac:	ce 01       	movw	r24, r28
      ae:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
	itoa(tempArr[2], string, 10);
      b2:	80 91 f5 01 	lds	r24, 0x01F5
      b6:	90 91 f6 01 	lds	r25, 0x01F6
      ba:	be 01       	movw	r22, r28
      bc:	4a e0       	ldi	r20, 0x0A	; 10
      be:	50 e0       	ldi	r21, 0x00	; 0
      c0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <itoa>
	SendString(string);
      c4:	ce 01       	movw	r24, r28
      c6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
	SendString(".");
      ca:	80 e6       	ldi	r24, 0x60	; 96
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
	itoa(tempArr[1], string, 10);
      d2:	80 91 f3 01 	lds	r24, 0x01F3
      d6:	90 91 f4 01 	lds	r25, 0x01F4
      da:	be 01       	movw	r22, r28
      dc:	4a e0       	ldi	r20, 0x0A	; 10
      de:	50 e0       	ldi	r21, 0x00	; 0
      e0:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <itoa>
	SendString(string);
      e4:	ce 01       	movw	r24, r28
      e6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
	SendString(" C");
      ea:	82 e6       	ldi	r24, 0x62	; 98
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
	
	UARTSend('\r');
      f2:	8d e0       	ldi	r24, 0x0D	; 13
      f4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
 	UARTSend('\n');
      f8:	8a e0       	ldi	r24, 0x0A	; 10
      fa:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
}
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	08 95       	ret

00000104 <SendTime>:
	
	TIMSK ^= (1 << OCIE2);
}

void SendTime()
{
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
	itoa(HH, string, 10);
     108:	c9 ee       	ldi	r28, 0xE9	; 233
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	80 91 c6 00 	lds	r24, 0x00C6
     110:	90 91 c7 00 	lds	r25, 0x00C7
     114:	be 01       	movw	r22, r28
     116:	4a e0       	ldi	r20, 0x0A	; 10
     118:	50 e0       	ldi	r21, 0x00	; 0
     11a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <itoa>
	SendString(string);
     11e:	ce 01       	movw	r24, r28
     120:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
	UARTSend(':');
     124:	8a e3       	ldi	r24, 0x3A	; 58
     126:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
	itoa(MM, string, 10);
     12a:	80 91 c8 00 	lds	r24, 0x00C8
     12e:	90 91 c9 00 	lds	r25, 0x00C9
     132:	be 01       	movw	r22, r28
     134:	4a e0       	ldi	r20, 0x0A	; 10
     136:	50 e0       	ldi	r21, 0x00	; 0
     138:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <itoa>
	SendString(string);
     13c:	ce 01       	movw	r24, r28
     13e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
	UARTSend(':');
     142:	8a e3       	ldi	r24, 0x3A	; 58
     144:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
	itoa(SS, string, 10);
     148:	80 91 ca 00 	lds	r24, 0x00CA
     14c:	90 91 cb 00 	lds	r25, 0x00CB
     150:	be 01       	movw	r22, r28
     152:	4a e0       	ldi	r20, 0x0A	; 10
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <itoa>
	SendString(string);	
     15a:	ce 01       	movw	r24, r28
     15c:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
	
 	UARTSend('\r');
     160:	8d e0       	ldi	r24, 0x0D	; 13
     162:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
 	UARTSend('\n');
     166:	8a e0       	ldi	r24, 0x0A	; 10
     168:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
}
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <TimerInit>:
// 	TCCR0 |= (1 << WGM00) | (1 << CS02) | (1 << CS00);
// 	OCR0 = 5;
// 	TIMSK |= (1 << OCIE0);

 	//TIMER1	
	TCNT1 |= 0;
     172:	8c b5       	in	r24, 0x2c	; 44
     174:	9d b5       	in	r25, 0x2d	; 45
     176:	9d bd       	out	0x2d, r25	; 45
     178:	8c bd       	out	0x2c, r24	; 44
	OCR1A |= 15625;
     17a:	8a b5       	in	r24, 0x2a	; 42
     17c:	9b b5       	in	r25, 0x2b	; 43
     17e:	89 60       	ori	r24, 0x09	; 9
     180:	9d 63       	ori	r25, 0x3D	; 61
     182:	9b bd       	out	0x2b, r25	; 43
     184:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (1 << FOC1A);
     186:	8f b5       	in	r24, 0x2f	; 47
     188:	88 60       	ori	r24, 0x08	; 8
     18a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
     18c:	8e b5       	in	r24, 0x2e	; 46
     18e:	8b 60       	ori	r24, 0x0B	; 11
     190:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
     192:	89 b7       	in	r24, 0x39	; 57
     194:	80 61       	ori	r24, 0x10	; 16
     196:	89 bf       	out	0x39, r24	; 57
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
     198:	85 b5       	in	r24, 0x25	; 37
     19a:	8e 60       	ori	r24, 0x0E	; 14
     19c:	85 bd       	out	0x25, r24	; 37
	OCR2 = 2;
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
     1a2:	89 b7       	in	r24, 0x39	; 57
     1a4:	80 68       	ori	r24, 0x80	; 128
     1a6:	89 bf       	out	0x39, r24	; 57
}
     1a8:	08 95       	ret

000001aa <__vector_19>:

ISR(TIMER0_COMP_vect)
{
     1aa:	1f 92       	push	r1
     1ac:	0f 92       	push	r0
     1ae:	0f b6       	in	r0, 0x3f	; 63
     1b0:	0f 92       	push	r0
     1b2:	11 24       	eor	r1, r1
	
}
     1b4:	0f 90       	pop	r0
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	0f 90       	pop	r0
     1ba:	1f 90       	pop	r1
     1bc:	18 95       	reti

000001be <__vector_1>:
		j %= 4;
	}		
}

ISR(INT0_vect)
{
     1be:	1f 92       	push	r1
     1c0:	0f 92       	push	r0
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	0f 92       	push	r0
     1c6:	11 24       	eor	r1, r1
     1c8:	8f 93       	push	r24
     1ca:	9f 93       	push	r25
	timeMode++;
     1cc:	80 91 de 00 	lds	r24, 0x00DE
     1d0:	90 91 df 00 	lds	r25, 0x00DF
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	90 93 df 00 	sts	0x00DF, r25
     1da:	80 93 de 00 	sts	0x00DE, r24
	
	if (timeMode == 1)
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	91 05       	cpc	r25, r1
     1e2:	21 f0       	breq	.+8      	; 0x1ec <__vector_1+0x2e>
	{
		
	}
	else
	{		
		timeMode = 0;
     1e4:	10 92 df 00 	sts	0x00DF, r1
     1e8:	10 92 de 00 	sts	0x00DE, r1
	}
}
     1ec:	9f 91       	pop	r25
     1ee:	8f 91       	pop	r24
     1f0:	0f 90       	pop	r0
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	0f 90       	pop	r0
     1f6:	1f 90       	pop	r1
     1f8:	18 95       	reti

000001fa <__vector_2>:

ISR(INT1_vect)
{
     1fa:	1f 92       	push	r1
     1fc:	0f 92       	push	r0
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	0f 92       	push	r0
     202:	11 24       	eor	r1, r1
     204:	8f 93       	push	r24
     206:	9f 93       	push	r25
	segMode++;
     208:	80 91 e4 00 	lds	r24, 0x00E4
     20c:	90 91 e5 00 	lds	r25, 0x00E5
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	90 93 e5 00 	sts	0x00E5, r25
     216:	80 93 e4 00 	sts	0x00E4, r24
	
	if (segMode == 1)
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	91 05       	cpc	r25, r1
     21e:	21 f0       	breq	.+8      	; 0x228 <__vector_2+0x2e>
		//TIMSK ^= (1 << OCIE2);		
	}
	else
	{
		//TIMSK ^= (1 << OCIE2);
 		segMode = 0;
     220:	10 92 e5 00 	sts	0x00E5, r1
     224:	10 92 e4 00 	sts	0x00E4, r1
	}
}
     228:	9f 91       	pop	r25
     22a:	8f 91       	pop	r24
     22c:	0f 90       	pop	r0
     22e:	0f be       	out	0x3f, r0	; 63
     230:	0f 90       	pop	r0
     232:	1f 90       	pop	r1
     234:	18 95       	reti

00000236 <CalculateTemp>:

void CalculateTemp()
{	
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
	TIMSK ^= (1 << OCIE2);
     23a:	89 b7       	in	r24, 0x39	; 57
     23c:	80 58       	subi	r24, 0x80	; 128
     23e:	89 bf       	out	0x39, r24	; 57
	
	TWBR = (mode == standard) ? 32 : 2;
     240:	80 91 c4 00 	lds	r24, 0x00C4
     244:	90 91 c5 00 	lds	r25, 0x00C5
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	11 f4       	brne	.+4      	; 0x250 <CalculateTemp+0x1a>
     24c:	80 e2       	ldi	r24, 0x20	; 32
     24e:	01 c0       	rjmp	.+2      	; 0x252 <CalculateTemp+0x1c>
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~(0b11 << TWPS0); // Clearing TWSP to 0
     254:	81 b1       	in	r24, 0x01	; 1
     256:	8c 7f       	andi	r24, 0xFC	; 252
     258:	81 b9       	out	0x01, r24	; 1
	TWCR |= (1 << TWEN); // Enable TWI, generating the SCLK
     25a:	86 b7       	in	r24, 0x36	; 54
     25c:	84 60       	ori	r24, 0x04	; 4
     25e:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     260:	89 ef       	ldi	r24, 0xF9	; 249
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <CalculateTemp+0x2e>
     268:	00 c0       	rjmp	.+0      	; 0x26a <CalculateTemp+0x34>
     26a:	00 00       	nop
	_delay_ms(1);
	
	twi_master_tx_rx(0x44, sendData, 2, data, 6);
     26c:	84 e4       	ldi	r24, 0x44	; 68
     26e:	60 ed       	ldi	r22, 0xD0	; 208
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	42 e0       	ldi	r20, 0x02	; 2
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	28 ed       	ldi	r18, 0xD8	; 216
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	06 e0       	ldi	r16, 0x06	; 6
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <twi_master_tx_rx>
	
	temp = (data[0] * 256 + data[1]);
     282:	70 91 d8 00 	lds	r23, 0x00D8
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	80 91 d9 00 	lds	r24, 0x00D9
     28c:	68 0f       	add	r22, r24
     28e:	71 1d       	adc	r23, r1
     290:	88 27       	eor	r24, r24
     292:	77 fd       	sbrc	r23, 7
     294:	80 95       	com	r24
     296:	98 2f       	mov	r25, r24
     298:	60 93 cc 00 	sts	0x00CC, r22
     29c:	70 93 cd 00 	sts	0x00CD, r23
     2a0:	80 93 ce 00 	sts	0x00CE, r24
     2a4:	90 93 cf 00 	sts	0x00CF, r25
	cTemp = ((double)(175 * temp / 65535.0) - 45) * 10;	
     2a8:	2f ea       	ldi	r18, 0xAF	; 175
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	0e 94 f8 07 	call	0xff0	; 0xff0 <__mulsi3>
     2b4:	0e 94 09 07 	call	0xe12	; 0xe12 <__floatsisf>
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	3f ef       	ldi	r19, 0xFF	; 255
     2bc:	4f e7       	ldi	r20, 0x7F	; 127
     2be:	57 e4       	ldi	r21, 0x47	; 71
     2c0:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__divsf3>
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	44 e3       	ldi	r20, 0x34	; 52
     2ca:	52 e4       	ldi	r21, 0x42	; 66
     2cc:	0e 94 09 06 	call	0xc12	; 0xc12 <__subsf3>
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e2       	ldi	r20, 0x20	; 32
     2d6:	51 e4       	ldi	r21, 0x41	; 65
     2d8:	0e 94 95 07 	call	0xf2a	; 0xf2a <__mulsf3>
     2dc:	60 93 f9 01 	sts	0x01F9, r22
     2e0:	70 93 fa 01 	sts	0x01FA, r23
     2e4:	80 93 fb 01 	sts	0x01FB, r24
     2e8:	90 93 fc 01 	sts	0x01FC, r25
	
	TWBR = 0;
     2ec:	10 b8       	out	0x00, r1	; 0
	TWSR = 0;
     2ee:	11 b8       	out	0x01, r1	; 1
	TWCR = 0;
     2f0:	16 be       	out	0x36, r1	; 54
	
	TIMSK ^= (1 << OCIE2);
     2f2:	89 b7       	in	r24, 0x39	; 57
     2f4:	80 58       	subi	r24, 0x80	; 128
     2f6:	89 bf       	out	0x39, r24	; 57
}
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	08 95       	ret

000002fe <NumToArr>:
	PORTC = DecToDigit(tempArr[3]);
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
{	
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	e9 e6       	ldi	r30, 0x69	; 105
     304:	f1 e0       	ldi	r31, 0x01	; 1
	
	PORTC = DecToDigit(tempArr[3]);
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
     306:	ef 01       	movw	r28, r30
     308:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		timeArr[k] = numbr % 10;
     30a:	2a e0       	ldi	r18, 0x0A	; 10
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	b9 01       	movw	r22, r18
     310:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
     314:	81 93       	st	Z+, r24
     316:	91 93       	st	Z+, r25
		numbr /= 10;
     318:	86 2f       	mov	r24, r22
     31a:	97 2f       	mov	r25, r23
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
     31c:	ec 17       	cp	r30, r28
     31e:	fd 07       	cpc	r31, r29
     320:	b1 f7       	brne	.-20     	; 0x30e <NumToArr+0x10>
	{		
		timeArr[k] = numbr % 10;
		numbr /= 10;
	}
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <__vector_6>:
{
	
}

ISR(TIMER1_COMPA_vect)
{
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	2f 93       	push	r18
     334:	3f 93       	push	r19
     336:	4f 93       	push	r20
     338:	5f 93       	push	r21
     33a:	6f 93       	push	r22
     33c:	7f 93       	push	r23
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	af 93       	push	r26
     344:	bf 93       	push	r27
     346:	ef 93       	push	r30
     348:	ff 93       	push	r31
	if (timeMode == 0)
     34a:	80 91 de 00 	lds	r24, 0x00DE
     34e:	90 91 df 00 	lds	r25, 0x00DF
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	09 f0       	breq	.+2      	; 0x358 <__vector_6+0x30>
     356:	6d c0       	rjmp	.+218    	; 0x432 <__vector_6+0x10a>
	{
		SS++;
     358:	80 91 ca 00 	lds	r24, 0x00CA
     35c:	90 91 cb 00 	lds	r25, 0x00CB
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	90 93 cb 00 	sts	0x00CB, r25
     366:	80 93 ca 00 	sts	0x00CA, r24
		if (SS == 60)
     36a:	8c 33       	cpi	r24, 0x3C	; 60
     36c:	91 05       	cpc	r25, r1
     36e:	09 f0       	breq	.+2      	; 0x372 <__vector_6+0x4a>
     370:	43 c0       	rjmp	.+134    	; 0x3f8 <__vector_6+0xd0>
		{
			MM++;
     372:	80 91 c8 00 	lds	r24, 0x00C8
     376:	90 91 c9 00 	lds	r25, 0x00C9
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	90 93 c9 00 	sts	0x00C9, r25
     380:	80 93 c8 00 	sts	0x00C8, r24
			SS = 0;
     384:	10 92 cb 00 	sts	0x00CB, r1
     388:	10 92 ca 00 	sts	0x00CA, r1
			if (MM == 60)
     38c:	8c 33       	cpi	r24, 0x3C	; 60
     38e:	91 05       	cpc	r25, r1
     390:	99 f5       	brne	.+102    	; 0x3f8 <__vector_6+0xd0>
			{
				HH++;
     392:	80 91 c6 00 	lds	r24, 0x00C6
     396:	90 91 c7 00 	lds	r25, 0x00C7
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	90 93 c7 00 	sts	0x00C7, r25
     3a0:	80 93 c6 00 	sts	0x00C6, r24
				MM = 0;
     3a4:	10 92 c9 00 	sts	0x00C9, r1
     3a8:	10 92 c8 00 	sts	0x00C8, r1
				if (HH == 24)
     3ac:	88 31       	cpi	r24, 0x18	; 24
     3ae:	91 05       	cpc	r25, r1
     3b0:	29 f4       	brne	.+10     	; 0x3bc <__vector_6+0x94>
				{
					HH = 0;
     3b2:	10 92 c7 00 	sts	0x00C7, r1
     3b6:	10 92 c6 00 	sts	0x00C6, r1
     3ba:	11 c0       	rjmp	.+34     	; 0x3de <__vector_6+0xb6>
				}
				if (HH > 12)
     3bc:	80 91 c6 00 	lds	r24, 0x00C6
     3c0:	90 91 c7 00 	lds	r25, 0x00C7
     3c4:	8d 30       	cpi	r24, 0x0D	; 13
     3c6:	91 05       	cpc	r25, r1
     3c8:	44 f0       	brlt	.+16     	; 0x3da <__vector_6+0xb2>
				{
					blink = (HH - 12) * 2;
     3ca:	0c 97       	sbiw	r24, 0x0c	; 12
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	90 93 e3 00 	sts	0x00E3, r25
     3d4:	80 93 e2 00 	sts	0x00E2, r24
     3d8:	0f c0       	rjmp	.+30     	; 0x3f8 <__vector_6+0xd0>
				}
				else if (HH == 0)
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	39 f4       	brne	.+14     	; 0x3ec <__vector_6+0xc4>
				{
					blink = 24;					
     3de:	88 e1       	ldi	r24, 0x18	; 24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	90 93 e3 00 	sts	0x00E3, r25
     3e6:	80 93 e2 00 	sts	0x00E2, r24
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <__vector_6+0xd0>
				}
				else
				{
					blink = HH * 2;
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	90 93 e3 00 	sts	0x00E3, r25
     3f4:	80 93 e2 00 	sts	0x00E2, r24
				}	
			}
		}		
		time = (HH * 100) + MM;			
     3f8:	40 91 c6 00 	lds	r20, 0x00C6
     3fc:	50 91 c7 00 	lds	r21, 0x00C7
     400:	84 e6       	ldi	r24, 0x64	; 100
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	48 9f       	mul	r20, r24
     406:	90 01       	movw	r18, r0
     408:	49 9f       	mul	r20, r25
     40a:	30 0d       	add	r19, r0
     40c:	58 9f       	mul	r21, r24
     40e:	30 0d       	add	r19, r0
     410:	11 24       	eor	r1, r1
     412:	80 91 c8 00 	lds	r24, 0x00C8
     416:	90 91 c9 00 	lds	r25, 0x00C9
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	90 93 d7 00 	sts	0x00D7, r25
     422:	80 93 d6 00 	sts	0x00D6, r24
		NumToArr(time);
     426:	0e 94 7f 01 	call	0x2fe	; 0x2fe <NumToArr>
		
		PORTC = 0x00;
     42a:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     42c:	1b ba       	out	0x1b, r1	; 27
		CalculateTemp();
     42e:	0e 94 1b 01 	call	0x236	; 0x236 <CalculateTemp>
		{			
			
		}
	}
	
	if (blink != 0)	
     432:	80 91 e2 00 	lds	r24, 0x00E2
     436:	90 91 e3 00 	lds	r25, 0x00E3
     43a:	00 97       	sbiw	r24, 0x00	; 0
     43c:	69 f0       	breq	.+26     	; 0x458 <__vector_6+0x130>
	{
		PORTD ^= RED | GREEN | BLUE;
     43e:	92 b3       	in	r25, 0x12	; 18
     440:	80 eb       	ldi	r24, 0xB0	; 176
     442:	89 27       	eor	r24, r25
     444:	82 bb       	out	0x12, r24	; 18
		blink--;
     446:	80 91 e2 00 	lds	r24, 0x00E2
     44a:	90 91 e3 00 	lds	r25, 0x00E3
     44e:	01 97       	sbiw	r24, 0x01	; 1
     450:	90 93 e3 00 	sts	0x00E3, r25
     454:	80 93 e2 00 	sts	0x00E2, r24
	}
}
     458:	ff 91       	pop	r31
     45a:	ef 91       	pop	r30
     45c:	bf 91       	pop	r27
     45e:	af 91       	pop	r26
     460:	9f 91       	pop	r25
     462:	8f 91       	pop	r24
     464:	7f 91       	pop	r23
     466:	6f 91       	pop	r22
     468:	5f 91       	pop	r21
     46a:	4f 91       	pop	r20
     46c:	3f 91       	pop	r19
     46e:	2f 91       	pop	r18
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <TempToArr>:
	}
}

void TempToArr(int tempr)
{	
	tempArr[0] = 12;
     47a:	2c e0       	ldi	r18, 0x0C	; 12
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	30 93 f2 01 	sts	0x01F2, r19
     482:	20 93 f1 01 	sts	0x01F1, r18
	for (int k = 1; k < DIGITS; k++)
	{		
		tempArr[k] = tempr % 10;
     486:	2a e0       	ldi	r18, 0x0A	; 10
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	b9 01       	movw	r22, r18
     48c:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
     490:	90 93 f4 01 	sts	0x01F4, r25
     494:	80 93 f3 01 	sts	0x01F3, r24
     498:	cb 01       	movw	r24, r22
     49a:	b9 01       	movw	r22, r18
     49c:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
     4a0:	90 93 f6 01 	sts	0x01F6, r25
     4a4:	80 93 f5 01 	sts	0x01F5, r24
     4a8:	cb 01       	movw	r24, r22
     4aa:	b9 01       	movw	r22, r18
     4ac:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
     4b0:	90 93 f8 01 	sts	0x01F8, r25
     4b4:	80 93 f7 01 	sts	0x01F7, r24
		tempr /= 10;
	}
}
     4b8:	08 95       	ret

000004ba <main>:
char tmp[3];
int blink = 0;
int segMode = 0;

int main(void)
{	
     4ba:	2f 92       	push	r2
     4bc:	3f 92       	push	r3
     4be:	4f 92       	push	r4
     4c0:	5f 92       	push	r5
     4c2:	6f 92       	push	r6
     4c4:	7f 92       	push	r7
     4c6:	8f 92       	push	r8
     4c8:	9f 92       	push	r9
     4ca:	af 92       	push	r10
     4cc:	bf 92       	push	r11
     4ce:	cf 92       	push	r12
     4d0:	df 92       	push	r13
     4d2:	ef 92       	push	r14
     4d4:	ff 92       	push	r15
     4d6:	0f 93       	push	r16
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
	DDRA = 0xF0;
     4de:	80 ef       	ldi	r24, 0xF0	; 240
     4e0:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
     4e2:	8f ef       	ldi	r24, 0xFF	; 255
     4e4:	84 bb       	out	0x14, r24	; 20
	DDRD |= RED | GREEN | BLUE | BTN1 | BTN2;
     4e6:	81 b3       	in	r24, 0x11	; 17
     4e8:	8c 6b       	ori	r24, 0xBC	; 188
     4ea:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
     4ec:	8f e0       	ldi	r24, 0x0F	; 15
     4ee:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
     4f0:	80 ec       	ldi	r24, 0xC0	; 192
     4f2:	8b bf       	out	0x3b, r24	; 59
     4f4:	89 ef       	ldi	r24, 0xF9	; 249
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <main+0x3e>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <main+0x44>
     4fe:	00 00       	nop
	
	_delay_ms(1);
	TimerInit();
     500:	0e 94 b9 00 	call	0x172	; 0x172 <TimerInit>
	UARTInit();
     504:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <UARTInit>
	
	sei();
     508:	78 94       	sei
			SendTime();
		}
		else
		{	
			//TempToArr(temp);
			ltoa((long int)(cTemp), tmpStr, 10);
     50a:	01 e7       	ldi	r16, 0x71	; 113
     50c:	11 e0       	ldi	r17, 0x01	; 1
		
		if (timeMode == 1)
		{
			while(1)
			{			
				SendString("Enter hours (HH)");
     50e:	0f 2e       	mov	r0, r31
     510:	f5 e6       	ldi	r31, 0x65	; 101
     512:	cf 2e       	mov	r12, r31
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	df 2e       	mov	r13, r31
     518:	f0 2d       	mov	r31, r0
				UARTSend('\r');
 				UARTSend('\n');
				tmp[0] = UARTReceive();
     51a:	c6 ee       	ldi	r28, 0xE6	; 230
     51c:	d0 e0       	ldi	r29, 0x00	; 0
				tmp[1] = UARTReceive();				
     51e:	7e 01       	movw	r14, r28
     520:	08 94       	sec
     522:	e1 1c       	adc	r14, r1
     524:	f1 1c       	adc	r15, r1
 					UARTSend('\n');
					break;
				}
				_delay_ms(100);
				
				SendString("Enter minutes (MM)");
     526:	0f 2e       	mov	r0, r31
     528:	f2 e8       	ldi	r31, 0x82	; 130
     52a:	af 2e       	mov	r10, r31
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	bf 2e       	mov	r11, r31
     530:	f0 2d       	mov	r31, r0
 					UARTSend('\n');
					break;
				}
				_delay_ms(100);
				
				SendString("Enter seconds (SS)");
     532:	0f 2e       	mov	r0, r31
     534:	f3 ea       	ldi	r31, 0xA3	; 163
     536:	8f 2e       	mov	r8, r31
     538:	f0 e0       	ldi	r31, 0x00	; 0
     53a:	9f 2e       	mov	r9, r31
     53c:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				SS = atoi(tmp);	
				if (SS > 59)
				{
					SendString("Wrong seconds");
     53e:	0f 2e       	mov	r0, r31
     540:	f6 eb       	ldi	r31, 0xB6	; 182
     542:	2f 2e       	mov	r2, r31
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	3f 2e       	mov	r3, r31
     548:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				MM = atoi(tmp);				
				if (MM > 59)
				{
					SendString("Wrong minutes");
     54a:	0f 2e       	mov	r0, r31
     54c:	f5 e9       	ldi	r31, 0x95	; 149
     54e:	4f 2e       	mov	r4, r31
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	5f 2e       	mov	r5, r31
     554:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				HH = atoi(tmp);				
				if (HH > 23)
				{
					SendString("Wrong hours");
     556:	0f 2e       	mov	r0, r31
     558:	f6 e7       	ldi	r31, 0x76	; 118
     55a:	6f 2e       	mov	r6, r31
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	7f 2e       	mov	r7, r31
     560:	f0 2d       	mov	r31, r0
	
	sei();
	
	while(1)
	{
		if (segMode == 0)
     562:	80 91 e4 00 	lds	r24, 0x00E4
     566:	90 91 e5 00 	lds	r25, 0x00E5
     56a:	00 97       	sbiw	r24, 0x00	; 0
     56c:	19 f4       	brne	.+6      	; 0x574 <main+0xba>
		{
			SendTime();
     56e:	0e 94 82 00 	call	0x104	; 0x104 <SendTime>
     572:	1f c0       	rjmp	.+62     	; 0x5b2 <main+0xf8>
		}
		else
		{	
			//TempToArr(temp);
			ltoa((long int)(cTemp), tmpStr, 10);
     574:	60 91 f9 01 	lds	r22, 0x01F9
     578:	70 91 fa 01 	lds	r23, 0x01FA
     57c:	80 91 fb 01 	lds	r24, 0x01FB
     580:	90 91 fc 01 	lds	r25, 0x01FC
     584:	0e 94 d6 06 	call	0xdac	; 0xdac <__fixsfsi>
     588:	a8 01       	movw	r20, r16
     58a:	2a e0       	ldi	r18, 0x0A	; 10
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	0e 94 7d 08 	call	0x10fa	; 0x10fa <ltoa>
			TempToArr((long int)(cTemp));
     592:	60 91 f9 01 	lds	r22, 0x01F9
     596:	70 91 fa 01 	lds	r23, 0x01FA
     59a:	80 91 fb 01 	lds	r24, 0x01FB
     59e:	90 91 fc 01 	lds	r25, 0x01FC
     5a2:	0e 94 d6 06 	call	0xdac	; 0xdac <__fixsfsi>
     5a6:	dc 01       	movw	r26, r24
     5a8:	cb 01       	movw	r24, r22
     5aa:	0e 94 3d 02 	call	0x47a	; 0x47a <TempToArr>
			SendTemperature();
     5ae:	0e 94 49 00 	call	0x92	; 0x92 <SendTemperature>
			//TempTo7Seg();					
		}
		
		if (timeMode == 1)
     5b2:	80 91 de 00 	lds	r24, 0x00DE
     5b6:	90 91 df 00 	lds	r25, 0x00DF
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	91 05       	cpc	r25, r1
     5be:	89 f6       	brne	.-94     	; 0x562 <main+0xa8>
		{
			while(1)
			{			
				SendString("Enter hours (HH)");
     5c0:	c6 01       	movw	r24, r12
     5c2:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
				UARTSend('\r');
     5c6:	8d e0       	ldi	r24, 0x0D	; 13
     5c8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
 				UARTSend('\n');
     5cc:	8a e0       	ldi	r24, 0x0A	; 10
     5ce:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
				tmp[0] = UARTReceive();
     5d2:	0e 94 f6 05 	call	0xbec	; 0xbec <UARTReceive>
     5d6:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     5d8:	0e 94 f6 05 	call	0xbec	; 0xbec <UARTReceive>
     5dc:	f7 01       	movw	r30, r14
     5de:	80 83       	st	Z, r24
				HH = atoi(tmp);				
     5e0:	ce 01       	movw	r24, r28
     5e2:	0e 94 3e 08 	call	0x107c	; 0x107c <atoi>
     5e6:	90 93 c7 00 	sts	0x00C7, r25
     5ea:	80 93 c6 00 	sts	0x00C6, r24
				if (HH > 23)
     5ee:	88 31       	cpi	r24, 0x18	; 24
     5f0:	91 05       	cpc	r25, r1
     5f2:	54 f0       	brlt	.+20     	; 0x608 <main+0x14e>
				{
					SendString("Wrong hours");
     5f4:	c3 01       	movw	r24, r6
     5f6:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
					UARTSend('\r');
     5fa:	8d e0       	ldi	r24, 0x0D	; 13
     5fc:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
 					UARTSend('\n');
     600:	8a e0       	ldi	r24, 0x0A	; 10
     602:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
					break;
     606:	ad cf       	rjmp	.-166    	; 0x562 <main+0xa8>
     608:	87 ea       	ldi	r24, 0xA7	; 167
     60a:	91 e6       	ldi	r25, 0x61	; 97
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <main+0x152>
     610:	00 c0       	rjmp	.+0      	; 0x612 <main+0x158>
     612:	00 00       	nop
				}
				_delay_ms(100);
				
				SendString("Enter minutes (MM)");
     614:	c5 01       	movw	r24, r10
     616:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
				UARTSend('\r');
     61a:	8d e0       	ldi	r24, 0x0D	; 13
     61c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
 				UARTSend('\n');				
     620:	8a e0       	ldi	r24, 0x0A	; 10
     622:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
				tmp[0] = UARTReceive();
     626:	0e 94 f6 05 	call	0xbec	; 0xbec <UARTReceive>
     62a:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     62c:	0e 94 f6 05 	call	0xbec	; 0xbec <UARTReceive>
     630:	f7 01       	movw	r30, r14
     632:	80 83       	st	Z, r24
				MM = atoi(tmp);				
     634:	ce 01       	movw	r24, r28
     636:	0e 94 3e 08 	call	0x107c	; 0x107c <atoi>
     63a:	90 93 c9 00 	sts	0x00C9, r25
     63e:	80 93 c8 00 	sts	0x00C8, r24
				if (MM > 59)
     642:	8c 33       	cpi	r24, 0x3C	; 60
     644:	91 05       	cpc	r25, r1
     646:	54 f0       	brlt	.+20     	; 0x65c <main+0x1a2>
				{
					SendString("Wrong minutes");
     648:	c2 01       	movw	r24, r4
     64a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
					UARTSend('\r');
     64e:	8d e0       	ldi	r24, 0x0D	; 13
     650:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
 					UARTSend('\n');
     654:	8a e0       	ldi	r24, 0x0A	; 10
     656:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
					break;
     65a:	83 cf       	rjmp	.-250    	; 0x562 <main+0xa8>
     65c:	87 ea       	ldi	r24, 0xA7	; 167
     65e:	91 e6       	ldi	r25, 0x61	; 97
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <main+0x1a6>
     664:	00 c0       	rjmp	.+0      	; 0x666 <main+0x1ac>
     666:	00 00       	nop
				}
				_delay_ms(100);
				
				SendString("Enter seconds (SS)");
     668:	c4 01       	movw	r24, r8
     66a:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
				UARTSend('\r');
     66e:	8d e0       	ldi	r24, 0x0D	; 13
     670:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
 				UARTSend('\n');				
     674:	8a e0       	ldi	r24, 0x0A	; 10
     676:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
				tmp[0] = UARTReceive();
     67a:	0e 94 f6 05 	call	0xbec	; 0xbec <UARTReceive>
     67e:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     680:	0e 94 f6 05 	call	0xbec	; 0xbec <UARTReceive>
     684:	f7 01       	movw	r30, r14
     686:	80 83       	st	Z, r24
				SS = atoi(tmp);	
     688:	ce 01       	movw	r24, r28
     68a:	0e 94 3e 08 	call	0x107c	; 0x107c <atoi>
     68e:	90 93 cb 00 	sts	0x00CB, r25
     692:	80 93 ca 00 	sts	0x00CA, r24
				if (SS > 59)
     696:	8c 33       	cpi	r24, 0x3C	; 60
     698:	91 05       	cpc	r25, r1
     69a:	54 f0       	brlt	.+20     	; 0x6b0 <main+0x1f6>
				{
					SendString("Wrong seconds");
     69c:	c1 01       	movw	r24, r2
     69e:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <SendString>
					UARTSend('\r');
     6a2:	8d e0       	ldi	r24, 0x0D	; 13
     6a4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
 					UARTSend('\n');
     6a8:	8a e0       	ldi	r24, 0x0A	; 10
     6aa:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
					break;
     6ae:	59 cf       	rjmp	.-334    	; 0x562 <main+0xa8>
     6b0:	87 ea       	ldi	r24, 0xA7	; 167
     6b2:	91 e6       	ldi	r25, 0x61	; 97
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <main+0x1fa>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <main+0x200>
     6ba:	00 00       	nop
				}	
				_delay_ms(100);
				timeMode = 0;	
     6bc:	10 92 df 00 	sts	0x00DF, r1
     6c0:	10 92 de 00 	sts	0x00DE, r1
     6c4:	4e cf       	rjmp	.-356    	; 0x562 <main+0xa8>

000006c6 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
     6c6:	87 30       	cpi	r24, 0x07	; 7
     6c8:	71 f1       	breq	.+92     	; 0x726 <DecToDigit+0x60>
     6ca:	88 30       	cpi	r24, 0x08	; 8
     6cc:	70 f4       	brcc	.+28     	; 0x6ea <DecToDigit+0x24>
     6ce:	83 30       	cpi	r24, 0x03	; 3
     6d0:	11 f1       	breq	.+68     	; 0x716 <DecToDigit+0x50>
     6d2:	84 30       	cpi	r24, 0x04	; 4
     6d4:	28 f4       	brcc	.+10     	; 0x6e0 <DecToDigit+0x1a>
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	d1 f1       	breq	.+116    	; 0x74e <DecToDigit+0x88>
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	d0 f4       	brcc	.+52     	; 0x712 <DecToDigit+0x4c>
     6de:	17 c0       	rjmp	.+46     	; 0x70e <DecToDigit+0x48>
     6e0:	85 30       	cpi	r24, 0x05	; 5
     6e2:	e9 f0       	breq	.+58     	; 0x71e <DecToDigit+0x58>
     6e4:	86 30       	cpi	r24, 0x06	; 6
     6e6:	e8 f4       	brcc	.+58     	; 0x722 <DecToDigit+0x5c>
     6e8:	18 c0       	rjmp	.+48     	; 0x71a <DecToDigit+0x54>
     6ea:	8b 30       	cpi	r24, 0x0B	; 11
     6ec:	21 f1       	breq	.+72     	; 0x736 <DecToDigit+0x70>
     6ee:	8c 30       	cpi	r24, 0x0C	; 12
     6f0:	28 f4       	brcc	.+10     	; 0x6fc <DecToDigit+0x36>
     6f2:	89 30       	cpi	r24, 0x09	; 9
     6f4:	e1 f0       	breq	.+56     	; 0x72e <DecToDigit+0x68>
     6f6:	8a 30       	cpi	r24, 0x0A	; 10
     6f8:	e0 f4       	brcc	.+56     	; 0x732 <DecToDigit+0x6c>
     6fa:	17 c0       	rjmp	.+46     	; 0x72a <DecToDigit+0x64>
     6fc:	8d 30       	cpi	r24, 0x0D	; 13
     6fe:	f9 f0       	breq	.+62     	; 0x73e <DecToDigit+0x78>
     700:	8d 30       	cpi	r24, 0x0D	; 13
     702:	d8 f0       	brcs	.+54     	; 0x73a <DecToDigit+0x74>
     704:	8e 30       	cpi	r24, 0x0E	; 14
     706:	e9 f0       	breq	.+58     	; 0x742 <DecToDigit+0x7c>
     708:	8f 30       	cpi	r24, 0x0F	; 15
     70a:	f9 f4       	brne	.+62     	; 0x74a <DecToDigit+0x84>
     70c:	1c c0       	rjmp	.+56     	; 0x746 <DecToDigit+0x80>
	{
		case 0:
			Digit = 0b01011111;				
     70e:	8f e5       	ldi	r24, 0x5F	; 95
     710:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
     712:	8b e3       	ldi	r24, 0x3B	; 59
			break;
     714:	08 95       	ret
		case 3:
			Digit = 0b00101111;
     716:	8f e2       	ldi	r24, 0x2F	; 47
			break;
     718:	08 95       	ret
		case 4:
			Digit = 0b01100110;
     71a:	86 e6       	ldi	r24, 0x66	; 102
			break;
     71c:	08 95       	ret
		case 5:
			Digit = 0b01101101;
     71e:	8d e6       	ldi	r24, 0x6D	; 109
			break;
     720:	08 95       	ret
		case 6:
			Digit = 0b01111101;
     722:	8d e7       	ldi	r24, 0x7D	; 125
			break;
     724:	08 95       	ret
		case 7:
			Digit = 0b00000111;
     726:	87 e0       	ldi	r24, 0x07	; 7
			break;
     728:	08 95       	ret
		case 8:
			Digit = 0b01111111;
     72a:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
     72c:	08 95       	ret
		case 9:
			Digit = 0b01101111;
     72e:	8f e6       	ldi	r24, 0x6F	; 111
			break;
     730:	08 95       	ret
		case 10:
			Digit = 0b01110111;
     732:	87 e7       	ldi	r24, 0x77	; 119
			break;
     734:	08 95       	ret
		case 11:
			Digit = 0b01111100;
     736:	8c e7       	ldi	r24, 0x7C	; 124
			break;
     738:	08 95       	ret
		case 12:
			Digit = 0b01011001;
     73a:	89 e5       	ldi	r24, 0x59	; 89
			break;
     73c:	08 95       	ret
		case 13:
			Digit = 0b00111110;
     73e:	8e e3       	ldi	r24, 0x3E	; 62
			break;
     740:	08 95       	ret
		case 14:
			Digit = 0b01111001;
     742:	89 e7       	ldi	r24, 0x79	; 121
			break;
     744:	08 95       	ret
		case 15:
			Digit = 0b01110001;
     746:	81 e7       	ldi	r24, 0x71	; 113
			break;
     748:	08 95       	ret
		default:
			Digit = 0b00000000;
     74a:	80 e0       	ldi	r24, 0x00	; 0
			break;			
     74c:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
     74e:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
     750:	08 95       	ret

00000752 <TempTo7Seg>:
 	UARTSend('\n');
}

void TempTo7Seg()
{	
	PORTC = DecToDigit(tempArr[0]);
     752:	80 91 f1 01 	lds	r24, 0x01F1
     756:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DecToDigit>
     75a:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 7);
     75c:	80 e8       	ldi	r24, 0x80	; 128
     75e:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[1]);
     760:	80 91 f3 01 	lds	r24, 0x01F3
     764:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DecToDigit>
     768:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 6);
     76a:	80 e4       	ldi	r24, 0x40	; 64
     76c:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[2]);
     76e:	80 91 f5 01 	lds	r24, 0x01F5
     772:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DecToDigit>
     776:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 5);
     778:	80 e2       	ldi	r24, 0x20	; 32
     77a:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[3]);
     77c:	80 91 f7 01 	lds	r24, 0x01F7
     780:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DecToDigit>
     784:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 4);
     786:	80 e1       	ldi	r24, 0x10	; 16
     788:	8b bb       	out	0x1b, r24	; 27
}
     78a:	08 95       	ret

0000078c <__vector_3>:
		blink--;
	}
}

ISR(TIMER2_COMP_vect)
{
     78c:	1f 92       	push	r1
     78e:	0f 92       	push	r0
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	0f 92       	push	r0
     794:	11 24       	eor	r1, r1
     796:	2f 93       	push	r18
     798:	3f 93       	push	r19
     79a:	4f 93       	push	r20
     79c:	5f 93       	push	r21
     79e:	6f 93       	push	r22
     7a0:	7f 93       	push	r23
     7a2:	8f 93       	push	r24
     7a4:	9f 93       	push	r25
     7a6:	af 93       	push	r26
     7a8:	bf 93       	push	r27
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	ef 93       	push	r30
     7b0:	ff 93       	push	r31
	if (segMode == 0)
     7b2:	80 91 e4 00 	lds	r24, 0x00E4
     7b6:	90 91 e5 00 	lds	r25, 0x00E5
     7ba:	00 97       	sbiw	r24, 0x00	; 0
     7bc:	d1 f5       	brne	.+116    	; 0x832 <__vector_3+0xa6>
	{
		PORTC = 0x00;
     7be:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     7c0:	1b ba       	out	0x1b, r1	; 27
		PORTC = DecToDigit(timeArr[j]);
     7c2:	c0 91 d2 00 	lds	r28, 0x00D2
     7c6:	d0 91 d3 00 	lds	r29, 0x00D3
     7ca:	fe 01       	movw	r30, r28
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	e7 59       	subi	r30, 0x97	; 151
     7d2:	fe 4f       	sbci	r31, 0xFE	; 254
     7d4:	80 81       	ld	r24, Z
     7d6:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DecToDigit>
     7da:	85 bb       	out	0x15, r24	; 21
		
		if ((j == 2) && ((SS % 2) == 0) && (segMode == 0))
     7dc:	c2 30       	cpi	r28, 0x02	; 2
     7de:	d1 05       	cpc	r29, r1
     7e0:	69 f4       	brne	.+26     	; 0x7fc <__vector_3+0x70>
     7e2:	80 91 ca 00 	lds	r24, 0x00CA
     7e6:	80 fd       	sbrc	r24, 0
     7e8:	09 c0       	rjmp	.+18     	; 0x7fc <__vector_3+0x70>
     7ea:	80 91 e4 00 	lds	r24, 0x00E4
     7ee:	90 91 e5 00 	lds	r25, 0x00E5
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	19 f4       	brne	.+6      	; 0x7fc <__vector_3+0x70>
		{			
			PORTC ^= 0b10000000;	
     7f6:	85 b3       	in	r24, 0x15	; 21
     7f8:	80 58       	subi	r24, 0x80	; 128
     7fa:	85 bb       	out	0x15, r24	; 21
		}	
			
		PORTA = (1 << (7 - j));			
     7fc:	80 91 d2 00 	lds	r24, 0x00D2
     800:	90 91 d3 00 	lds	r25, 0x00D3
     804:	27 e0       	ldi	r18, 0x07	; 7
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	28 1b       	sub	r18, r24
     80a:	39 0b       	sbc	r19, r25
     80c:	41 e0       	ldi	r20, 0x01	; 1
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	ba 01       	movw	r22, r20
     812:	02 c0       	rjmp	.+4      	; 0x818 <__vector_3+0x8c>
     814:	66 0f       	add	r22, r22
     816:	77 1f       	adc	r23, r23
     818:	2a 95       	dec	r18
     81a:	e2 f7       	brpl	.-8      	; 0x814 <__vector_3+0x88>
     81c:	6b bb       	out	0x1b, r22	; 27
		j++;
     81e:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
     820:	64 e0       	ldi	r22, 0x04	; 4
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
     828:	90 93 d3 00 	sts	0x00D3, r25
     82c:	80 93 d2 00 	sts	0x00D2, r24
     830:	2d c0       	rjmp	.+90     	; 0x88c <__vector_3+0x100>
	}	
	else
	{
		PORTC = 0x00;
     832:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     834:	1b ba       	out	0x1b, r1	; 27
		PORTC = DecToDigit(tempArr[j]);
     836:	c0 91 d2 00 	lds	r28, 0x00D2
     83a:	d0 91 d3 00 	lds	r29, 0x00D3
     83e:	fe 01       	movw	r30, r28
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ef 50       	subi	r30, 0x0F	; 15
     846:	fe 4f       	sbci	r31, 0xFE	; 254
     848:	80 81       	ld	r24, Z
     84a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <DecToDigit>
     84e:	85 bb       	out	0x15, r24	; 21
		
		if (j == 3)
     850:	c3 30       	cpi	r28, 0x03	; 3
     852:	d1 05       	cpc	r29, r1
     854:	09 f4       	brne	.+2      	; 0x858 <__vector_3+0xcc>
		{			
			PORTC |= 0b10000000;	
     856:	af 9a       	sbi	0x15, 7	; 21
		}
		
		PORTA = (1 << (7 - j));			
     858:	80 91 d2 00 	lds	r24, 0x00D2
     85c:	90 91 d3 00 	lds	r25, 0x00D3
     860:	27 e0       	ldi	r18, 0x07	; 7
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	28 1b       	sub	r18, r24
     866:	39 0b       	sbc	r19, r25
     868:	41 e0       	ldi	r20, 0x01	; 1
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	ba 01       	movw	r22, r20
     86e:	02 c0       	rjmp	.+4      	; 0x874 <__vector_3+0xe8>
     870:	66 0f       	add	r22, r22
     872:	77 1f       	adc	r23, r23
     874:	2a 95       	dec	r18
     876:	e2 f7       	brpl	.-8      	; 0x870 <__vector_3+0xe4>
     878:	6b bb       	out	0x1b, r22	; 27
		j++;		
     87a:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
     87c:	64 e0       	ldi	r22, 0x04	; 4
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	0e 94 17 08 	call	0x102e	; 0x102e <__divmodhi4>
     884:	90 93 d3 00 	sts	0x00D3, r25
     888:	80 93 d2 00 	sts	0x00D2, r24
	}		
}
     88c:	ff 91       	pop	r31
     88e:	ef 91       	pop	r30
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	bf 91       	pop	r27
     896:	af 91       	pop	r26
     898:	9f 91       	pop	r25
     89a:	8f 91       	pop	r24
     89c:	7f 91       	pop	r23
     89e:	6f 91       	pop	r22
     8a0:	5f 91       	pop	r21
     8a2:	4f 91       	pop	r20
     8a4:	3f 91       	pop	r19
     8a6:	2f 91       	pop	r18
     8a8:	0f 90       	pop	r0
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	0f 90       	pop	r0
     8ae:	1f 90       	pop	r1
     8b0:	18 95       	reti

000008b2 <get_status>:
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
	PORTC &= ~0b00000011; // Clear pull-up on both lines
}

static uint8_t get_status(uint8_t status)
{
     8b2:	98 2f       	mov	r25, r24
	uint8_t st;

	while (!(TWCR & (1 << TWINT)))
     8b4:	06 b6       	in	r0, 0x36	; 54
     8b6:	07 fe       	sbrs	r0, 7
     8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <get_status+0x2>
		;
	if ((st = (TWSR & 0xF8)) == status)
     8ba:	81 b1       	in	r24, 0x01	; 1
     8bc:	88 7f       	andi	r24, 0xF8	; 248
     8be:	89 17       	cp	r24, r25
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <get_status+0x12>
		return 0;
     8c2:	80 e0       	ldi	r24, 0x00	; 0
	else
		return st;
}
     8c4:	08 95       	ret

000008c6 <send_start>:

static int send_start(uint8_t status)
{
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     8c6:	94 ea       	ldi	r25, 0xA4	; 164
     8c8:	96 bf       	out	0x36, r25	; 54
	return get_status(status);
     8ca:	0e 94 59 04 	call	0x8b2	; 0x8b2 <get_status>
}
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	08 95       	ret

000008d2 <send_stop>:

static void send_stop(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     8d2:	84 e9       	ldi	r24, 0x94	; 148
     8d4:	86 bf       	out	0x36, r24	; 54
}
     8d6:	08 95       	ret

000008d8 <send_data>:

static int send_data(uint8_t data, uint8_t status)
{
	TWDR = data;
     8d8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);
     8da:	84 e8       	ldi	r24, 0x84	; 132
     8dc:	86 bf       	out	0x36, r24	; 54
	return get_status(status);
     8de:	86 2f       	mov	r24, r22
     8e0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <get_status>
}
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	08 95       	ret

000008e8 <recv_data>:

static int recv_data(uint8_t *data, uint8_t status, uint8_t ack)
{
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	ec 01       	movw	r28, r24
     8ee:	86 2f       	mov	r24, r22
	TWCR = (1 << TWINT) | (ack << TWEA) | (1 << TWEN);
     8f0:	42 95       	swap	r20
     8f2:	44 0f       	add	r20, r20
     8f4:	44 0f       	add	r20, r20
     8f6:	40 7c       	andi	r20, 0xC0	; 192
     8f8:	44 68       	ori	r20, 0x84	; 132
     8fa:	46 bf       	out	0x36, r20	; 54
	if (get_status(status) == 0)
     8fc:	0e 94 59 04 	call	0x8b2	; 0x8b2 <get_status>
     900:	88 23       	and	r24, r24
     902:	29 f4       	brne	.+10     	; 0x90e <recv_data+0x26>
	{
		*data = TWDR;
     904:	83 b1       	in	r24, 0x03	; 3
     906:	88 83       	st	Y, r24
		return 0;
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	02 c0       	rjmp	.+4      	; 0x912 <recv_data+0x2a>
	}
	else
	{
		return -1;
     90e:	2f ef       	ldi	r18, 0xFF	; 255
     910:	3f ef       	ldi	r19, 0xFF	; 255
	}
}
     912:	82 2f       	mov	r24, r18
     914:	93 2f       	mov	r25, r19
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	08 95       	ret

0000091c <twi_init>:
} TwiOperation;

void twi_init(TwiMode mode)
{
	// 1 = output, 0 = input
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
     91c:	94 b3       	in	r25, 0x14	; 20
     91e:	9c 7f       	andi	r25, 0xFC	; 252
     920:	94 bb       	out	0x14, r25	; 20
	PORTC |= 0b00000011; // Internal pull-up on both lines
     922:	95 b3       	in	r25, 0x15	; 21
     924:	93 60       	ori	r25, 0x03	; 3
     926:	95 bb       	out	0x15, r25	; 21

	TWBR = (mode == standard) ? 32 : 2;
     928:	88 23       	and	r24, r24
     92a:	11 f4       	brne	.+4      	; 0x930 <twi_init+0x14>
     92c:	80 e2       	ldi	r24, 0x20	; 32
     92e:	01 c0       	rjmp	.+2      	; 0x932 <twi_init+0x16>
     930:	82 e0       	ldi	r24, 0x02	; 2
     932:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~(0b11 << TWPS0); // Clearing TWSP to 0
     934:	81 b1       	in	r24, 0x01	; 1
     936:	8c 7f       	andi	r24, 0xFC	; 252
     938:	81 b9       	out	0x01, r24	; 1

	TWCR |= (1 << TWEN); // Enable TWI, generating the SCLK
     93a:	86 b7       	in	r24, 0x36	; 54
     93c:	84 60       	ori	r24, 0x04	; 4
     93e:	86 bf       	out	0x36, r24	; 54
}
     940:	08 95       	ret

00000942 <twi_shut>:

void twi_shut(void)
{
	TWCR &= ~(1 << TWEN); // Disable TWI
     942:	86 b7       	in	r24, 0x36	; 54
     944:	8b 7f       	andi	r24, 0xFB	; 251
     946:	86 bf       	out	0x36, r24	; 54

	TWBR = 0;
     948:	10 b8       	out	0x00, r1	; 0
	TWSR &= ~(0b11 << TWPS0);
     94a:	81 b1       	in	r24, 0x01	; 1
     94c:	8c 7f       	andi	r24, 0xFC	; 252
     94e:	81 b9       	out	0x01, r24	; 1

	// 1 = output, 0 = input
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
     950:	84 b3       	in	r24, 0x14	; 20
     952:	8c 7f       	andi	r24, 0xFC	; 252
     954:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~0b00000011; // Clear pull-up on both lines
     956:	85 b3       	in	r24, 0x15	; 21
     958:	8c 7f       	andi	r24, 0xFC	; 252
     95a:	85 bb       	out	0x15, r24	; 21
}
     95c:	08 95       	ret

0000095e <twi_master_tx>:
		return -1;
	}
}

int twi_master_tx(uint8_t addr, uint8_t *data, int len)
{
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	08 2f       	mov	r16, r24
     96e:	16 2f       	mov	r17, r22
     970:	d7 2e       	mov	r13, r23
     972:	7a 01       	movw	r14, r20
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     974:	88 e0       	ldi	r24, 0x08	; 8
     976:	0e 94 63 04 	call	0x8c6	; 0x8c6 <send_start>
     97a:	00 97       	sbiw	r24, 0x00	; 0
     97c:	29 f0       	breq	.+10     	; 0x988 <twi_master_tx+0x2a>
     97e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     982:	2f ef       	ldi	r18, 0xFF	; 255
     984:	3f ef       	ldi	r19, 0xFF	; 255
     986:	29 c0       	rjmp	.+82     	; 0x9da <twi_master_tx+0x7c>
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     988:	80 2f       	mov	r24, r16
     98a:	88 0f       	add	r24, r24
     98c:	68 e1       	ldi	r22, 0x18	; 24
     98e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <send_data>
     992:	00 97       	sbiw	r24, 0x00	; 0
     994:	21 f4       	brne	.+8      	; 0x99e <twi_master_tx+0x40>
	for (i = 0; i < len; i++)
     996:	1e 14       	cp	r1, r14
     998:	1f 04       	cpc	r1, r15
     99a:	34 f0       	brlt	.+12     	; 0x9a8 <twi_master_tx+0x4a>
     99c:	1a c0       	rjmp	.+52     	; 0x9d2 <twi_master_tx+0x74>
int twi_master_tx(uint8_t addr, uint8_t *data, int len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     99e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     9a2:	2f ef       	ldi	r18, 0xFF	; 255
     9a4:	3f ef       	ldi	r19, 0xFF	; 255
     9a6:	19 c0       	rjmp	.+50     	; 0x9da <twi_master_tx+0x7c>
     9a8:	01 2f       	mov	r16, r17
     9aa:	1d 2d       	mov	r17, r13
	for (i = 0; i < len; i++)
     9ac:	c0 e0       	ldi	r28, 0x00	; 0
     9ae:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (send_data(data[i], st_data_w_ack)) QUIT_TWI_OP;
     9b0:	f8 01       	movw	r30, r16
     9b2:	81 91       	ld	r24, Z+
     9b4:	8f 01       	movw	r16, r30
     9b6:	68 e2       	ldi	r22, 0x28	; 40
     9b8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <send_data>
     9bc:	00 97       	sbiw	r24, 0x00	; 0
     9be:	29 f0       	breq	.+10     	; 0x9ca <twi_master_tx+0x6c>
     9c0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     9c4:	2f ef       	ldi	r18, 0xFF	; 255
     9c6:	3f ef       	ldi	r19, 0xFF	; 255
     9c8:	08 c0       	rjmp	.+16     	; 0x9da <twi_master_tx+0x7c>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
	for (i = 0; i < len; i++)
     9ca:	21 96       	adiw	r28, 0x01	; 1
     9cc:	ce 15       	cp	r28, r14
     9ce:	df 05       	cpc	r29, r15
     9d0:	7c f3       	brlt	.-34     	; 0x9b0 <twi_master_tx+0x52>
	{
		if (send_data(data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	send_stop();
     9d2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
	return 0;
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
}
     9da:	82 2f       	mov	r24, r18
     9dc:	93 2f       	mov	r25, r19
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	ff 90       	pop	r15
     9e8:	ef 90       	pop	r14
     9ea:	df 90       	pop	r13
     9ec:	08 95       	ret

000009ee <twi_master_rx>:

int twi_master_rx(uint8_t addr, uint8_t *data, int len)
{
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	d8 2e       	mov	r13, r24
     9fe:	7b 01       	movw	r14, r22
     a00:	8a 01       	movw	r16, r20
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     a02:	88 e0       	ldi	r24, 0x08	; 8
     a04:	0e 94 63 04 	call	0x8c6	; 0x8c6 <send_start>
     a08:	00 97       	sbiw	r24, 0x00	; 0
     a0a:	29 f0       	breq	.+10     	; 0xa16 <twi_master_rx+0x28>
     a0c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     a10:	2f ef       	ldi	r18, 0xFF	; 255
     a12:	3f ef       	ldi	r19, 0xFF	; 255
     a14:	3b c0       	rjmp	.+118    	; 0xa8c <twi_master_rx+0x9e>
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     a16:	8d 2d       	mov	r24, r13
     a18:	88 0f       	add	r24, r24
     a1a:	81 60       	ori	r24, 0x01	; 1
     a1c:	60 e4       	ldi	r22, 0x40	; 64
     a1e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <send_data>
     a22:	00 97       	sbiw	r24, 0x00	; 0
     a24:	41 f4       	brne	.+16     	; 0xa36 <twi_master_rx+0x48>
	for (i = 0; i < len - 1; i++)
     a26:	01 50       	subi	r16, 0x01	; 1
     a28:	10 40       	sbci	r17, 0x00	; 0
     a2a:	10 16       	cp	r1, r16
     a2c:	11 06       	cpc	r1, r17
     a2e:	44 f0       	brlt	.+16     	; 0xa40 <twi_master_rx+0x52>
     a30:	c0 e0       	ldi	r28, 0x00	; 0
     a32:	d0 e0       	ldi	r29, 0x00	; 0
     a34:	19 c0       	rjmp	.+50     	; 0xa68 <twi_master_rx+0x7a>
int twi_master_rx(uint8_t addr, uint8_t *data, int len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     a36:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     a3a:	2f ef       	ldi	r18, 0xFF	; 255
     a3c:	3f ef       	ldi	r19, 0xFF	; 255
     a3e:	26 c0       	rjmp	.+76     	; 0xa8c <twi_master_rx+0x9e>
	for (i = 0; i < len - 1; i++)
     a40:	c0 e0       	ldi	r28, 0x00	; 0
     a42:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (recv_data(&data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
     a44:	c7 01       	movw	r24, r14
     a46:	8c 0f       	add	r24, r28
     a48:	9d 1f       	adc	r25, r29
     a4a:	60 e5       	ldi	r22, 0x50	; 80
     a4c:	41 e0       	ldi	r20, 0x01	; 1
     a4e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <recv_data>
     a52:	00 97       	sbiw	r24, 0x00	; 0
     a54:	29 f0       	breq	.+10     	; 0xa60 <twi_master_rx+0x72>
     a56:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
     a5c:	3f ef       	ldi	r19, 0xFF	; 255
     a5e:	16 c0       	rjmp	.+44     	; 0xa8c <twi_master_rx+0x9e>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
	for (i = 0; i < len - 1; i++)
     a60:	21 96       	adiw	r28, 0x01	; 1
     a62:	c0 17       	cp	r28, r16
     a64:	d1 07       	cpc	r29, r17
     a66:	74 f3       	brlt	.-36     	; 0xa44 <twi_master_rx+0x56>
	{
		if (recv_data(&data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
	}
	if (recv_data(&data[i], st_data_r_noack, 0)) QUIT_TWI_OP;
     a68:	c7 01       	movw	r24, r14
     a6a:	8c 0f       	add	r24, r28
     a6c:	9d 1f       	adc	r25, r29
     a6e:	68 e5       	ldi	r22, 0x58	; 88
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	0e 94 74 04 	call	0x8e8	; 0x8e8 <recv_data>
     a76:	00 97       	sbiw	r24, 0x00	; 0
     a78:	29 f0       	breq	.+10     	; 0xa84 <twi_master_rx+0x96>
     a7a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     a7e:	2f ef       	ldi	r18, 0xFF	; 255
     a80:	3f ef       	ldi	r19, 0xFF	; 255
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <twi_master_rx+0x9e>
	send_stop();
     a84:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
	return 0;
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
}
     a8c:	82 2f       	mov	r24, r18
     a8e:	93 2f       	mov	r25, r19
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	0f 91       	pop	r16
     a98:	ff 90       	pop	r15
     a9a:	ef 90       	pop	r14
     a9c:	df 90       	pop	r13
     a9e:	08 95       	ret

00000aa0 <twi_master_tx_rx>:

int twi_master_tx_rx(uint8_t addr, uint8_t *tx_data, int tx_len, uint8_t *rx_data,
			int rx_len)
{
     aa0:	7f 92       	push	r7
     aa2:	8f 92       	push	r8
     aa4:	9f 92       	push	r9
     aa6:	af 92       	push	r10
     aa8:	bf 92       	push	r11
     aaa:	cf 92       	push	r12
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	b8 2e       	mov	r11, r24
     abc:	a6 2e       	mov	r10, r22
     abe:	77 2e       	mov	r7, r23
     ac0:	7a 01       	movw	r14, r20
     ac2:	69 01       	movw	r12, r18
     ac4:	48 01       	movw	r8, r16
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     ac6:	88 e0       	ldi	r24, 0x08	; 8
     ac8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <send_start>
     acc:	00 97       	sbiw	r24, 0x00	; 0
     ace:	29 f0       	breq	.+10     	; 0xada <twi_master_tx_rx+0x3a>
     ad0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     ad4:	2f ef       	ldi	r18, 0xFF	; 255
     ad6:	3f ef       	ldi	r19, 0xFF	; 255
     ad8:	6b c0       	rjmp	.+214    	; 0xbb0 <twi_master_tx_rx+0x110>
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     ada:	8b 2d       	mov	r24, r11
     adc:	88 0f       	add	r24, r24
     ade:	68 e1       	ldi	r22, 0x18	; 24
     ae0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <send_data>
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	21 f4       	brne	.+8      	; 0xaf0 <twi_master_tx_rx+0x50>
	for (i = 0; i < tx_len; i++)
     ae8:	1e 14       	cp	r1, r14
     aea:	1f 04       	cpc	r1, r15
     aec:	34 f0       	brlt	.+12     	; 0xafa <twi_master_tx_rx+0x5a>
     aee:	1a c0       	rjmp	.+52     	; 0xb24 <twi_master_tx_rx+0x84>
			int rx_len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     af0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     af4:	2f ef       	ldi	r18, 0xFF	; 255
     af6:	3f ef       	ldi	r19, 0xFF	; 255
     af8:	5b c0       	rjmp	.+182    	; 0xbb0 <twi_master_tx_rx+0x110>
     afa:	0a 2d       	mov	r16, r10
     afc:	17 2d       	mov	r17, r7
	for (i = 0; i < tx_len; i++)
     afe:	c0 e0       	ldi	r28, 0x00	; 0
     b00:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
     b02:	f8 01       	movw	r30, r16
     b04:	81 91       	ld	r24, Z+
     b06:	8f 01       	movw	r16, r30
     b08:	68 e2       	ldi	r22, 0x28	; 40
     b0a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <send_data>
     b0e:	00 97       	sbiw	r24, 0x00	; 0
     b10:	29 f0       	breq	.+10     	; 0xb1c <twi_master_tx_rx+0x7c>
     b12:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     b16:	2f ef       	ldi	r18, 0xFF	; 255
     b18:	3f ef       	ldi	r19, 0xFF	; 255
     b1a:	4a c0       	rjmp	.+148    	; 0xbb0 <twi_master_tx_rx+0x110>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
	for (i = 0; i < tx_len; i++)
     b1c:	21 96       	adiw	r28, 0x01	; 1
     b1e:	ce 15       	cp	r28, r14
     b20:	df 05       	cpc	r29, r15
     b22:	7c f3       	brlt	.-34     	; 0xb02 <twi_master_tx_rx+0x62>
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
     b24:	80 e1       	ldi	r24, 0x10	; 16
     b26:	0e 94 63 04 	call	0x8c6	; 0x8c6 <send_start>
     b2a:	00 97       	sbiw	r24, 0x00	; 0
     b2c:	29 f0       	breq	.+10     	; 0xb38 <twi_master_tx_rx+0x98>
     b2e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     b32:	2f ef       	ldi	r18, 0xFF	; 255
     b34:	3f ef       	ldi	r19, 0xFF	; 255
     b36:	3c c0       	rjmp	.+120    	; 0xbb0 <twi_master_tx_rx+0x110>
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     b38:	8b 2d       	mov	r24, r11
     b3a:	88 0f       	add	r24, r24
     b3c:	81 60       	ori	r24, 0x01	; 1
     b3e:	60 e4       	ldi	r22, 0x40	; 64
     b40:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <send_data>
     b44:	00 97       	sbiw	r24, 0x00	; 0
     b46:	49 f4       	brne	.+18     	; 0xb5a <twi_master_tx_rx+0xba>
	for (i = 0; i < rx_len - 1; i++)
     b48:	84 01       	movw	r16, r8
     b4a:	01 50       	subi	r16, 0x01	; 1
     b4c:	10 40       	sbci	r17, 0x00	; 0
     b4e:	10 16       	cp	r1, r16
     b50:	11 06       	cpc	r1, r17
     b52:	44 f0       	brlt	.+16     	; 0xb64 <twi_master_tx_rx+0xc4>
     b54:	c0 e0       	ldi	r28, 0x00	; 0
     b56:	d0 e0       	ldi	r29, 0x00	; 0
     b58:	19 c0       	rjmp	.+50     	; 0xb8c <twi_master_tx_rx+0xec>
	for (i = 0; i < tx_len; i++)
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     b5a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     b5e:	2f ef       	ldi	r18, 0xFF	; 255
     b60:	3f ef       	ldi	r19, 0xFF	; 255
     b62:	26 c0       	rjmp	.+76     	; 0xbb0 <twi_master_tx_rx+0x110>
	for (i = 0; i < rx_len - 1; i++)
     b64:	c0 e0       	ldi	r28, 0x00	; 0
     b66:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (recv_data(&rx_data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
     b68:	c6 01       	movw	r24, r12
     b6a:	8c 0f       	add	r24, r28
     b6c:	9d 1f       	adc	r25, r29
     b6e:	60 e5       	ldi	r22, 0x50	; 80
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	0e 94 74 04 	call	0x8e8	; 0x8e8 <recv_data>
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	29 f0       	breq	.+10     	; 0xb84 <twi_master_tx_rx+0xe4>
     b7a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     b7e:	2f ef       	ldi	r18, 0xFF	; 255
     b80:	3f ef       	ldi	r19, 0xFF	; 255
     b82:	16 c0       	rjmp	.+44     	; 0xbb0 <twi_master_tx_rx+0x110>
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
	for (i = 0; i < rx_len - 1; i++)
     b84:	21 96       	adiw	r28, 0x01	; 1
     b86:	c0 17       	cp	r28, r16
     b88:	d1 07       	cpc	r29, r17
     b8a:	74 f3       	brlt	.-36     	; 0xb68 <twi_master_tx_rx+0xc8>
	{
		if (recv_data(&rx_data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
	}
	if (recv_data(&rx_data[i], st_data_r_noack, 0)) QUIT_TWI_OP;
     b8c:	c6 01       	movw	r24, r12
     b8e:	8c 0f       	add	r24, r28
     b90:	9d 1f       	adc	r25, r29
     b92:	68 e5       	ldi	r22, 0x58	; 88
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	0e 94 74 04 	call	0x8e8	; 0x8e8 <recv_data>
     b9a:	00 97       	sbiw	r24, 0x00	; 0
     b9c:	29 f0       	breq	.+10     	; 0xba8 <twi_master_tx_rx+0x108>
     b9e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
     ba2:	2f ef       	ldi	r18, 0xFF	; 255
     ba4:	3f ef       	ldi	r19, 0xFF	; 255
     ba6:	04 c0       	rjmp	.+8      	; 0xbb0 <twi_master_tx_rx+0x110>
	send_stop();
     ba8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <send_stop>
	return 0;
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
}
     bb0:	82 2f       	mov	r24, r18
     bb2:	93 2f       	mov	r25, r19
     bb4:	df 91       	pop	r29
     bb6:	cf 91       	pop	r28
     bb8:	1f 91       	pop	r17
     bba:	0f 91       	pop	r16
     bbc:	ff 90       	pop	r15
     bbe:	ef 90       	pop	r14
     bc0:	df 90       	pop	r13
     bc2:	cf 90       	pop	r12
     bc4:	bf 90       	pop	r11
     bc6:	af 90       	pop	r10
     bc8:	9f 90       	pop	r9
     bca:	8f 90       	pop	r8
     bcc:	7f 90       	pop	r7
     bce:	08 95       	ret

00000bd0 <UARTInit>:
#include "main.h"
#include "uartlib.h"

void UARTInit()
{		
	UCSRA = 0x00;
     bd0:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
     bd2:	8a b1       	in	r24, 0x0a	; 10
     bd4:	88 61       	ori	r24, 0x18	; 24
     bd6:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
     bd8:	80 b5       	in	r24, 0x20	; 32
     bda:	86 68       	ori	r24, 0x86	; 134
     bdc:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;
     bde:	89 e1       	ldi	r24, 0x19	; 25
     be0:	89 b9       	out	0x09, r24	; 9
}
     be2:	08 95       	ret

00000be4 <UARTSend>:

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
     be4:	5d 9b       	sbis	0x0b, 5	; 11
     be6:	fe cf       	rjmp	.-4      	; 0xbe4 <UARTSend>
	{
				
	}		
	UDR = Value;
     be8:	8c b9       	out	0x0c, r24	; 12
}
     bea:	08 95       	ret

00000bec <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
     bec:	5f 9b       	sbis	0x0b, 7	; 11
     bee:	fe cf       	rjmp	.-4      	; 0xbec <UARTReceive>
	{
		
	}		
	return UDR; 
     bf0:	8c b1       	in	r24, 0x0c	; 12
}
     bf2:	08 95       	ret

00000bf4 <SendString>:

void SendString(char* str)
{
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	ec 01       	movw	r28, r24
	while(*str != '\0')
     bfa:	88 81       	ld	r24, Y
     bfc:	88 23       	and	r24, r24
     bfe:	31 f0       	breq	.+12     	; 0xc0c <SendString+0x18>
		
	}		
	return UDR; 
}

void SendString(char* str)
     c00:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
     c02:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
     c06:	89 91       	ld	r24, Y+
     c08:	88 23       	and	r24, r24
     c0a:	d9 f7       	brne	.-10     	; 0xc02 <SendString+0xe>
	}
// 	//UARTSend(*str);
// 		
// 	UARTSend('\r');
// 	UARTSend('\n');
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <__subsf3>:
     c12:	50 58       	subi	r21, 0x80	; 128

00000c14 <__addsf3>:
     c14:	bb 27       	eor	r27, r27
     c16:	aa 27       	eor	r26, r26
     c18:	0e d0       	rcall	.+28     	; 0xc36 <__addsf3x>
     c1a:	4d c1       	rjmp	.+666    	; 0xeb6 <__fp_round>
     c1c:	3e d1       	rcall	.+636    	; 0xe9a <__fp_pscA>
     c1e:	30 f0       	brcs	.+12     	; 0xc2c <__addsf3+0x18>
     c20:	43 d1       	rcall	.+646    	; 0xea8 <__fp_pscB>
     c22:	20 f0       	brcs	.+8      	; 0xc2c <__addsf3+0x18>
     c24:	31 f4       	brne	.+12     	; 0xc32 <__addsf3+0x1e>
     c26:	9f 3f       	cpi	r25, 0xFF	; 255
     c28:	11 f4       	brne	.+4      	; 0xc2e <__addsf3+0x1a>
     c2a:	1e f4       	brtc	.+6      	; 0xc32 <__addsf3+0x1e>
     c2c:	33 c1       	rjmp	.+614    	; 0xe94 <__fp_nan>
     c2e:	0e f4       	brtc	.+2      	; 0xc32 <__addsf3+0x1e>
     c30:	e0 95       	com	r30
     c32:	e7 fb       	bst	r30, 7
     c34:	29 c1       	rjmp	.+594    	; 0xe88 <__fp_inf>

00000c36 <__addsf3x>:
     c36:	e9 2f       	mov	r30, r25
     c38:	4f d1       	rcall	.+670    	; 0xed8 <__fp_split3>
     c3a:	80 f3       	brcs	.-32     	; 0xc1c <__addsf3+0x8>
     c3c:	ba 17       	cp	r27, r26
     c3e:	62 07       	cpc	r22, r18
     c40:	73 07       	cpc	r23, r19
     c42:	84 07       	cpc	r24, r20
     c44:	95 07       	cpc	r25, r21
     c46:	18 f0       	brcs	.+6      	; 0xc4e <__addsf3x+0x18>
     c48:	71 f4       	brne	.+28     	; 0xc66 <__addsf3x+0x30>
     c4a:	9e f5       	brtc	.+102    	; 0xcb2 <__addsf3x+0x7c>
     c4c:	67 c1       	rjmp	.+718    	; 0xf1c <__fp_zero>
     c4e:	0e f4       	brtc	.+2      	; 0xc52 <__addsf3x+0x1c>
     c50:	e0 95       	com	r30
     c52:	0b 2e       	mov	r0, r27
     c54:	ba 2f       	mov	r27, r26
     c56:	a0 2d       	mov	r26, r0
     c58:	0b 01       	movw	r0, r22
     c5a:	b9 01       	movw	r22, r18
     c5c:	90 01       	movw	r18, r0
     c5e:	0c 01       	movw	r0, r24
     c60:	ca 01       	movw	r24, r20
     c62:	a0 01       	movw	r20, r0
     c64:	11 24       	eor	r1, r1
     c66:	ff 27       	eor	r31, r31
     c68:	59 1b       	sub	r21, r25
     c6a:	99 f0       	breq	.+38     	; 0xc92 <__addsf3x+0x5c>
     c6c:	59 3f       	cpi	r21, 0xF9	; 249
     c6e:	50 f4       	brcc	.+20     	; 0xc84 <__addsf3x+0x4e>
     c70:	50 3e       	cpi	r21, 0xE0	; 224
     c72:	68 f1       	brcs	.+90     	; 0xcce <__addsf3x+0x98>
     c74:	1a 16       	cp	r1, r26
     c76:	f0 40       	sbci	r31, 0x00	; 0
     c78:	a2 2f       	mov	r26, r18
     c7a:	23 2f       	mov	r18, r19
     c7c:	34 2f       	mov	r19, r20
     c7e:	44 27       	eor	r20, r20
     c80:	58 5f       	subi	r21, 0xF8	; 248
     c82:	f3 cf       	rjmp	.-26     	; 0xc6a <__addsf3x+0x34>
     c84:	46 95       	lsr	r20
     c86:	37 95       	ror	r19
     c88:	27 95       	ror	r18
     c8a:	a7 95       	ror	r26
     c8c:	f0 40       	sbci	r31, 0x00	; 0
     c8e:	53 95       	inc	r21
     c90:	c9 f7       	brne	.-14     	; 0xc84 <__addsf3x+0x4e>
     c92:	7e f4       	brtc	.+30     	; 0xcb2 <__addsf3x+0x7c>
     c94:	1f 16       	cp	r1, r31
     c96:	ba 0b       	sbc	r27, r26
     c98:	62 0b       	sbc	r22, r18
     c9a:	73 0b       	sbc	r23, r19
     c9c:	84 0b       	sbc	r24, r20
     c9e:	ba f0       	brmi	.+46     	; 0xcce <__addsf3x+0x98>
     ca0:	91 50       	subi	r25, 0x01	; 1
     ca2:	a1 f0       	breq	.+40     	; 0xccc <__addsf3x+0x96>
     ca4:	ff 0f       	add	r31, r31
     ca6:	bb 1f       	adc	r27, r27
     ca8:	66 1f       	adc	r22, r22
     caa:	77 1f       	adc	r23, r23
     cac:	88 1f       	adc	r24, r24
     cae:	c2 f7       	brpl	.-16     	; 0xca0 <__addsf3x+0x6a>
     cb0:	0e c0       	rjmp	.+28     	; 0xcce <__addsf3x+0x98>
     cb2:	ba 0f       	add	r27, r26
     cb4:	62 1f       	adc	r22, r18
     cb6:	73 1f       	adc	r23, r19
     cb8:	84 1f       	adc	r24, r20
     cba:	48 f4       	brcc	.+18     	; 0xcce <__addsf3x+0x98>
     cbc:	87 95       	ror	r24
     cbe:	77 95       	ror	r23
     cc0:	67 95       	ror	r22
     cc2:	b7 95       	ror	r27
     cc4:	f7 95       	ror	r31
     cc6:	9e 3f       	cpi	r25, 0xFE	; 254
     cc8:	08 f0       	brcs	.+2      	; 0xccc <__addsf3x+0x96>
     cca:	b3 cf       	rjmp	.-154    	; 0xc32 <__addsf3+0x1e>
     ccc:	93 95       	inc	r25
     cce:	88 0f       	add	r24, r24
     cd0:	08 f0       	brcs	.+2      	; 0xcd4 <__addsf3x+0x9e>
     cd2:	99 27       	eor	r25, r25
     cd4:	ee 0f       	add	r30, r30
     cd6:	97 95       	ror	r25
     cd8:	87 95       	ror	r24
     cda:	08 95       	ret

00000cdc <__divsf3>:
     cdc:	0c d0       	rcall	.+24     	; 0xcf6 <__divsf3x>
     cde:	eb c0       	rjmp	.+470    	; 0xeb6 <__fp_round>
     ce0:	e3 d0       	rcall	.+454    	; 0xea8 <__fp_pscB>
     ce2:	40 f0       	brcs	.+16     	; 0xcf4 <__divsf3+0x18>
     ce4:	da d0       	rcall	.+436    	; 0xe9a <__fp_pscA>
     ce6:	30 f0       	brcs	.+12     	; 0xcf4 <__divsf3+0x18>
     ce8:	21 f4       	brne	.+8      	; 0xcf2 <__divsf3+0x16>
     cea:	5f 3f       	cpi	r21, 0xFF	; 255
     cec:	19 f0       	breq	.+6      	; 0xcf4 <__divsf3+0x18>
     cee:	cc c0       	rjmp	.+408    	; 0xe88 <__fp_inf>
     cf0:	51 11       	cpse	r21, r1
     cf2:	15 c1       	rjmp	.+554    	; 0xf1e <__fp_szero>
     cf4:	cf c0       	rjmp	.+414    	; 0xe94 <__fp_nan>

00000cf6 <__divsf3x>:
     cf6:	f0 d0       	rcall	.+480    	; 0xed8 <__fp_split3>
     cf8:	98 f3       	brcs	.-26     	; 0xce0 <__divsf3+0x4>

00000cfa <__divsf3_pse>:
     cfa:	99 23       	and	r25, r25
     cfc:	c9 f3       	breq	.-14     	; 0xcf0 <__divsf3+0x14>
     cfe:	55 23       	and	r21, r21
     d00:	b1 f3       	breq	.-20     	; 0xcee <__divsf3+0x12>
     d02:	95 1b       	sub	r25, r21
     d04:	55 0b       	sbc	r21, r21
     d06:	bb 27       	eor	r27, r27
     d08:	aa 27       	eor	r26, r26
     d0a:	62 17       	cp	r22, r18
     d0c:	73 07       	cpc	r23, r19
     d0e:	84 07       	cpc	r24, r20
     d10:	38 f0       	brcs	.+14     	; 0xd20 <__divsf3_pse+0x26>
     d12:	9f 5f       	subi	r25, 0xFF	; 255
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	22 0f       	add	r18, r18
     d18:	33 1f       	adc	r19, r19
     d1a:	44 1f       	adc	r20, r20
     d1c:	aa 1f       	adc	r26, r26
     d1e:	a9 f3       	breq	.-22     	; 0xd0a <__divsf3_pse+0x10>
     d20:	33 d0       	rcall	.+102    	; 0xd88 <__divsf3_pse+0x8e>
     d22:	0e 2e       	mov	r0, r30
     d24:	3a f0       	brmi	.+14     	; 0xd34 <__divsf3_pse+0x3a>
     d26:	e0 e8       	ldi	r30, 0x80	; 128
     d28:	30 d0       	rcall	.+96     	; 0xd8a <__divsf3_pse+0x90>
     d2a:	91 50       	subi	r25, 0x01	; 1
     d2c:	50 40       	sbci	r21, 0x00	; 0
     d2e:	e6 95       	lsr	r30
     d30:	00 1c       	adc	r0, r0
     d32:	ca f7       	brpl	.-14     	; 0xd26 <__divsf3_pse+0x2c>
     d34:	29 d0       	rcall	.+82     	; 0xd88 <__divsf3_pse+0x8e>
     d36:	fe 2f       	mov	r31, r30
     d38:	27 d0       	rcall	.+78     	; 0xd88 <__divsf3_pse+0x8e>
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	bb 1f       	adc	r27, r27
     d42:	26 17       	cp	r18, r22
     d44:	37 07       	cpc	r19, r23
     d46:	48 07       	cpc	r20, r24
     d48:	ab 07       	cpc	r26, r27
     d4a:	b0 e8       	ldi	r27, 0x80	; 128
     d4c:	09 f0       	breq	.+2      	; 0xd50 <__divsf3_pse+0x56>
     d4e:	bb 0b       	sbc	r27, r27
     d50:	80 2d       	mov	r24, r0
     d52:	bf 01       	movw	r22, r30
     d54:	ff 27       	eor	r31, r31
     d56:	93 58       	subi	r25, 0x83	; 131
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	2a f0       	brmi	.+10     	; 0xd66 <__divsf3_pse+0x6c>
     d5c:	9e 3f       	cpi	r25, 0xFE	; 254
     d5e:	51 05       	cpc	r21, r1
     d60:	68 f0       	brcs	.+26     	; 0xd7c <__divsf3_pse+0x82>
     d62:	92 c0       	rjmp	.+292    	; 0xe88 <__fp_inf>
     d64:	dc c0       	rjmp	.+440    	; 0xf1e <__fp_szero>
     d66:	5f 3f       	cpi	r21, 0xFF	; 255
     d68:	ec f3       	brlt	.-6      	; 0xd64 <__divsf3_pse+0x6a>
     d6a:	98 3e       	cpi	r25, 0xE8	; 232
     d6c:	dc f3       	brlt	.-10     	; 0xd64 <__divsf3_pse+0x6a>
     d6e:	86 95       	lsr	r24
     d70:	77 95       	ror	r23
     d72:	67 95       	ror	r22
     d74:	b7 95       	ror	r27
     d76:	f7 95       	ror	r31
     d78:	9f 5f       	subi	r25, 0xFF	; 255
     d7a:	c9 f7       	brne	.-14     	; 0xd6e <__divsf3_pse+0x74>
     d7c:	88 0f       	add	r24, r24
     d7e:	91 1d       	adc	r25, r1
     d80:	96 95       	lsr	r25
     d82:	87 95       	ror	r24
     d84:	97 f9       	bld	r25, 7
     d86:	08 95       	ret
     d88:	e1 e0       	ldi	r30, 0x01	; 1
     d8a:	66 0f       	add	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	bb 1f       	adc	r27, r27
     d92:	62 17       	cp	r22, r18
     d94:	73 07       	cpc	r23, r19
     d96:	84 07       	cpc	r24, r20
     d98:	ba 07       	cpc	r27, r26
     d9a:	20 f0       	brcs	.+8      	; 0xda4 <__divsf3_pse+0xaa>
     d9c:	62 1b       	sub	r22, r18
     d9e:	73 0b       	sbc	r23, r19
     da0:	84 0b       	sbc	r24, r20
     da2:	ba 0b       	sbc	r27, r26
     da4:	ee 1f       	adc	r30, r30
     da6:	88 f7       	brcc	.-30     	; 0xd8a <__divsf3_pse+0x90>
     da8:	e0 95       	com	r30
     daa:	08 95       	ret

00000dac <__fixsfsi>:
     dac:	04 d0       	rcall	.+8      	; 0xdb6 <__fixunssfsi>
     dae:	68 94       	set
     db0:	b1 11       	cpse	r27, r1
     db2:	b5 c0       	rjmp	.+362    	; 0xf1e <__fp_szero>
     db4:	08 95       	ret

00000db6 <__fixunssfsi>:
     db6:	98 d0       	rcall	.+304    	; 0xee8 <__fp_splitA>
     db8:	88 f0       	brcs	.+34     	; 0xddc <__fixunssfsi+0x26>
     dba:	9f 57       	subi	r25, 0x7F	; 127
     dbc:	90 f0       	brcs	.+36     	; 0xde2 <__fixunssfsi+0x2c>
     dbe:	b9 2f       	mov	r27, r25
     dc0:	99 27       	eor	r25, r25
     dc2:	b7 51       	subi	r27, 0x17	; 23
     dc4:	a0 f0       	brcs	.+40     	; 0xdee <__fixunssfsi+0x38>
     dc6:	d1 f0       	breq	.+52     	; 0xdfc <__fixunssfsi+0x46>
     dc8:	66 0f       	add	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	88 1f       	adc	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	1a f0       	brmi	.+6      	; 0xdd8 <__fixunssfsi+0x22>
     dd2:	ba 95       	dec	r27
     dd4:	c9 f7       	brne	.-14     	; 0xdc8 <__fixunssfsi+0x12>
     dd6:	12 c0       	rjmp	.+36     	; 0xdfc <__fixunssfsi+0x46>
     dd8:	b1 30       	cpi	r27, 0x01	; 1
     dda:	81 f0       	breq	.+32     	; 0xdfc <__fixunssfsi+0x46>
     ddc:	9f d0       	rcall	.+318    	; 0xf1c <__fp_zero>
     dde:	b1 e0       	ldi	r27, 0x01	; 1
     de0:	08 95       	ret
     de2:	9c c0       	rjmp	.+312    	; 0xf1c <__fp_zero>
     de4:	67 2f       	mov	r22, r23
     de6:	78 2f       	mov	r23, r24
     de8:	88 27       	eor	r24, r24
     dea:	b8 5f       	subi	r27, 0xF8	; 248
     dec:	39 f0       	breq	.+14     	; 0xdfc <__fixunssfsi+0x46>
     dee:	b9 3f       	cpi	r27, 0xF9	; 249
     df0:	cc f3       	brlt	.-14     	; 0xde4 <__fixunssfsi+0x2e>
     df2:	86 95       	lsr	r24
     df4:	77 95       	ror	r23
     df6:	67 95       	ror	r22
     df8:	b3 95       	inc	r27
     dfa:	d9 f7       	brne	.-10     	; 0xdf2 <__fixunssfsi+0x3c>
     dfc:	3e f4       	brtc	.+14     	; 0xe0c <__fixunssfsi+0x56>
     dfe:	90 95       	com	r25
     e00:	80 95       	com	r24
     e02:	70 95       	com	r23
     e04:	61 95       	neg	r22
     e06:	7f 4f       	sbci	r23, 0xFF	; 255
     e08:	8f 4f       	sbci	r24, 0xFF	; 255
     e0a:	9f 4f       	sbci	r25, 0xFF	; 255
     e0c:	08 95       	ret

00000e0e <__floatunsisf>:
     e0e:	e8 94       	clt
     e10:	09 c0       	rjmp	.+18     	; 0xe24 <__floatsisf+0x12>

00000e12 <__floatsisf>:
     e12:	97 fb       	bst	r25, 7
     e14:	3e f4       	brtc	.+14     	; 0xe24 <__floatsisf+0x12>
     e16:	90 95       	com	r25
     e18:	80 95       	com	r24
     e1a:	70 95       	com	r23
     e1c:	61 95       	neg	r22
     e1e:	7f 4f       	sbci	r23, 0xFF	; 255
     e20:	8f 4f       	sbci	r24, 0xFF	; 255
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	99 23       	and	r25, r25
     e26:	a9 f0       	breq	.+42     	; 0xe52 <__floatsisf+0x40>
     e28:	f9 2f       	mov	r31, r25
     e2a:	96 e9       	ldi	r25, 0x96	; 150
     e2c:	bb 27       	eor	r27, r27
     e2e:	93 95       	inc	r25
     e30:	f6 95       	lsr	r31
     e32:	87 95       	ror	r24
     e34:	77 95       	ror	r23
     e36:	67 95       	ror	r22
     e38:	b7 95       	ror	r27
     e3a:	f1 11       	cpse	r31, r1
     e3c:	f8 cf       	rjmp	.-16     	; 0xe2e <__floatsisf+0x1c>
     e3e:	fa f4       	brpl	.+62     	; 0xe7e <__floatsisf+0x6c>
     e40:	bb 0f       	add	r27, r27
     e42:	11 f4       	brne	.+4      	; 0xe48 <__floatsisf+0x36>
     e44:	60 ff       	sbrs	r22, 0
     e46:	1b c0       	rjmp	.+54     	; 0xe7e <__floatsisf+0x6c>
     e48:	6f 5f       	subi	r22, 0xFF	; 255
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255
     e4c:	8f 4f       	sbci	r24, 0xFF	; 255
     e4e:	9f 4f       	sbci	r25, 0xFF	; 255
     e50:	16 c0       	rjmp	.+44     	; 0xe7e <__floatsisf+0x6c>
     e52:	88 23       	and	r24, r24
     e54:	11 f0       	breq	.+4      	; 0xe5a <__floatsisf+0x48>
     e56:	96 e9       	ldi	r25, 0x96	; 150
     e58:	11 c0       	rjmp	.+34     	; 0xe7c <__floatsisf+0x6a>
     e5a:	77 23       	and	r23, r23
     e5c:	21 f0       	breq	.+8      	; 0xe66 <__floatsisf+0x54>
     e5e:	9e e8       	ldi	r25, 0x8E	; 142
     e60:	87 2f       	mov	r24, r23
     e62:	76 2f       	mov	r23, r22
     e64:	05 c0       	rjmp	.+10     	; 0xe70 <__floatsisf+0x5e>
     e66:	66 23       	and	r22, r22
     e68:	71 f0       	breq	.+28     	; 0xe86 <__floatsisf+0x74>
     e6a:	96 e8       	ldi	r25, 0x86	; 134
     e6c:	86 2f       	mov	r24, r22
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	2a f0       	brmi	.+10     	; 0xe7e <__floatsisf+0x6c>
     e74:	9a 95       	dec	r25
     e76:	66 0f       	add	r22, r22
     e78:	77 1f       	adc	r23, r23
     e7a:	88 1f       	adc	r24, r24
     e7c:	da f7       	brpl	.-10     	; 0xe74 <__floatsisf+0x62>
     e7e:	88 0f       	add	r24, r24
     e80:	96 95       	lsr	r25
     e82:	87 95       	ror	r24
     e84:	97 f9       	bld	r25, 7
     e86:	08 95       	ret

00000e88 <__fp_inf>:
     e88:	97 f9       	bld	r25, 7
     e8a:	9f 67       	ori	r25, 0x7F	; 127
     e8c:	80 e8       	ldi	r24, 0x80	; 128
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	08 95       	ret

00000e94 <__fp_nan>:
     e94:	9f ef       	ldi	r25, 0xFF	; 255
     e96:	80 ec       	ldi	r24, 0xC0	; 192
     e98:	08 95       	ret

00000e9a <__fp_pscA>:
     e9a:	00 24       	eor	r0, r0
     e9c:	0a 94       	dec	r0
     e9e:	16 16       	cp	r1, r22
     ea0:	17 06       	cpc	r1, r23
     ea2:	18 06       	cpc	r1, r24
     ea4:	09 06       	cpc	r0, r25
     ea6:	08 95       	ret

00000ea8 <__fp_pscB>:
     ea8:	00 24       	eor	r0, r0
     eaa:	0a 94       	dec	r0
     eac:	12 16       	cp	r1, r18
     eae:	13 06       	cpc	r1, r19
     eb0:	14 06       	cpc	r1, r20
     eb2:	05 06       	cpc	r0, r21
     eb4:	08 95       	ret

00000eb6 <__fp_round>:
     eb6:	09 2e       	mov	r0, r25
     eb8:	03 94       	inc	r0
     eba:	00 0c       	add	r0, r0
     ebc:	11 f4       	brne	.+4      	; 0xec2 <__fp_round+0xc>
     ebe:	88 23       	and	r24, r24
     ec0:	52 f0       	brmi	.+20     	; 0xed6 <__fp_round+0x20>
     ec2:	bb 0f       	add	r27, r27
     ec4:	40 f4       	brcc	.+16     	; 0xed6 <__fp_round+0x20>
     ec6:	bf 2b       	or	r27, r31
     ec8:	11 f4       	brne	.+4      	; 0xece <__fp_round+0x18>
     eca:	60 ff       	sbrs	r22, 0
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <__fp_round+0x20>
     ece:	6f 5f       	subi	r22, 0xFF	; 255
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	8f 4f       	sbci	r24, 0xFF	; 255
     ed4:	9f 4f       	sbci	r25, 0xFF	; 255
     ed6:	08 95       	ret

00000ed8 <__fp_split3>:
     ed8:	57 fd       	sbrc	r21, 7
     eda:	90 58       	subi	r25, 0x80	; 128
     edc:	44 0f       	add	r20, r20
     ede:	55 1f       	adc	r21, r21
     ee0:	59 f0       	breq	.+22     	; 0xef8 <__fp_splitA+0x10>
     ee2:	5f 3f       	cpi	r21, 0xFF	; 255
     ee4:	71 f0       	breq	.+28     	; 0xf02 <__fp_splitA+0x1a>
     ee6:	47 95       	ror	r20

00000ee8 <__fp_splitA>:
     ee8:	88 0f       	add	r24, r24
     eea:	97 fb       	bst	r25, 7
     eec:	99 1f       	adc	r25, r25
     eee:	61 f0       	breq	.+24     	; 0xf08 <__fp_splitA+0x20>
     ef0:	9f 3f       	cpi	r25, 0xFF	; 255
     ef2:	79 f0       	breq	.+30     	; 0xf12 <__fp_splitA+0x2a>
     ef4:	87 95       	ror	r24
     ef6:	08 95       	ret
     ef8:	12 16       	cp	r1, r18
     efa:	13 06       	cpc	r1, r19
     efc:	14 06       	cpc	r1, r20
     efe:	55 1f       	adc	r21, r21
     f00:	f2 cf       	rjmp	.-28     	; 0xee6 <__fp_split3+0xe>
     f02:	46 95       	lsr	r20
     f04:	f1 df       	rcall	.-30     	; 0xee8 <__fp_splitA>
     f06:	08 c0       	rjmp	.+16     	; 0xf18 <__fp_splitA+0x30>
     f08:	16 16       	cp	r1, r22
     f0a:	17 06       	cpc	r1, r23
     f0c:	18 06       	cpc	r1, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	f1 cf       	rjmp	.-30     	; 0xef4 <__fp_splitA+0xc>
     f12:	86 95       	lsr	r24
     f14:	71 05       	cpc	r23, r1
     f16:	61 05       	cpc	r22, r1
     f18:	08 94       	sec
     f1a:	08 95       	ret

00000f1c <__fp_zero>:
     f1c:	e8 94       	clt

00000f1e <__fp_szero>:
     f1e:	bb 27       	eor	r27, r27
     f20:	66 27       	eor	r22, r22
     f22:	77 27       	eor	r23, r23
     f24:	cb 01       	movw	r24, r22
     f26:	97 f9       	bld	r25, 7
     f28:	08 95       	ret

00000f2a <__mulsf3>:
     f2a:	0b d0       	rcall	.+22     	; 0xf42 <__mulsf3x>
     f2c:	c4 cf       	rjmp	.-120    	; 0xeb6 <__fp_round>
     f2e:	b5 df       	rcall	.-150    	; 0xe9a <__fp_pscA>
     f30:	28 f0       	brcs	.+10     	; 0xf3c <__mulsf3+0x12>
     f32:	ba df       	rcall	.-140    	; 0xea8 <__fp_pscB>
     f34:	18 f0       	brcs	.+6      	; 0xf3c <__mulsf3+0x12>
     f36:	95 23       	and	r25, r21
     f38:	09 f0       	breq	.+2      	; 0xf3c <__mulsf3+0x12>
     f3a:	a6 cf       	rjmp	.-180    	; 0xe88 <__fp_inf>
     f3c:	ab cf       	rjmp	.-170    	; 0xe94 <__fp_nan>
     f3e:	11 24       	eor	r1, r1
     f40:	ee cf       	rjmp	.-36     	; 0xf1e <__fp_szero>

00000f42 <__mulsf3x>:
     f42:	ca df       	rcall	.-108    	; 0xed8 <__fp_split3>
     f44:	a0 f3       	brcs	.-24     	; 0xf2e <__mulsf3+0x4>

00000f46 <__mulsf3_pse>:
     f46:	95 9f       	mul	r25, r21
     f48:	d1 f3       	breq	.-12     	; 0xf3e <__mulsf3+0x14>
     f4a:	95 0f       	add	r25, r21
     f4c:	50 e0       	ldi	r21, 0x00	; 0
     f4e:	55 1f       	adc	r21, r21
     f50:	62 9f       	mul	r22, r18
     f52:	f0 01       	movw	r30, r0
     f54:	72 9f       	mul	r23, r18
     f56:	bb 27       	eor	r27, r27
     f58:	f0 0d       	add	r31, r0
     f5a:	b1 1d       	adc	r27, r1
     f5c:	63 9f       	mul	r22, r19
     f5e:	aa 27       	eor	r26, r26
     f60:	f0 0d       	add	r31, r0
     f62:	b1 1d       	adc	r27, r1
     f64:	aa 1f       	adc	r26, r26
     f66:	64 9f       	mul	r22, r20
     f68:	66 27       	eor	r22, r22
     f6a:	b0 0d       	add	r27, r0
     f6c:	a1 1d       	adc	r26, r1
     f6e:	66 1f       	adc	r22, r22
     f70:	82 9f       	mul	r24, r18
     f72:	22 27       	eor	r18, r18
     f74:	b0 0d       	add	r27, r0
     f76:	a1 1d       	adc	r26, r1
     f78:	62 1f       	adc	r22, r18
     f7a:	73 9f       	mul	r23, r19
     f7c:	b0 0d       	add	r27, r0
     f7e:	a1 1d       	adc	r26, r1
     f80:	62 1f       	adc	r22, r18
     f82:	83 9f       	mul	r24, r19
     f84:	a0 0d       	add	r26, r0
     f86:	61 1d       	adc	r22, r1
     f88:	22 1f       	adc	r18, r18
     f8a:	74 9f       	mul	r23, r20
     f8c:	33 27       	eor	r19, r19
     f8e:	a0 0d       	add	r26, r0
     f90:	61 1d       	adc	r22, r1
     f92:	23 1f       	adc	r18, r19
     f94:	84 9f       	mul	r24, r20
     f96:	60 0d       	add	r22, r0
     f98:	21 1d       	adc	r18, r1
     f9a:	82 2f       	mov	r24, r18
     f9c:	76 2f       	mov	r23, r22
     f9e:	6a 2f       	mov	r22, r26
     fa0:	11 24       	eor	r1, r1
     fa2:	9f 57       	subi	r25, 0x7F	; 127
     fa4:	50 40       	sbci	r21, 0x00	; 0
     fa6:	8a f0       	brmi	.+34     	; 0xfca <__mulsf3_pse+0x84>
     fa8:	e1 f0       	breq	.+56     	; 0xfe2 <__mulsf3_pse+0x9c>
     faa:	88 23       	and	r24, r24
     fac:	4a f0       	brmi	.+18     	; 0xfc0 <__mulsf3_pse+0x7a>
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	bb 1f       	adc	r27, r27
     fb4:	66 1f       	adc	r22, r22
     fb6:	77 1f       	adc	r23, r23
     fb8:	88 1f       	adc	r24, r24
     fba:	91 50       	subi	r25, 0x01	; 1
     fbc:	50 40       	sbci	r21, 0x00	; 0
     fbe:	a9 f7       	brne	.-22     	; 0xfaa <__mulsf3_pse+0x64>
     fc0:	9e 3f       	cpi	r25, 0xFE	; 254
     fc2:	51 05       	cpc	r21, r1
     fc4:	70 f0       	brcs	.+28     	; 0xfe2 <__mulsf3_pse+0x9c>
     fc6:	60 cf       	rjmp	.-320    	; 0xe88 <__fp_inf>
     fc8:	aa cf       	rjmp	.-172    	; 0xf1e <__fp_szero>
     fca:	5f 3f       	cpi	r21, 0xFF	; 255
     fcc:	ec f3       	brlt	.-6      	; 0xfc8 <__mulsf3_pse+0x82>
     fce:	98 3e       	cpi	r25, 0xE8	; 232
     fd0:	dc f3       	brlt	.-10     	; 0xfc8 <__mulsf3_pse+0x82>
     fd2:	86 95       	lsr	r24
     fd4:	77 95       	ror	r23
     fd6:	67 95       	ror	r22
     fd8:	b7 95       	ror	r27
     fda:	f7 95       	ror	r31
     fdc:	e7 95       	ror	r30
     fde:	9f 5f       	subi	r25, 0xFF	; 255
     fe0:	c1 f7       	brne	.-16     	; 0xfd2 <__mulsf3_pse+0x8c>
     fe2:	fe 2b       	or	r31, r30
     fe4:	88 0f       	add	r24, r24
     fe6:	91 1d       	adc	r25, r1
     fe8:	96 95       	lsr	r25
     fea:	87 95       	ror	r24
     fec:	97 f9       	bld	r25, 7
     fee:	08 95       	ret

00000ff0 <__mulsi3>:
     ff0:	62 9f       	mul	r22, r18
     ff2:	d0 01       	movw	r26, r0
     ff4:	73 9f       	mul	r23, r19
     ff6:	f0 01       	movw	r30, r0
     ff8:	82 9f       	mul	r24, r18
     ffa:	e0 0d       	add	r30, r0
     ffc:	f1 1d       	adc	r31, r1
     ffe:	64 9f       	mul	r22, r20
    1000:	e0 0d       	add	r30, r0
    1002:	f1 1d       	adc	r31, r1
    1004:	92 9f       	mul	r25, r18
    1006:	f0 0d       	add	r31, r0
    1008:	83 9f       	mul	r24, r19
    100a:	f0 0d       	add	r31, r0
    100c:	74 9f       	mul	r23, r20
    100e:	f0 0d       	add	r31, r0
    1010:	65 9f       	mul	r22, r21
    1012:	f0 0d       	add	r31, r0
    1014:	99 27       	eor	r25, r25
    1016:	72 9f       	mul	r23, r18
    1018:	b0 0d       	add	r27, r0
    101a:	e1 1d       	adc	r30, r1
    101c:	f9 1f       	adc	r31, r25
    101e:	63 9f       	mul	r22, r19
    1020:	b0 0d       	add	r27, r0
    1022:	e1 1d       	adc	r30, r1
    1024:	f9 1f       	adc	r31, r25
    1026:	bd 01       	movw	r22, r26
    1028:	cf 01       	movw	r24, r30
    102a:	11 24       	eor	r1, r1
    102c:	08 95       	ret

0000102e <__divmodhi4>:
    102e:	97 fb       	bst	r25, 7
    1030:	09 2e       	mov	r0, r25
    1032:	07 26       	eor	r0, r23
    1034:	0a d0       	rcall	.+20     	; 0x104a <__divmodhi4_neg1>
    1036:	77 fd       	sbrc	r23, 7
    1038:	04 d0       	rcall	.+8      	; 0x1042 <__divmodhi4_neg2>
    103a:	0c d0       	rcall	.+24     	; 0x1054 <__udivmodhi4>
    103c:	06 d0       	rcall	.+12     	; 0x104a <__divmodhi4_neg1>
    103e:	00 20       	and	r0, r0
    1040:	1a f4       	brpl	.+6      	; 0x1048 <__divmodhi4_exit>

00001042 <__divmodhi4_neg2>:
    1042:	70 95       	com	r23
    1044:	61 95       	neg	r22
    1046:	7f 4f       	sbci	r23, 0xFF	; 255

00001048 <__divmodhi4_exit>:
    1048:	08 95       	ret

0000104a <__divmodhi4_neg1>:
    104a:	f6 f7       	brtc	.-4      	; 0x1048 <__divmodhi4_exit>
    104c:	90 95       	com	r25
    104e:	81 95       	neg	r24
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	08 95       	ret

00001054 <__udivmodhi4>:
    1054:	aa 1b       	sub	r26, r26
    1056:	bb 1b       	sub	r27, r27
    1058:	51 e1       	ldi	r21, 0x11	; 17
    105a:	07 c0       	rjmp	.+14     	; 0x106a <__udivmodhi4_ep>

0000105c <__udivmodhi4_loop>:
    105c:	aa 1f       	adc	r26, r26
    105e:	bb 1f       	adc	r27, r27
    1060:	a6 17       	cp	r26, r22
    1062:	b7 07       	cpc	r27, r23
    1064:	10 f0       	brcs	.+4      	; 0x106a <__udivmodhi4_ep>
    1066:	a6 1b       	sub	r26, r22
    1068:	b7 0b       	sbc	r27, r23

0000106a <__udivmodhi4_ep>:
    106a:	88 1f       	adc	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	5a 95       	dec	r21
    1070:	a9 f7       	brne	.-22     	; 0x105c <__udivmodhi4_loop>
    1072:	80 95       	com	r24
    1074:	90 95       	com	r25
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	08 95       	ret

0000107c <atoi>:
    107c:	fc 01       	movw	r30, r24
    107e:	88 27       	eor	r24, r24
    1080:	99 27       	eor	r25, r25
    1082:	e8 94       	clt
    1084:	21 91       	ld	r18, Z+
    1086:	20 32       	cpi	r18, 0x20	; 32
    1088:	e9 f3       	breq	.-6      	; 0x1084 <atoi+0x8>
    108a:	29 30       	cpi	r18, 0x09	; 9
    108c:	10 f0       	brcs	.+4      	; 0x1092 <atoi+0x16>
    108e:	2e 30       	cpi	r18, 0x0E	; 14
    1090:	c8 f3       	brcs	.-14     	; 0x1084 <atoi+0x8>
    1092:	2b 32       	cpi	r18, 0x2B	; 43
    1094:	41 f0       	breq	.+16     	; 0x10a6 <atoi+0x2a>
    1096:	2d 32       	cpi	r18, 0x2D	; 45
    1098:	39 f4       	brne	.+14     	; 0x10a8 <atoi+0x2c>
    109a:	68 94       	set
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <atoi+0x2a>
    109e:	0e 94 b1 08 	call	0x1162	; 0x1162 <__mulhi_const_10>
    10a2:	82 0f       	add	r24, r18
    10a4:	91 1d       	adc	r25, r1
    10a6:	21 91       	ld	r18, Z+
    10a8:	20 53       	subi	r18, 0x30	; 48
    10aa:	2a 30       	cpi	r18, 0x0A	; 10
    10ac:	c0 f3       	brcs	.-16     	; 0x109e <atoi+0x22>
    10ae:	1e f4       	brtc	.+6      	; 0x10b6 <atoi+0x3a>
    10b0:	90 95       	com	r25
    10b2:	81 95       	neg	r24
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	08 95       	ret

000010b8 <itoa>:
    10b8:	fb 01       	movw	r30, r22
    10ba:	9f 01       	movw	r18, r30
    10bc:	e8 94       	clt
    10be:	42 30       	cpi	r20, 0x02	; 2
    10c0:	c4 f0       	brlt	.+48     	; 0x10f2 <itoa+0x3a>
    10c2:	45 32       	cpi	r20, 0x25	; 37
    10c4:	b4 f4       	brge	.+44     	; 0x10f2 <itoa+0x3a>
    10c6:	4a 30       	cpi	r20, 0x0A	; 10
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <itoa+0x1c>
    10ca:	97 fb       	bst	r25, 7
    10cc:	1e f4       	brtc	.+6      	; 0x10d4 <itoa+0x1c>
    10ce:	90 95       	com	r25
    10d0:	81 95       	neg	r24
    10d2:	9f 4f       	sbci	r25, 0xFF	; 255
    10d4:	64 2f       	mov	r22, r20
    10d6:	77 27       	eor	r23, r23
    10d8:	0e 94 2a 08 	call	0x1054	; 0x1054 <__udivmodhi4>
    10dc:	80 5d       	subi	r24, 0xD0	; 208
    10de:	8a 33       	cpi	r24, 0x3A	; 58
    10e0:	0c f0       	brlt	.+2      	; 0x10e4 <itoa+0x2c>
    10e2:	89 5d       	subi	r24, 0xD9	; 217
    10e4:	81 93       	st	Z+, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	a1 f7       	brne	.-24     	; 0x10d4 <itoa+0x1c>
    10ec:	16 f4       	brtc	.+4      	; 0x10f2 <itoa+0x3a>
    10ee:	5d e2       	ldi	r21, 0x2D	; 45
    10f0:	51 93       	st	Z+, r21
    10f2:	10 82       	st	Z, r1
    10f4:	c9 01       	movw	r24, r18
    10f6:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <strrev>

000010fa <ltoa>:
    10fa:	fa 01       	movw	r30, r20
    10fc:	cf 93       	push	r28
    10fe:	ff 93       	push	r31
    1100:	ef 93       	push	r30
    1102:	22 30       	cpi	r18, 0x02	; 2
    1104:	44 f1       	brlt	.+80     	; 0x1156 <ltoa+0x5c>
    1106:	25 32       	cpi	r18, 0x25	; 37
    1108:	34 f5       	brge	.+76     	; 0x1156 <ltoa+0x5c>
    110a:	c2 2f       	mov	r28, r18
    110c:	e8 94       	clt
    110e:	ca 30       	cpi	r28, 0x0A	; 10
    1110:	49 f4       	brne	.+18     	; 0x1124 <ltoa+0x2a>
    1112:	97 fb       	bst	r25, 7
    1114:	3e f4       	brtc	.+14     	; 0x1124 <ltoa+0x2a>
    1116:	90 95       	com	r25
    1118:	80 95       	com	r24
    111a:	70 95       	com	r23
    111c:	61 95       	neg	r22
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	8f 4f       	sbci	r24, 0xFF	; 255
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	2c 2f       	mov	r18, r28
    1126:	33 27       	eor	r19, r19
    1128:	44 27       	eor	r20, r20
    112a:	55 27       	eor	r21, r21
    112c:	ff 93       	push	r31
    112e:	ef 93       	push	r30
    1130:	0e 94 c9 08 	call	0x1192	; 0x1192 <__udivmodsi4>
    1134:	ef 91       	pop	r30
    1136:	ff 91       	pop	r31
    1138:	60 5d       	subi	r22, 0xD0	; 208
    113a:	6a 33       	cpi	r22, 0x3A	; 58
    113c:	0c f0       	brlt	.+2      	; 0x1140 <ltoa+0x46>
    113e:	69 5d       	subi	r22, 0xD9	; 217
    1140:	61 93       	st	Z+, r22
    1142:	b9 01       	movw	r22, r18
    1144:	ca 01       	movw	r24, r20
    1146:	60 50       	subi	r22, 0x00	; 0
    1148:	70 40       	sbci	r23, 0x00	; 0
    114a:	80 40       	sbci	r24, 0x00	; 0
    114c:	90 40       	sbci	r25, 0x00	; 0
    114e:	51 f7       	brne	.-44     	; 0x1124 <ltoa+0x2a>
    1150:	16 f4       	brtc	.+4      	; 0x1156 <ltoa+0x5c>
    1152:	cd e2       	ldi	r28, 0x2D	; 45
    1154:	c1 93       	st	Z+, r28
    1156:	10 82       	st	Z, r1
    1158:	8f 91       	pop	r24
    115a:	9f 91       	pop	r25
    115c:	cf 91       	pop	r28
    115e:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <strrev>

00001162 <__mulhi_const_10>:
    1162:	7a e0       	ldi	r23, 0x0A	; 10
    1164:	97 9f       	mul	r25, r23
    1166:	90 2d       	mov	r25, r0
    1168:	87 9f       	mul	r24, r23
    116a:	80 2d       	mov	r24, r0
    116c:	91 0d       	add	r25, r1
    116e:	11 24       	eor	r1, r1
    1170:	08 95       	ret

00001172 <strrev>:
    1172:	dc 01       	movw	r26, r24
    1174:	fc 01       	movw	r30, r24
    1176:	67 2f       	mov	r22, r23
    1178:	71 91       	ld	r23, Z+
    117a:	77 23       	and	r23, r23
    117c:	e1 f7       	brne	.-8      	; 0x1176 <strrev+0x4>
    117e:	32 97       	sbiw	r30, 0x02	; 2
    1180:	04 c0       	rjmp	.+8      	; 0x118a <strrev+0x18>
    1182:	7c 91       	ld	r23, X
    1184:	6d 93       	st	X+, r22
    1186:	70 83       	st	Z, r23
    1188:	62 91       	ld	r22, -Z
    118a:	ae 17       	cp	r26, r30
    118c:	bf 07       	cpc	r27, r31
    118e:	c8 f3       	brcs	.-14     	; 0x1182 <strrev+0x10>
    1190:	08 95       	ret

00001192 <__udivmodsi4>:
    1192:	a1 e2       	ldi	r26, 0x21	; 33
    1194:	1a 2e       	mov	r1, r26
    1196:	aa 1b       	sub	r26, r26
    1198:	bb 1b       	sub	r27, r27
    119a:	fd 01       	movw	r30, r26
    119c:	0d c0       	rjmp	.+26     	; 0x11b8 <__udivmodsi4_ep>

0000119e <__udivmodsi4_loop>:
    119e:	aa 1f       	adc	r26, r26
    11a0:	bb 1f       	adc	r27, r27
    11a2:	ee 1f       	adc	r30, r30
    11a4:	ff 1f       	adc	r31, r31
    11a6:	a2 17       	cp	r26, r18
    11a8:	b3 07       	cpc	r27, r19
    11aa:	e4 07       	cpc	r30, r20
    11ac:	f5 07       	cpc	r31, r21
    11ae:	20 f0       	brcs	.+8      	; 0x11b8 <__udivmodsi4_ep>
    11b0:	a2 1b       	sub	r26, r18
    11b2:	b3 0b       	sbc	r27, r19
    11b4:	e4 0b       	sbc	r30, r20
    11b6:	f5 0b       	sbc	r31, r21

000011b8 <__udivmodsi4_ep>:
    11b8:	66 1f       	adc	r22, r22
    11ba:	77 1f       	adc	r23, r23
    11bc:	88 1f       	adc	r24, r24
    11be:	99 1f       	adc	r25, r25
    11c0:	1a 94       	dec	r1
    11c2:	69 f7       	brne	.-38     	; 0x119e <__udivmodsi4_loop>
    11c4:	60 95       	com	r22
    11c6:	70 95       	com	r23
    11c8:	80 95       	com	r24
    11ca:	90 95       	com	r25
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	bd 01       	movw	r22, r26
    11d2:	cf 01       	movw	r24, r30
    11d4:	08 95       	ret

000011d6 <_exit>:
    11d6:	f8 94       	cli

000011d8 <__stop_program>:
    11d8:	ff cf       	rjmp	.-2      	; 0x11d8 <__stop_program>
