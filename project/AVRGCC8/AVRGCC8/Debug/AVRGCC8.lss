
AVRGCC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000004b0  00000544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  0080006a  0080006a  0000054e  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000550  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016e  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00001012  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000102  00000000  00000000  00001052  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000037d  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001e4  00000000  00000000  000014d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000054c  00000000  00000000  000016b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000d0  00000000  00000000  00001c04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000013c  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000016b  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000049  00000000  00000000  00001f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00001fc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 84 01 	jmp	0x308	; 0x308 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3f       	cpi	r26, 0xFE	; 254
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 65 00 	call	0xca	; 0xca <main>
  8a:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerInit>:
// 	TCCR0 |= (1 << WGM00) | (1 << CS02) | (1 << CS00);
// 	OCR0 = 256;
// 	TIMSK |= (1 << OCIE0);

 	//TIMER1	
	TCNT1 |= 0;
  92:	8c b5       	in	r24, 0x2c	; 44
  94:	9d b5       	in	r25, 0x2d	; 45
  96:	9d bd       	out	0x2d, r25	; 45
  98:	8c bd       	out	0x2c, r24	; 44
	OCR1A |= 15625;
  9a:	8a b5       	in	r24, 0x2a	; 42
  9c:	9b b5       	in	r25, 0x2b	; 43
  9e:	89 60       	ori	r24, 0x09	; 9
  a0:	9d 63       	ori	r25, 0x3D	; 61
  a2:	9b bd       	out	0x2b, r25	; 43
  a4:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (1 << FOC1A);
  a6:	8f b5       	in	r24, 0x2f	; 47
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
  ac:	8e b5       	in	r24, 0x2e	; 46
  ae:	8b 60       	ori	r24, 0x0B	; 11
  b0:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
  b2:	89 b7       	in	r24, 0x39	; 57
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	89 bf       	out	0x39, r24	; 57
	
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
  b8:	85 b5       	in	r24, 0x25	; 37
  ba:	8e 60       	ori	r24, 0x0E	; 14
  bc:	85 bd       	out	0x25, r24	; 37
	OCR2 = 10;
  be:	8a e0       	ldi	r24, 0x0A	; 10
  c0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
  c2:	89 b7       	in	r24, 0x39	; 57
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	89 bf       	out	0x39, r24	; 57
}
  c8:	08 95       	ret

000000ca <main>:

char string[128];
int sendTime;

int main(void)
{	
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
	DDRA = 0xF0;
  d2:	80 ef       	ldi	r24, 0xF0	; 240
  d4:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	84 bb       	out	0x14, r24	; 20
	DDRD |= RED | GREEN | BLUE | BTN1 | BTN2;
  da:	81 b3       	in	r24, 0x11	; 17
  dc:	8c 6b       	ori	r24, 0xBC	; 188
  de:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
  e0:	8f e0       	ldi	r24, 0x0F	; 15
  e2:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
  e4:	80 ec       	ldi	r24, 0xC0	; 192
  e6:	8b bf       	out	0x3b, r24	; 59
	
	TimerInit();
  e8:	0e 94 49 00 	call	0x92	; 0x92 <TimerInit>
	UARTInit();
  ec:	0e 94 dd 01 	call	0x3ba	; 0x3ba <UARTInit>
	
	sei();
  f0:	78 94       	sei
	
	while(1)
	{
		if (sendTime == 1)
		{
			SendString("Time is ");
  f2:	00 e6       	ldi	r16, 0x60	; 96
  f4:	10 e0       	ldi	r17, 0x00	; 0
			itoa(HH, string, 10);
  f6:	cc e7       	ldi	r28, 0x7C	; 124
  f8:	d0 e0       	ldi	r29, 0x00	; 0
	
	sei();
	
	while(1)
	{
		if (sendTime == 1)
  fa:	80 91 fc 00 	lds	r24, 0x00FC
  fe:	90 91 fd 00 	lds	r25, 0x00FD
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	91 05       	cpc	r25, r1
 106:	c1 f5       	brne	.+112    	; 0x178 <main+0xae>
		{
			SendString("Time is ");
 108:	c8 01       	movw	r24, r16
 10a:	0e 94 ef 01 	call	0x3de	; 0x3de <SendString>
			itoa(HH, string, 10);
 10e:	80 91 6c 00 	lds	r24, 0x006C
 112:	90 91 6d 00 	lds	r25, 0x006D
 116:	be 01       	movw	r22, r28
 118:	4a e0       	ldi	r20, 0x0A	; 10
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	0e 94 25 02 	call	0x44a	; 0x44a <itoa>
			SendString(string);
 120:	ce 01       	movw	r24, r28
 122:	0e 94 ef 01 	call	0x3de	; 0x3de <SendString>
			UARTSend(':');
 126:	8a e3       	ldi	r24, 0x3A	; 58
 128:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UARTSend>
			itoa(MM, string, 10);
 12c:	80 91 6e 00 	lds	r24, 0x006E
 130:	90 91 6f 00 	lds	r25, 0x006F
 134:	be 01       	movw	r22, r28
 136:	4a e0       	ldi	r20, 0x0A	; 10
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	0e 94 25 02 	call	0x44a	; 0x44a <itoa>
			SendString(string);
 13e:	ce 01       	movw	r24, r28
 140:	0e 94 ef 01 	call	0x3de	; 0x3de <SendString>
			UARTSend(':');
 144:	8a e3       	ldi	r24, 0x3A	; 58
 146:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UARTSend>
			itoa(SS, string, 10);
 14a:	80 91 70 00 	lds	r24, 0x0070
 14e:	90 91 71 00 	lds	r25, 0x0071
 152:	be 01       	movw	r22, r28
 154:	4a e0       	ldi	r20, 0x0A	; 10
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	0e 94 25 02 	call	0x44a	; 0x44a <itoa>
			SendString(string);		
 15c:	ce 01       	movw	r24, r28
 15e:	0e 94 ef 01 	call	0x3de	; 0x3de <SendString>
			UARTSend('\r');
 162:	8d e0       	ldi	r24, 0x0D	; 13
 164:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UARTSend>
			UARTSend('\n');
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UARTSend>
			
			sendTime = 0;
 16e:	10 92 fd 00 	sts	0x00FD, r1
 172:	10 92 fc 00 	sts	0x00FC, r1
 176:	c1 cf       	rjmp	.-126    	; 0xfa <main+0x30>
 178:	ff cf       	rjmp	.-2      	; 0x178 <main+0xae>

0000017a <__vector_19>:
	OCR2 = 10;
	TIMSK |= (1 << OCIE2);
}

ISR(TIMER0_COMP_vect)
{	
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
	SS++;	
 188:	80 91 70 00 	lds	r24, 0x0070
 18c:	90 91 71 00 	lds	r25, 0x0071
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	90 93 71 00 	sts	0x0071, r25
 196:	80 93 70 00 	sts	0x0070, r24
}
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <NumToArr>:
	j++;
	j %= 4;
}

void NumToArr(int numbr)
{	
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	e4 e7       	ldi	r30, 0x74	; 116
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
	PORTA = (1 << (7 - j));			
	j++;
	j %= 4;
}

void NumToArr(int numbr)
 1b0:	ef 01       	movw	r28, r30
 1b2:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
 1b4:	2a e0       	ldi	r18, 0x0A	; 10
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	b9 01       	movw	r22, r18
 1ba:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__divmodhi4>
 1be:	81 93       	st	Z+, r24
 1c0:	91 93       	st	Z+, r25
		numbr /= 10;
 1c2:	86 2f       	mov	r24, r22
 1c4:	97 2f       	mov	r25, r23
	j %= 4;
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
 1c6:	ec 17       	cp	r30, r28
 1c8:	fd 07       	cpc	r31, r29
 1ca:	b1 f7       	brne	.-20     	; 0x1b8 <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <__vector_6>:
{	
	SS++;	
}

ISR(TIMER1_COMPA_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	5f 93       	push	r21
 1e4:	6f 93       	push	r22
 1e6:	7f 93       	push	r23
 1e8:	8f 93       	push	r24
 1ea:	9f 93       	push	r25
 1ec:	af 93       	push	r26
 1ee:	bf 93       	push	r27
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	SS++;
 1f4:	80 91 70 00 	lds	r24, 0x0070
 1f8:	90 91 71 00 	lds	r25, 0x0071
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 71 00 	sts	0x0071, r25
 202:	80 93 70 00 	sts	0x0070, r24
	if (SS == 60)
 206:	8c 33       	cpi	r24, 0x3C	; 60
 208:	91 05       	cpc	r25, r1
 20a:	e9 f4       	brne	.+58     	; 0x246 <__vector_6+0x74>
	{
		MM++;
 20c:	80 91 6e 00 	lds	r24, 0x006E
 210:	90 91 6f 00 	lds	r25, 0x006F
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 6f 00 	sts	0x006F, r25
 21a:	80 93 6e 00 	sts	0x006E, r24
		SS = 0;
 21e:	10 92 71 00 	sts	0x0071, r1
 222:	10 92 70 00 	sts	0x0070, r1
		if (MM == 60)
 226:	8c 33       	cpi	r24, 0x3C	; 60
 228:	91 05       	cpc	r25, r1
 22a:	69 f4       	brne	.+26     	; 0x246 <__vector_6+0x74>
		{
			HH++;
 22c:	80 91 6c 00 	lds	r24, 0x006C
 230:	90 91 6d 00 	lds	r25, 0x006D
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 6d 00 	sts	0x006D, r25
 23a:	80 93 6c 00 	sts	0x006C, r24
			MM = 0;
 23e:	10 92 6f 00 	sts	0x006F, r1
 242:	10 92 6e 00 	sts	0x006E, r1
		}
	}
	time = (HH * 100) + MM;	
 246:	40 91 6c 00 	lds	r20, 0x006C
 24a:	50 91 6d 00 	lds	r21, 0x006D
 24e:	84 e6       	ldi	r24, 0x64	; 100
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	48 9f       	mul	r20, r24
 254:	90 01       	movw	r18, r0
 256:	49 9f       	mul	r20, r25
 258:	30 0d       	add	r19, r0
 25a:	58 9f       	mul	r21, r24
 25c:	30 0d       	add	r19, r0
 25e:	11 24       	eor	r1, r1
 260:	80 91 6e 00 	lds	r24, 0x006E
 264:	90 91 6f 00 	lds	r25, 0x006F
 268:	82 0f       	add	r24, r18
 26a:	93 1f       	adc	r25, r19
 26c:	90 93 73 00 	sts	0x0073, r25
 270:	80 93 72 00 	sts	0x0072, r24
	NumToArr(time);
 274:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <NumToArr>
	
	sendTime = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	90 93 fd 00 	sts	0x00FD, r25
 280:	80 93 fc 00 	sts	0x00FC, r24
// 	timeStr += string + ":";
// 	itoa(MM, string, 10);
// 	timeStr += string + ":";
// 	itoa(SS, string, 10);
// 	SendString(timeStr);
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 2a6:	84 30       	cpi	r24, 0x04	; 4
 2a8:	f9 f0       	breq	.+62     	; 0x2e8 <DecToDigit+0x42>
 2aa:	85 30       	cpi	r24, 0x05	; 5
 2ac:	48 f4       	brcc	.+18     	; 0x2c0 <DecToDigit+0x1a>
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	49 f1       	breq	.+82     	; 0x304 <DecToDigit+0x5e>
 2b2:	81 30       	cpi	r24, 0x01	; 1
 2b4:	98 f0       	brcs	.+38     	; 0x2dc <DecToDigit+0x36>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	99 f0       	breq	.+38     	; 0x2e0 <DecToDigit+0x3a>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	09 f5       	brne	.+66     	; 0x300 <DecToDigit+0x5a>
 2be:	12 c0       	rjmp	.+36     	; 0x2e4 <DecToDigit+0x3e>
 2c0:	87 30       	cpi	r24, 0x07	; 7
 2c2:	c1 f0       	breq	.+48     	; 0x2f4 <DecToDigit+0x4e>
 2c4:	88 30       	cpi	r24, 0x08	; 8
 2c6:	28 f4       	brcc	.+10     	; 0x2d2 <DecToDigit+0x2c>
 2c8:	85 30       	cpi	r24, 0x05	; 5
 2ca:	81 f0       	breq	.+32     	; 0x2ec <DecToDigit+0x46>
 2cc:	86 30       	cpi	r24, 0x06	; 6
 2ce:	c1 f4       	brne	.+48     	; 0x300 <DecToDigit+0x5a>
 2d0:	0f c0       	rjmp	.+30     	; 0x2f0 <DecToDigit+0x4a>
 2d2:	88 30       	cpi	r24, 0x08	; 8
 2d4:	89 f0       	breq	.+34     	; 0x2f8 <DecToDigit+0x52>
 2d6:	89 30       	cpi	r24, 0x09	; 9
 2d8:	99 f4       	brne	.+38     	; 0x300 <DecToDigit+0x5a>
 2da:	10 c0       	rjmp	.+32     	; 0x2fc <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 2dc:	8f e5       	ldi	r24, 0x5F	; 95
 2de:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 2e0:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 2e2:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 2e4:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 2e6:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 2e8:	86 e6       	ldi	r24, 0x66	; 102
			break;
 2ea:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 2ec:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 2ee:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 2f0:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 2f2:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 2f4:	87 e0       	ldi	r24, 0x07	; 7
			break;
 2f6:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 2f8:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 2fa:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 2fc:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 2fe:	08 95       	ret
		default:
			Digit = 0b00000000;
 300:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 302:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 304:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
 306:	08 95       	ret

00000308 <__vector_3>:
// 	itoa(SS, string, 10);
// 	SendString(timeStr);
}

ISR(TIMER2_COMP_vect)
{	
 308:	1f 92       	push	r1
 30a:	0f 92       	push	r0
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	0f 92       	push	r0
 310:	11 24       	eor	r1, r1
 312:	2f 93       	push	r18
 314:	3f 93       	push	r19
 316:	4f 93       	push	r20
 318:	5f 93       	push	r21
 31a:	6f 93       	push	r22
 31c:	7f 93       	push	r23
 31e:	8f 93       	push	r24
 320:	9f 93       	push	r25
 322:	af 93       	push	r26
 324:	bf 93       	push	r27
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	ef 93       	push	r30
 32c:	ff 93       	push	r31
	PORTC = 0x00;
 32e:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 330:	1b ba       	out	0x1b, r1	; 27
	
	PORTC = DecToDigit(arr[j]);	
 332:	c0 91 6a 00 	lds	r28, 0x006A
 336:	d0 91 6b 00 	lds	r29, 0x006B
 33a:	fe 01       	movw	r30, r28
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	ec 58       	subi	r30, 0x8C	; 140
 342:	ff 4f       	sbci	r31, 0xFF	; 255
 344:	80 81       	ld	r24, Z
 346:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DecToDigit>
 34a:	85 bb       	out	0x15, r24	; 21
	
	if ((j == 2) && ((SS % 2) == 0))
 34c:	c2 30       	cpi	r28, 0x02	; 2
 34e:	d1 05       	cpc	r29, r1
 350:	39 f4       	brne	.+14     	; 0x360 <__vector_3+0x58>
 352:	80 91 70 00 	lds	r24, 0x0070
 356:	80 fd       	sbrc	r24, 0
 358:	03 c0       	rjmp	.+6      	; 0x360 <__vector_3+0x58>
	{			
		PORTC ^= 0b10000000;	
 35a:	85 b3       	in	r24, 0x15	; 21
 35c:	80 58       	subi	r24, 0x80	; 128
 35e:	85 bb       	out	0x15, r24	; 21
	}	
		
	PORTA = (1 << (7 - j));			
 360:	80 91 6a 00 	lds	r24, 0x006A
 364:	90 91 6b 00 	lds	r25, 0x006B
 368:	27 e0       	ldi	r18, 0x07	; 7
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	28 1b       	sub	r18, r24
 36e:	39 0b       	sbc	r19, r25
 370:	41 e0       	ldi	r20, 0x01	; 1
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	ba 01       	movw	r22, r20
 376:	02 c0       	rjmp	.+4      	; 0x37c <__vector_3+0x74>
 378:	66 0f       	add	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	2a 95       	dec	r18
 37e:	e2 f7       	brpl	.-8      	; 0x378 <__vector_3+0x70>
 380:	6b bb       	out	0x1b, r22	; 27
	j++;
 382:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 384:	64 e0       	ldi	r22, 0x04	; 4
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	0e 94 fe 01 	call	0x3fc	; 0x3fc <__divmodhi4>
 38c:	90 93 6b 00 	sts	0x006B, r25
 390:	80 93 6a 00 	sts	0x006A, r24
}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	bf 91       	pop	r27
 39e:	af 91       	pop	r26
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	7f 91       	pop	r23
 3a6:	6f 91       	pop	r22
 3a8:	5f 91       	pop	r21
 3aa:	4f 91       	pop	r20
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <UARTInit>:
#include "main.h"
#include "uartlib.h"

void UARTInit()
{		
	UCSRA = 0x00;
 3ba:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 3bc:	8a b1       	in	r24, 0x0a	; 10
 3be:	88 61       	ori	r24, 0x18	; 24
 3c0:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 3c2:	80 b5       	in	r24, 0x20	; 32
 3c4:	86 68       	ori	r24, 0x86	; 134
 3c6:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;
 3c8:	89 e1       	ldi	r24, 0x19	; 25
 3ca:	89 b9       	out	0x09, r24	; 9
}
 3cc:	08 95       	ret

000003ce <UARTSend>:

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
 3ce:	5d 9b       	sbis	0x0b, 5	; 11
 3d0:	fe cf       	rjmp	.-4      	; 0x3ce <UARTSend>
	{
				
	}		
	UDR = Value;
 3d2:	8c b9       	out	0x0c, r24	; 12
}
 3d4:	08 95       	ret

000003d6 <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
 3d6:	5f 9b       	sbis	0x0b, 7	; 11
 3d8:	fe cf       	rjmp	.-4      	; 0x3d6 <UARTReceive>
	{
		
	}		
	return UDR; 
 3da:	8c b1       	in	r24, 0x0c	; 12
}
 3dc:	08 95       	ret

000003de <SendString>:

void SendString(char* str)
{
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	ec 01       	movw	r28, r24
	while(*str != '\0')
 3e4:	88 81       	ld	r24, Y
 3e6:	88 23       	and	r24, r24
 3e8:	31 f0       	breq	.+12     	; 0x3f6 <SendString+0x18>
		
	}		
	return UDR; 
}

void SendString(char* str)
 3ea:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
 3ec:	0e 94 e7 01 	call	0x3ce	; 0x3ce <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
 3f0:	89 91       	ld	r24, Y+
 3f2:	88 23       	and	r24, r24
 3f4:	d9 f7       	brne	.-10     	; 0x3ec <SendString+0xe>
	{
		UARTSend(*str);
		str++;
	}
	//UARTSend(*str);
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	08 95       	ret

000003fc <__divmodhi4>:
 3fc:	97 fb       	bst	r25, 7
 3fe:	09 2e       	mov	r0, r25
 400:	07 26       	eor	r0, r23
 402:	0a d0       	rcall	.+20     	; 0x418 <__divmodhi4_neg1>
 404:	77 fd       	sbrc	r23, 7
 406:	04 d0       	rcall	.+8      	; 0x410 <__divmodhi4_neg2>
 408:	0c d0       	rcall	.+24     	; 0x422 <__udivmodhi4>
 40a:	06 d0       	rcall	.+12     	; 0x418 <__divmodhi4_neg1>
 40c:	00 20       	and	r0, r0
 40e:	1a f4       	brpl	.+6      	; 0x416 <__divmodhi4_exit>

00000410 <__divmodhi4_neg2>:
 410:	70 95       	com	r23
 412:	61 95       	neg	r22
 414:	7f 4f       	sbci	r23, 0xFF	; 255

00000416 <__divmodhi4_exit>:
 416:	08 95       	ret

00000418 <__divmodhi4_neg1>:
 418:	f6 f7       	brtc	.-4      	; 0x416 <__divmodhi4_exit>
 41a:	90 95       	com	r25
 41c:	81 95       	neg	r24
 41e:	9f 4f       	sbci	r25, 0xFF	; 255
 420:	08 95       	ret

00000422 <__udivmodhi4>:
 422:	aa 1b       	sub	r26, r26
 424:	bb 1b       	sub	r27, r27
 426:	51 e1       	ldi	r21, 0x11	; 17
 428:	07 c0       	rjmp	.+14     	; 0x438 <__udivmodhi4_ep>

0000042a <__udivmodhi4_loop>:
 42a:	aa 1f       	adc	r26, r26
 42c:	bb 1f       	adc	r27, r27
 42e:	a6 17       	cp	r26, r22
 430:	b7 07       	cpc	r27, r23
 432:	10 f0       	brcs	.+4      	; 0x438 <__udivmodhi4_ep>
 434:	a6 1b       	sub	r26, r22
 436:	b7 0b       	sbc	r27, r23

00000438 <__udivmodhi4_ep>:
 438:	88 1f       	adc	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	5a 95       	dec	r21
 43e:	a9 f7       	brne	.-22     	; 0x42a <__udivmodhi4_loop>
 440:	80 95       	com	r24
 442:	90 95       	com	r25
 444:	bc 01       	movw	r22, r24
 446:	cd 01       	movw	r24, r26
 448:	08 95       	ret

0000044a <itoa>:
 44a:	fb 01       	movw	r30, r22
 44c:	9f 01       	movw	r18, r30
 44e:	e8 94       	clt
 450:	42 30       	cpi	r20, 0x02	; 2
 452:	c4 f0       	brlt	.+48     	; 0x484 <__stack+0x25>
 454:	45 32       	cpi	r20, 0x25	; 37
 456:	b4 f4       	brge	.+44     	; 0x484 <__stack+0x25>
 458:	4a 30       	cpi	r20, 0x0A	; 10
 45a:	29 f4       	brne	.+10     	; 0x466 <__stack+0x7>
 45c:	97 fb       	bst	r25, 7
 45e:	1e f4       	brtc	.+6      	; 0x466 <__stack+0x7>
 460:	90 95       	com	r25
 462:	81 95       	neg	r24
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	64 2f       	mov	r22, r20
 468:	77 27       	eor	r23, r23
 46a:	0e 94 11 02 	call	0x422	; 0x422 <__udivmodhi4>
 46e:	80 5d       	subi	r24, 0xD0	; 208
 470:	8a 33       	cpi	r24, 0x3A	; 58
 472:	0c f0       	brlt	.+2      	; 0x476 <__stack+0x17>
 474:	89 5d       	subi	r24, 0xD9	; 217
 476:	81 93       	st	Z+, r24
 478:	cb 01       	movw	r24, r22
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	a1 f7       	brne	.-24     	; 0x466 <__stack+0x7>
 47e:	16 f4       	brtc	.+4      	; 0x484 <__stack+0x25>
 480:	5d e2       	ldi	r21, 0x2D	; 45
 482:	51 93       	st	Z+, r21
 484:	10 82       	st	Z, r1
 486:	c9 01       	movw	r24, r18
 488:	0c 94 46 02 	jmp	0x48c	; 0x48c <strrev>

0000048c <strrev>:
 48c:	dc 01       	movw	r26, r24
 48e:	fc 01       	movw	r30, r24
 490:	67 2f       	mov	r22, r23
 492:	71 91       	ld	r23, Z+
 494:	77 23       	and	r23, r23
 496:	e1 f7       	brne	.-8      	; 0x490 <strrev+0x4>
 498:	32 97       	sbiw	r30, 0x02	; 2
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <strrev+0x18>
 49c:	7c 91       	ld	r23, X
 49e:	6d 93       	st	X+, r22
 4a0:	70 83       	st	Z, r23
 4a2:	62 91       	ld	r22, -Z
 4a4:	ae 17       	cp	r26, r30
 4a6:	bf 07       	cpc	r27, r31
 4a8:	c8 f3       	brcs	.-14     	; 0x49c <strrev+0x10>
 4aa:	08 95       	ret

000004ac <_exit>:
 4ac:	f8 94       	cli

000004ae <__stop_program>:
 4ae:	ff cf       	rjmp	.-2      	; 0x4ae <__stop_program>
