
AVRGCC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  000011e8  0000127c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012b  008000d2  008000d2  000012ee  2**0
                  ALLOC
  3 .stab         00002874  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000987  00000000  00000000  00003b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000044eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000024f  00000000  00000000  0000454b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b71  00000000  00000000  0000479a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000446  00000000  00000000  0000530b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e55  00000000  00000000  00005751  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001f0  00000000  00000000  000065a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000039c  00000000  00000000  00006798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005a9  00000000  00000000  00006b34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000080  00000000  00000000  000070dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  0000715d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_1>
       8:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_2>
       c:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3f       	cpi	r26, 0xFD	; 253
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 02 	call	0x4c8	; 0x4c8 <main>
      8a:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SendTemperature>:
 	UARTSend('\r');
 	UARTSend('\n');
}

void SendTemperature()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
	itoa(tempArr[3], string, 10);
      96:	c9 ee       	ldi	r28, 0xE9	; 233
      98:	d0 e0       	ldi	r29, 0x00	; 0
      9a:	80 91 f7 01 	lds	r24, 0x01F7
      9e:	90 91 f8 01 	lds	r25, 0x01F8
      a2:	be 01       	movw	r22, r28
      a4:	4a e0       	ldi	r20, 0x0A	; 10
      a6:	50 e0       	ldi	r21, 0x00	; 0
      a8:	0e 94 63 08 	call	0x10c6	; 0x10c6 <itoa>
	SendString(string);
      ac:	ce 01       	movw	r24, r28
      ae:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
	itoa(tempArr[2], string, 10);
      b2:	80 91 f5 01 	lds	r24, 0x01F5
      b6:	90 91 f6 01 	lds	r25, 0x01F6
      ba:	be 01       	movw	r22, r28
      bc:	4a e0       	ldi	r20, 0x0A	; 10
      be:	50 e0       	ldi	r21, 0x00	; 0
      c0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <itoa>
	SendString(string);
      c4:	ce 01       	movw	r24, r28
      c6:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
	SendString(".");
      ca:	80 e6       	ldi	r24, 0x60	; 96
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
	itoa(tempArr[1], string, 10);
      d2:	80 91 f3 01 	lds	r24, 0x01F3
      d6:	90 91 f4 01 	lds	r25, 0x01F4
      da:	be 01       	movw	r22, r28
      dc:	4a e0       	ldi	r20, 0x0A	; 10
      de:	50 e0       	ldi	r21, 0x00	; 0
      e0:	0e 94 63 08 	call	0x10c6	; 0x10c6 <itoa>
	SendString(string);
      e4:	ce 01       	movw	r24, r28
      e6:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
	SendString(" C");
      ea:	82 e6       	ldi	r24, 0x62	; 98
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
	
	UARTSend('\r');
      f2:	8d e0       	ldi	r24, 0x0D	; 13
      f4:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
 	UARTSend('\n');
      f8:	8a e0       	ldi	r24, 0x0A	; 10
      fa:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
}
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	08 95       	ret

00000104 <SendTime>:
	
	TIMSK ^= (1 << OCIE2);
}

void SendTime()
{
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
	itoa(HH, string, 10);
     108:	c9 ee       	ldi	r28, 0xE9	; 233
     10a:	d0 e0       	ldi	r29, 0x00	; 0
     10c:	80 91 c6 00 	lds	r24, 0x00C6
     110:	90 91 c7 00 	lds	r25, 0x00C7
     114:	be 01       	movw	r22, r28
     116:	4a e0       	ldi	r20, 0x0A	; 10
     118:	50 e0       	ldi	r21, 0x00	; 0
     11a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <itoa>
	SendString(string);
     11e:	ce 01       	movw	r24, r28
     120:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
	UARTSend(':');
     124:	8a e3       	ldi	r24, 0x3A	; 58
     126:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
	itoa(MM, string, 10);
     12a:	80 91 c8 00 	lds	r24, 0x00C8
     12e:	90 91 c9 00 	lds	r25, 0x00C9
     132:	be 01       	movw	r22, r28
     134:	4a e0       	ldi	r20, 0x0A	; 10
     136:	50 e0       	ldi	r21, 0x00	; 0
     138:	0e 94 63 08 	call	0x10c6	; 0x10c6 <itoa>
	SendString(string);
     13c:	ce 01       	movw	r24, r28
     13e:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
	UARTSend(':');
     142:	8a e3       	ldi	r24, 0x3A	; 58
     144:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
	itoa(SS, string, 10);
     148:	80 91 ca 00 	lds	r24, 0x00CA
     14c:	90 91 cb 00 	lds	r25, 0x00CB
     150:	be 01       	movw	r22, r28
     152:	4a e0       	ldi	r20, 0x0A	; 10
     154:	50 e0       	ldi	r21, 0x00	; 0
     156:	0e 94 63 08 	call	0x10c6	; 0x10c6 <itoa>
	SendString(string);	
     15a:	ce 01       	movw	r24, r28
     15c:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
	
 	UARTSend('\r');
     160:	8d e0       	ldi	r24, 0x0D	; 13
     162:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
 	UARTSend('\n');
     166:	8a e0       	ldi	r24, 0x0A	; 10
     168:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
}
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <TimerInit>:
// 	TCCR0 |= (1 << WGM00) | (1 << CS02) | (1 << CS00);
// 	OCR0 = 5;
// 	TIMSK |= (1 << OCIE0);

 	//TIMER1	
	TCNT1 |= 0;
     172:	8c b5       	in	r24, 0x2c	; 44
     174:	9d b5       	in	r25, 0x2d	; 45
     176:	9d bd       	out	0x2d, r25	; 45
     178:	8c bd       	out	0x2c, r24	; 44
	OCR1A |= 15625;
     17a:	8a b5       	in	r24, 0x2a	; 42
     17c:	9b b5       	in	r25, 0x2b	; 43
     17e:	89 60       	ori	r24, 0x09	; 9
     180:	9d 63       	ori	r25, 0x3D	; 61
     182:	9b bd       	out	0x2b, r25	; 43
     184:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (1 << FOC1A);
     186:	8f b5       	in	r24, 0x2f	; 47
     188:	88 60       	ori	r24, 0x08	; 8
     18a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
     18c:	8e b5       	in	r24, 0x2e	; 46
     18e:	8b 60       	ori	r24, 0x0B	; 11
     190:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
     192:	89 b7       	in	r24, 0x39	; 57
     194:	80 61       	ori	r24, 0x10	; 16
     196:	89 bf       	out	0x39, r24	; 57
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
     198:	85 b5       	in	r24, 0x25	; 37
     19a:	8e 60       	ori	r24, 0x0E	; 14
     19c:	85 bd       	out	0x25, r24	; 37
	OCR2 = 2;
     19e:	82 e0       	ldi	r24, 0x02	; 2
     1a0:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
     1a2:	89 b7       	in	r24, 0x39	; 57
     1a4:	80 68       	ori	r24, 0x80	; 128
     1a6:	89 bf       	out	0x39, r24	; 57
}
     1a8:	08 95       	ret

000001aa <__vector_19>:

ISR(TIMER0_COMP_vect)
{
     1aa:	1f 92       	push	r1
     1ac:	0f 92       	push	r0
     1ae:	0f b6       	in	r0, 0x3f	; 63
     1b0:	0f 92       	push	r0
     1b2:	11 24       	eor	r1, r1
	
}
     1b4:	0f 90       	pop	r0
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	0f 90       	pop	r0
     1ba:	1f 90       	pop	r1
     1bc:	18 95       	reti

000001be <__vector_1>:
		j %= 4;
	}		
}

ISR(INT0_vect)
{
     1be:	1f 92       	push	r1
     1c0:	0f 92       	push	r0
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	0f 92       	push	r0
     1c6:	11 24       	eor	r1, r1
     1c8:	8f 93       	push	r24
     1ca:	9f 93       	push	r25
	timeMode++;
     1cc:	80 91 de 00 	lds	r24, 0x00DE
     1d0:	90 91 df 00 	lds	r25, 0x00DF
     1d4:	01 96       	adiw	r24, 0x01	; 1
     1d6:	90 93 df 00 	sts	0x00DF, r25
     1da:	80 93 de 00 	sts	0x00DE, r24
	
	if (timeMode == 1)
     1de:	81 30       	cpi	r24, 0x01	; 1
     1e0:	91 05       	cpc	r25, r1
     1e2:	21 f0       	breq	.+8      	; 0x1ec <__vector_1+0x2e>
	{
		
	}
	else
	{		
		timeMode = 0;
     1e4:	10 92 df 00 	sts	0x00DF, r1
     1e8:	10 92 de 00 	sts	0x00DE, r1
	}
}
     1ec:	9f 91       	pop	r25
     1ee:	8f 91       	pop	r24
     1f0:	0f 90       	pop	r0
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	0f 90       	pop	r0
     1f6:	1f 90       	pop	r1
     1f8:	18 95       	reti

000001fa <__vector_2>:

ISR(INT1_vect)
{
     1fa:	1f 92       	push	r1
     1fc:	0f 92       	push	r0
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	0f 92       	push	r0
     202:	11 24       	eor	r1, r1
     204:	8f 93       	push	r24
     206:	9f 93       	push	r25
	segMode++;
     208:	80 91 e4 00 	lds	r24, 0x00E4
     20c:	90 91 e5 00 	lds	r25, 0x00E5
     210:	01 96       	adiw	r24, 0x01	; 1
     212:	90 93 e5 00 	sts	0x00E5, r25
     216:	80 93 e4 00 	sts	0x00E4, r24
	
	if (segMode == 1)
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	91 05       	cpc	r25, r1
     21e:	21 f0       	breq	.+8      	; 0x228 <__vector_2+0x2e>
		//TIMSK ^= (1 << OCIE2);		
	}
	else
	{
		//TIMSK ^= (1 << OCIE2);
 		segMode = 0;
     220:	10 92 e5 00 	sts	0x00E5, r1
     224:	10 92 e4 00 	sts	0x00E4, r1
	}
}
     228:	9f 91       	pop	r25
     22a:	8f 91       	pop	r24
     22c:	0f 90       	pop	r0
     22e:	0f be       	out	0x3f, r0	; 63
     230:	0f 90       	pop	r0
     232:	1f 90       	pop	r1
     234:	18 95       	reti

00000236 <CalculateTemp>:

void CalculateTemp()
{	
     236:	0f 93       	push	r16
     238:	1f 93       	push	r17
	TIMSK ^= (1 << OCIE2);
     23a:	89 b7       	in	r24, 0x39	; 57
     23c:	80 58       	subi	r24, 0x80	; 128
     23e:	89 bf       	out	0x39, r24	; 57
	
	TWBR = (mode == standard) ? 32 : 2;
     240:	80 91 c4 00 	lds	r24, 0x00C4
     244:	90 91 c5 00 	lds	r25, 0x00C5
     248:	00 97       	sbiw	r24, 0x00	; 0
     24a:	11 f4       	brne	.+4      	; 0x250 <CalculateTemp+0x1a>
     24c:	80 e2       	ldi	r24, 0x20	; 32
     24e:	01 c0       	rjmp	.+2      	; 0x252 <CalculateTemp+0x1c>
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~(0b11 << TWPS0); // Clearing TWSP to 0
     254:	81 b1       	in	r24, 0x01	; 1
     256:	8c 7f       	andi	r24, 0xFC	; 252
     258:	81 b9       	out	0x01, r24	; 1
	TWCR |= (1 << TWEN); // Enable TWI, generating the SCLK
     25a:	86 b7       	in	r24, 0x36	; 54
     25c:	84 60       	ori	r24, 0x04	; 4
     25e:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     260:	89 ef       	ldi	r24, 0xF9	; 249
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <CalculateTemp+0x2e>
     268:	00 c0       	rjmp	.+0      	; 0x26a <CalculateTemp+0x34>
     26a:	00 00       	nop
	_delay_ms(1);
	
	twi_master_tx_rx(0x44, sendData, 2, data, 6);
     26c:	84 e4       	ldi	r24, 0x44	; 68
     26e:	60 ed       	ldi	r22, 0xD0	; 208
     270:	70 e0       	ldi	r23, 0x00	; 0
     272:	42 e0       	ldi	r20, 0x02	; 2
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	28 ed       	ldi	r18, 0xD8	; 216
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	06 e0       	ldi	r16, 0x06	; 6
     27c:	10 e0       	ldi	r17, 0x00	; 0
     27e:	0e 94 57 05 	call	0xaae	; 0xaae <twi_master_tx_rx>
	
	temp = (data[0] * 256 + data[1]);
     282:	70 91 d8 00 	lds	r23, 0x00D8
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	80 91 d9 00 	lds	r24, 0x00D9
     28c:	68 0f       	add	r22, r24
     28e:	71 1d       	adc	r23, r1
     290:	88 27       	eor	r24, r24
     292:	77 fd       	sbrc	r23, 7
     294:	80 95       	com	r24
     296:	98 2f       	mov	r25, r24
     298:	60 93 cc 00 	sts	0x00CC, r22
     29c:	70 93 cd 00 	sts	0x00CD, r23
     2a0:	80 93 ce 00 	sts	0x00CE, r24
     2a4:	90 93 cf 00 	sts	0x00CF, r25
	cTemp = ((double)(175 * temp / 65535.0) - 45) * 10;	
     2a8:	2f ea       	ldi	r18, 0xAF	; 175
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	0e 94 ff 07 	call	0xffe	; 0xffe <__mulsi3>
     2b4:	0e 94 10 07 	call	0xe20	; 0xe20 <__floatsisf>
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	3f ef       	ldi	r19, 0xFF	; 255
     2bc:	4f e7       	ldi	r20, 0x7F	; 127
     2be:	57 e4       	ldi	r21, 0x47	; 71
     2c0:	0e 94 75 06 	call	0xcea	; 0xcea <__divsf3>
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	44 e3       	ldi	r20, 0x34	; 52
     2ca:	52 e4       	ldi	r21, 0x42	; 66
     2cc:	0e 94 10 06 	call	0xc20	; 0xc20 <__subsf3>
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e2       	ldi	r20, 0x20	; 32
     2d6:	51 e4       	ldi	r21, 0x41	; 65
     2d8:	0e 94 9c 07 	call	0xf38	; 0xf38 <__mulsf3>
     2dc:	60 93 f9 01 	sts	0x01F9, r22
     2e0:	70 93 fa 01 	sts	0x01FA, r23
     2e4:	80 93 fb 01 	sts	0x01FB, r24
     2e8:	90 93 fc 01 	sts	0x01FC, r25
	
	TWBR = 0;
     2ec:	10 b8       	out	0x00, r1	; 0
	TWSR = 0;
     2ee:	11 b8       	out	0x01, r1	; 1
	TWCR = 0;
     2f0:	16 be       	out	0x36, r1	; 54
	
	TIMSK ^= (1 << OCIE2);
     2f2:	89 b7       	in	r24, 0x39	; 57
     2f4:	80 58       	subi	r24, 0x80	; 128
     2f6:	89 bf       	out	0x39, r24	; 57
}
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	08 95       	ret

000002fe <NumToArr>:
	PORTC = DecToDigit(tempArr[3]);
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
{	
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	e9 e6       	ldi	r30, 0x69	; 105
     304:	f1 e0       	ldi	r31, 0x01	; 1
	
	PORTC = DecToDigit(tempArr[3]);
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
     306:	ef 01       	movw	r28, r30
     308:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		timeArr[k] = numbr % 10;
     30a:	2a e0       	ldi	r18, 0x0A	; 10
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	b9 01       	movw	r22, r18
     310:	0e 94 1e 08 	call	0x103c	; 0x103c <__divmodhi4>
     314:	81 93       	st	Z+, r24
     316:	91 93       	st	Z+, r25
		numbr /= 10;
     318:	86 2f       	mov	r24, r22
     31a:	97 2f       	mov	r25, r23
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
     31c:	ec 17       	cp	r30, r28
     31e:	fd 07       	cpc	r31, r29
     320:	b1 f7       	brne	.-20     	; 0x30e <NumToArr+0x10>
	{		
		timeArr[k] = numbr % 10;
		numbr /= 10;
	}
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <__vector_6>:
{
	
}

ISR(TIMER1_COMPA_vect)
{
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	0f b6       	in	r0, 0x3f	; 63
     32e:	0f 92       	push	r0
     330:	11 24       	eor	r1, r1
     332:	2f 93       	push	r18
     334:	3f 93       	push	r19
     336:	4f 93       	push	r20
     338:	5f 93       	push	r21
     33a:	6f 93       	push	r22
     33c:	7f 93       	push	r23
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	af 93       	push	r26
     344:	bf 93       	push	r27
     346:	ef 93       	push	r30
     348:	ff 93       	push	r31
	if (timeMode == 0)
     34a:	80 91 de 00 	lds	r24, 0x00DE
     34e:	90 91 df 00 	lds	r25, 0x00DF
     352:	00 97       	sbiw	r24, 0x00	; 0
     354:	09 f0       	breq	.+2      	; 0x358 <__vector_6+0x30>
     356:	74 c0       	rjmp	.+232    	; 0x440 <__vector_6+0x118>
	{
		SS++;
     358:	80 91 ca 00 	lds	r24, 0x00CA
     35c:	90 91 cb 00 	lds	r25, 0x00CB
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	90 93 cb 00 	sts	0x00CB, r25
     366:	80 93 ca 00 	sts	0x00CA, r24
		if (SS == 60)
     36a:	8c 33       	cpi	r24, 0x3C	; 60
     36c:	91 05       	cpc	r25, r1
     36e:	09 f0       	breq	.+2      	; 0x372 <__vector_6+0x4a>
     370:	43 c0       	rjmp	.+134    	; 0x3f8 <__vector_6+0xd0>
		{
			MM++;
     372:	80 91 c8 00 	lds	r24, 0x00C8
     376:	90 91 c9 00 	lds	r25, 0x00C9
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	90 93 c9 00 	sts	0x00C9, r25
     380:	80 93 c8 00 	sts	0x00C8, r24
			SS = 0;
     384:	10 92 cb 00 	sts	0x00CB, r1
     388:	10 92 ca 00 	sts	0x00CA, r1
			if (MM == 60)
     38c:	8c 33       	cpi	r24, 0x3C	; 60
     38e:	91 05       	cpc	r25, r1
     390:	99 f5       	brne	.+102    	; 0x3f8 <__vector_6+0xd0>
			{
				HH++;
     392:	80 91 c6 00 	lds	r24, 0x00C6
     396:	90 91 c7 00 	lds	r25, 0x00C7
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	90 93 c7 00 	sts	0x00C7, r25
     3a0:	80 93 c6 00 	sts	0x00C6, r24
				MM = 0;
     3a4:	10 92 c9 00 	sts	0x00C9, r1
     3a8:	10 92 c8 00 	sts	0x00C8, r1
				if (HH == 24)
     3ac:	88 31       	cpi	r24, 0x18	; 24
     3ae:	91 05       	cpc	r25, r1
     3b0:	29 f4       	brne	.+10     	; 0x3bc <__vector_6+0x94>
				{
					HH = 0;
     3b2:	10 92 c7 00 	sts	0x00C7, r1
     3b6:	10 92 c6 00 	sts	0x00C6, r1
     3ba:	11 c0       	rjmp	.+34     	; 0x3de <__vector_6+0xb6>
				}
				if (HH > 12)
     3bc:	80 91 c6 00 	lds	r24, 0x00C6
     3c0:	90 91 c7 00 	lds	r25, 0x00C7
     3c4:	8d 30       	cpi	r24, 0x0D	; 13
     3c6:	91 05       	cpc	r25, r1
     3c8:	44 f0       	brlt	.+16     	; 0x3da <__vector_6+0xb2>
				{
					blink = (HH - 12) * 2;
     3ca:	0c 97       	sbiw	r24, 0x0c	; 12
     3cc:	88 0f       	add	r24, r24
     3ce:	99 1f       	adc	r25, r25
     3d0:	90 93 e3 00 	sts	0x00E3, r25
     3d4:	80 93 e2 00 	sts	0x00E2, r24
     3d8:	0f c0       	rjmp	.+30     	; 0x3f8 <__vector_6+0xd0>
				}
				else if (HH == 0)
     3da:	00 97       	sbiw	r24, 0x00	; 0
     3dc:	39 f4       	brne	.+14     	; 0x3ec <__vector_6+0xc4>
				{
					blink = 24;					
     3de:	88 e1       	ldi	r24, 0x18	; 24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	90 93 e3 00 	sts	0x00E3, r25
     3e6:	80 93 e2 00 	sts	0x00E2, r24
     3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <__vector_6+0xd0>
				}
				else
				{
					blink = HH * 2;
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	90 93 e3 00 	sts	0x00E3, r25
     3f4:	80 93 e2 00 	sts	0x00E2, r24
				}	
			}
		}		
		time = (HH * 100) + MM;			
     3f8:	40 91 c6 00 	lds	r20, 0x00C6
     3fc:	50 91 c7 00 	lds	r21, 0x00C7
     400:	84 e6       	ldi	r24, 0x64	; 100
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	48 9f       	mul	r20, r24
     406:	90 01       	movw	r18, r0
     408:	49 9f       	mul	r20, r25
     40a:	30 0d       	add	r19, r0
     40c:	58 9f       	mul	r21, r24
     40e:	30 0d       	add	r19, r0
     410:	11 24       	eor	r1, r1
     412:	80 91 c8 00 	lds	r24, 0x00C8
     416:	90 91 c9 00 	lds	r25, 0x00C9
     41a:	82 0f       	add	r24, r18
     41c:	93 1f       	adc	r25, r19
     41e:	90 93 d7 00 	sts	0x00D7, r25
     422:	80 93 d6 00 	sts	0x00D6, r24
		NumToArr(time);
     426:	0e 94 7f 01 	call	0x2fe	; 0x2fe <NumToArr>
		
		if (segMode == 1)
     42a:	80 91 e4 00 	lds	r24, 0x00E4
     42e:	90 91 e5 00 	lds	r25, 0x00E5
     432:	81 30       	cpi	r24, 0x01	; 1
     434:	91 05       	cpc	r25, r1
     436:	21 f4       	brne	.+8      	; 0x440 <__vector_6+0x118>
		{			
			PORTC = 0x00;
     438:	15 ba       	out	0x15, r1	; 21
			PORTA = 0x00;
     43a:	1b ba       	out	0x1b, r1	; 27
			CalculateTemp();
     43c:	0e 94 1b 01 	call	0x236	; 0x236 <CalculateTemp>
		}
	}
	
	if (blink != 0)	
     440:	80 91 e2 00 	lds	r24, 0x00E2
     444:	90 91 e3 00 	lds	r25, 0x00E3
     448:	00 97       	sbiw	r24, 0x00	; 0
     44a:	69 f0       	breq	.+26     	; 0x466 <__stack+0x7>
	{
		PORTD ^= RED | GREEN | BLUE;
     44c:	92 b3       	in	r25, 0x12	; 18
     44e:	80 eb       	ldi	r24, 0xB0	; 176
     450:	89 27       	eor	r24, r25
     452:	82 bb       	out	0x12, r24	; 18
		blink--;
     454:	80 91 e2 00 	lds	r24, 0x00E2
     458:	90 91 e3 00 	lds	r25, 0x00E3
     45c:	01 97       	sbiw	r24, 0x01	; 1
     45e:	90 93 e3 00 	sts	0x00E3, r25
     462:	80 93 e2 00 	sts	0x00E2, r24
	}
}
     466:	ff 91       	pop	r31
     468:	ef 91       	pop	r30
     46a:	bf 91       	pop	r27
     46c:	af 91       	pop	r26
     46e:	9f 91       	pop	r25
     470:	8f 91       	pop	r24
     472:	7f 91       	pop	r23
     474:	6f 91       	pop	r22
     476:	5f 91       	pop	r21
     478:	4f 91       	pop	r20
     47a:	3f 91       	pop	r19
     47c:	2f 91       	pop	r18
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <TempToArr>:
	}
}

void TempToArr(int tempr)
{	
	tempArr[0] = 12;
     488:	2c e0       	ldi	r18, 0x0C	; 12
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	30 93 f2 01 	sts	0x01F2, r19
     490:	20 93 f1 01 	sts	0x01F1, r18
	for (int k = 1; k < DIGITS; k++)
	{		
		tempArr[k] = tempr % 10;
     494:	2a e0       	ldi	r18, 0x0A	; 10
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	b9 01       	movw	r22, r18
     49a:	0e 94 1e 08 	call	0x103c	; 0x103c <__divmodhi4>
     49e:	90 93 f4 01 	sts	0x01F4, r25
     4a2:	80 93 f3 01 	sts	0x01F3, r24
     4a6:	cb 01       	movw	r24, r22
     4a8:	b9 01       	movw	r22, r18
     4aa:	0e 94 1e 08 	call	0x103c	; 0x103c <__divmodhi4>
     4ae:	90 93 f6 01 	sts	0x01F6, r25
     4b2:	80 93 f5 01 	sts	0x01F5, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	b9 01       	movw	r22, r18
     4ba:	0e 94 1e 08 	call	0x103c	; 0x103c <__divmodhi4>
     4be:	90 93 f8 01 	sts	0x01F8, r25
     4c2:	80 93 f7 01 	sts	0x01F7, r24
		tempr /= 10;
	}
}
     4c6:	08 95       	ret

000004c8 <main>:
char tmp[3];
int blink = 0;
int segMode = 0;

int main(void)
{	
     4c8:	2f 92       	push	r2
     4ca:	3f 92       	push	r3
     4cc:	4f 92       	push	r4
     4ce:	5f 92       	push	r5
     4d0:	6f 92       	push	r6
     4d2:	7f 92       	push	r7
     4d4:	8f 92       	push	r8
     4d6:	9f 92       	push	r9
     4d8:	af 92       	push	r10
     4da:	bf 92       	push	r11
     4dc:	cf 92       	push	r12
     4de:	df 92       	push	r13
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
	DDRA = 0xF0;
     4ec:	80 ef       	ldi	r24, 0xF0	; 240
     4ee:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	84 bb       	out	0x14, r24	; 20
	DDRD |= RED | GREEN | BLUE | BTN1 | BTN2;
     4f4:	81 b3       	in	r24, 0x11	; 17
     4f6:	8c 6b       	ori	r24, 0xBC	; 188
     4f8:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
     4fa:	8f e0       	ldi	r24, 0x0F	; 15
     4fc:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
     4fe:	80 ec       	ldi	r24, 0xC0	; 192
     500:	8b bf       	out	0x3b, r24	; 59
     502:	89 ef       	ldi	r24, 0xF9	; 249
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	f1 f7       	brne	.-4      	; 0x506 <main+0x3e>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <main+0x44>
     50c:	00 00       	nop
	
	_delay_ms(1);
	TimerInit();
     50e:	0e 94 b9 00 	call	0x172	; 0x172 <TimerInit>
	UARTInit();
     512:	0e 94 ef 05 	call	0xbde	; 0xbde <UARTInit>
	
	sei();
     516:	78 94       	sei
			SendTime();
		}
		else
		{	
			//TempToArr(temp);
			ltoa((long int)(cTemp), tmpStr, 10);
     518:	01 e7       	ldi	r16, 0x71	; 113
     51a:	11 e0       	ldi	r17, 0x01	; 1
		
		if (timeMode == 1)
		{
			while(1)
			{			
				SendString("Enter hours (HH)");
     51c:	0f 2e       	mov	r0, r31
     51e:	f5 e6       	ldi	r31, 0x65	; 101
     520:	cf 2e       	mov	r12, r31
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	df 2e       	mov	r13, r31
     526:	f0 2d       	mov	r31, r0
				UARTSend('\r');
 				UARTSend('\n');
				tmp[0] = UARTReceive();
     528:	c6 ee       	ldi	r28, 0xE6	; 230
     52a:	d0 e0       	ldi	r29, 0x00	; 0
				tmp[1] = UARTReceive();				
     52c:	7e 01       	movw	r14, r28
     52e:	08 94       	sec
     530:	e1 1c       	adc	r14, r1
     532:	f1 1c       	adc	r15, r1
 					UARTSend('\n');
					break;
				}
				_delay_ms(100);
				
				SendString("Enter minutes (MM)");
     534:	0f 2e       	mov	r0, r31
     536:	f2 e8       	ldi	r31, 0x82	; 130
     538:	af 2e       	mov	r10, r31
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	bf 2e       	mov	r11, r31
     53e:	f0 2d       	mov	r31, r0
 					UARTSend('\n');
					break;
				}
				_delay_ms(100);
				
				SendString("Enter seconds (SS)");
     540:	0f 2e       	mov	r0, r31
     542:	f3 ea       	ldi	r31, 0xA3	; 163
     544:	8f 2e       	mov	r8, r31
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	9f 2e       	mov	r9, r31
     54a:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				SS = atoi(tmp);	
				if (SS > 59)
				{
					SendString("Wrong seconds");
     54c:	0f 2e       	mov	r0, r31
     54e:	f6 eb       	ldi	r31, 0xB6	; 182
     550:	2f 2e       	mov	r2, r31
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	3f 2e       	mov	r3, r31
     556:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				MM = atoi(tmp);				
				if (MM > 59)
				{
					SendString("Wrong minutes");
     558:	0f 2e       	mov	r0, r31
     55a:	f5 e9       	ldi	r31, 0x95	; 149
     55c:	4f 2e       	mov	r4, r31
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	5f 2e       	mov	r5, r31
     562:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				HH = atoi(tmp);				
				if (HH > 23)
				{
					SendString("Wrong hours");
     564:	0f 2e       	mov	r0, r31
     566:	f6 e7       	ldi	r31, 0x76	; 118
     568:	6f 2e       	mov	r6, r31
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	7f 2e       	mov	r7, r31
     56e:	f0 2d       	mov	r31, r0
	
	sei();
	
	while(1)
	{
		if (segMode == 0)
     570:	80 91 e4 00 	lds	r24, 0x00E4
     574:	90 91 e5 00 	lds	r25, 0x00E5
     578:	00 97       	sbiw	r24, 0x00	; 0
     57a:	19 f4       	brne	.+6      	; 0x582 <main+0xba>
		{
			SendTime();
     57c:	0e 94 82 00 	call	0x104	; 0x104 <SendTime>
     580:	1f c0       	rjmp	.+62     	; 0x5c0 <main+0xf8>
		}
		else
		{	
			//TempToArr(temp);
			ltoa((long int)(cTemp), tmpStr, 10);
     582:	60 91 f9 01 	lds	r22, 0x01F9
     586:	70 91 fa 01 	lds	r23, 0x01FA
     58a:	80 91 fb 01 	lds	r24, 0x01FB
     58e:	90 91 fc 01 	lds	r25, 0x01FC
     592:	0e 94 dd 06 	call	0xdba	; 0xdba <__fixsfsi>
     596:	a8 01       	movw	r20, r16
     598:	2a e0       	ldi	r18, 0x0A	; 10
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	0e 94 84 08 	call	0x1108	; 0x1108 <ltoa>
			TempToArr((long int)(cTemp));
     5a0:	60 91 f9 01 	lds	r22, 0x01F9
     5a4:	70 91 fa 01 	lds	r23, 0x01FA
     5a8:	80 91 fb 01 	lds	r24, 0x01FB
     5ac:	90 91 fc 01 	lds	r25, 0x01FC
     5b0:	0e 94 dd 06 	call	0xdba	; 0xdba <__fixsfsi>
     5b4:	dc 01       	movw	r26, r24
     5b6:	cb 01       	movw	r24, r22
     5b8:	0e 94 44 02 	call	0x488	; 0x488 <TempToArr>
			SendTemperature();
     5bc:	0e 94 49 00 	call	0x92	; 0x92 <SendTemperature>
			//TempTo7Seg();					
		}
		
		if (timeMode == 1)
     5c0:	80 91 de 00 	lds	r24, 0x00DE
     5c4:	90 91 df 00 	lds	r25, 0x00DF
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	91 05       	cpc	r25, r1
     5cc:	89 f6       	brne	.-94     	; 0x570 <main+0xa8>
		{
			while(1)
			{			
				SendString("Enter hours (HH)");
     5ce:	c6 01       	movw	r24, r12
     5d0:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
				UARTSend('\r');
     5d4:	8d e0       	ldi	r24, 0x0D	; 13
     5d6:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
 				UARTSend('\n');
     5da:	8a e0       	ldi	r24, 0x0A	; 10
     5dc:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
				tmp[0] = UARTReceive();
     5e0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UARTReceive>
     5e4:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     5e6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UARTReceive>
     5ea:	f7 01       	movw	r30, r14
     5ec:	80 83       	st	Z, r24
				HH = atoi(tmp);				
     5ee:	ce 01       	movw	r24, r28
     5f0:	0e 94 45 08 	call	0x108a	; 0x108a <atoi>
     5f4:	90 93 c7 00 	sts	0x00C7, r25
     5f8:	80 93 c6 00 	sts	0x00C6, r24
				if (HH > 23)
     5fc:	88 31       	cpi	r24, 0x18	; 24
     5fe:	91 05       	cpc	r25, r1
     600:	54 f0       	brlt	.+20     	; 0x616 <main+0x14e>
				{
					SendString("Wrong hours");
     602:	c3 01       	movw	r24, r6
     604:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
					UARTSend('\r');
     608:	8d e0       	ldi	r24, 0x0D	; 13
     60a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
 					UARTSend('\n');
     60e:	8a e0       	ldi	r24, 0x0A	; 10
     610:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
					break;
     614:	ad cf       	rjmp	.-166    	; 0x570 <main+0xa8>
     616:	87 ea       	ldi	r24, 0xA7	; 167
     618:	91 e6       	ldi	r25, 0x61	; 97
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	f1 f7       	brne	.-4      	; 0x61a <main+0x152>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <main+0x158>
     620:	00 00       	nop
				}
				_delay_ms(100);
				
				SendString("Enter minutes (MM)");
     622:	c5 01       	movw	r24, r10
     624:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
				UARTSend('\r');
     628:	8d e0       	ldi	r24, 0x0D	; 13
     62a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
 				UARTSend('\n');				
     62e:	8a e0       	ldi	r24, 0x0A	; 10
     630:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
				tmp[0] = UARTReceive();
     634:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UARTReceive>
     638:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     63a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UARTReceive>
     63e:	f7 01       	movw	r30, r14
     640:	80 83       	st	Z, r24
				MM = atoi(tmp);				
     642:	ce 01       	movw	r24, r28
     644:	0e 94 45 08 	call	0x108a	; 0x108a <atoi>
     648:	90 93 c9 00 	sts	0x00C9, r25
     64c:	80 93 c8 00 	sts	0x00C8, r24
				if (MM > 59)
     650:	8c 33       	cpi	r24, 0x3C	; 60
     652:	91 05       	cpc	r25, r1
     654:	54 f0       	brlt	.+20     	; 0x66a <main+0x1a2>
				{
					SendString("Wrong minutes");
     656:	c2 01       	movw	r24, r4
     658:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
					UARTSend('\r');
     65c:	8d e0       	ldi	r24, 0x0D	; 13
     65e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
 					UARTSend('\n');
     662:	8a e0       	ldi	r24, 0x0A	; 10
     664:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
					break;
     668:	83 cf       	rjmp	.-250    	; 0x570 <main+0xa8>
     66a:	87 ea       	ldi	r24, 0xA7	; 167
     66c:	91 e6       	ldi	r25, 0x61	; 97
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <main+0x1a6>
     672:	00 c0       	rjmp	.+0      	; 0x674 <main+0x1ac>
     674:	00 00       	nop
				}
				_delay_ms(100);
				
				SendString("Enter seconds (SS)");
     676:	c4 01       	movw	r24, r8
     678:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
				UARTSend('\r');
     67c:	8d e0       	ldi	r24, 0x0D	; 13
     67e:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
 				UARTSend('\n');				
     682:	8a e0       	ldi	r24, 0x0A	; 10
     684:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
				tmp[0] = UARTReceive();
     688:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UARTReceive>
     68c:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     68e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <UARTReceive>
     692:	f7 01       	movw	r30, r14
     694:	80 83       	st	Z, r24
				SS = atoi(tmp);	
     696:	ce 01       	movw	r24, r28
     698:	0e 94 45 08 	call	0x108a	; 0x108a <atoi>
     69c:	90 93 cb 00 	sts	0x00CB, r25
     6a0:	80 93 ca 00 	sts	0x00CA, r24
				if (SS > 59)
     6a4:	8c 33       	cpi	r24, 0x3C	; 60
     6a6:	91 05       	cpc	r25, r1
     6a8:	54 f0       	brlt	.+20     	; 0x6be <main+0x1f6>
				{
					SendString("Wrong seconds");
     6aa:	c1 01       	movw	r24, r2
     6ac:	0e 94 01 06 	call	0xc02	; 0xc02 <SendString>
					UARTSend('\r');
     6b0:	8d e0       	ldi	r24, 0x0D	; 13
     6b2:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
 					UARTSend('\n');
     6b6:	8a e0       	ldi	r24, 0x0A	; 10
     6b8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
					break;
     6bc:	59 cf       	rjmp	.-334    	; 0x570 <main+0xa8>
     6be:	87 ea       	ldi	r24, 0xA7	; 167
     6c0:	91 e6       	ldi	r25, 0x61	; 97
     6c2:	01 97       	sbiw	r24, 0x01	; 1
     6c4:	f1 f7       	brne	.-4      	; 0x6c2 <main+0x1fa>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <main+0x200>
     6c8:	00 00       	nop
				}	
				_delay_ms(100);
				timeMode = 0;	
     6ca:	10 92 df 00 	sts	0x00DF, r1
     6ce:	10 92 de 00 	sts	0x00DE, r1
     6d2:	4e cf       	rjmp	.-356    	; 0x570 <main+0xa8>

000006d4 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
     6d4:	87 30       	cpi	r24, 0x07	; 7
     6d6:	71 f1       	breq	.+92     	; 0x734 <DecToDigit+0x60>
     6d8:	88 30       	cpi	r24, 0x08	; 8
     6da:	70 f4       	brcc	.+28     	; 0x6f8 <DecToDigit+0x24>
     6dc:	83 30       	cpi	r24, 0x03	; 3
     6de:	11 f1       	breq	.+68     	; 0x724 <DecToDigit+0x50>
     6e0:	84 30       	cpi	r24, 0x04	; 4
     6e2:	28 f4       	brcc	.+10     	; 0x6ee <DecToDigit+0x1a>
     6e4:	81 30       	cpi	r24, 0x01	; 1
     6e6:	d1 f1       	breq	.+116    	; 0x75c <DecToDigit+0x88>
     6e8:	82 30       	cpi	r24, 0x02	; 2
     6ea:	d0 f4       	brcc	.+52     	; 0x720 <DecToDigit+0x4c>
     6ec:	17 c0       	rjmp	.+46     	; 0x71c <DecToDigit+0x48>
     6ee:	85 30       	cpi	r24, 0x05	; 5
     6f0:	e9 f0       	breq	.+58     	; 0x72c <DecToDigit+0x58>
     6f2:	86 30       	cpi	r24, 0x06	; 6
     6f4:	e8 f4       	brcc	.+58     	; 0x730 <DecToDigit+0x5c>
     6f6:	18 c0       	rjmp	.+48     	; 0x728 <DecToDigit+0x54>
     6f8:	8b 30       	cpi	r24, 0x0B	; 11
     6fa:	21 f1       	breq	.+72     	; 0x744 <DecToDigit+0x70>
     6fc:	8c 30       	cpi	r24, 0x0C	; 12
     6fe:	28 f4       	brcc	.+10     	; 0x70a <DecToDigit+0x36>
     700:	89 30       	cpi	r24, 0x09	; 9
     702:	e1 f0       	breq	.+56     	; 0x73c <DecToDigit+0x68>
     704:	8a 30       	cpi	r24, 0x0A	; 10
     706:	e0 f4       	brcc	.+56     	; 0x740 <DecToDigit+0x6c>
     708:	17 c0       	rjmp	.+46     	; 0x738 <DecToDigit+0x64>
     70a:	8d 30       	cpi	r24, 0x0D	; 13
     70c:	f9 f0       	breq	.+62     	; 0x74c <DecToDigit+0x78>
     70e:	8d 30       	cpi	r24, 0x0D	; 13
     710:	d8 f0       	brcs	.+54     	; 0x748 <DecToDigit+0x74>
     712:	8e 30       	cpi	r24, 0x0E	; 14
     714:	e9 f0       	breq	.+58     	; 0x750 <DecToDigit+0x7c>
     716:	8f 30       	cpi	r24, 0x0F	; 15
     718:	f9 f4       	brne	.+62     	; 0x758 <DecToDigit+0x84>
     71a:	1c c0       	rjmp	.+56     	; 0x754 <DecToDigit+0x80>
	{
		case 0:
			Digit = 0b01011111;				
     71c:	8f e5       	ldi	r24, 0x5F	; 95
     71e:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
     720:	8b e3       	ldi	r24, 0x3B	; 59
			break;
     722:	08 95       	ret
		case 3:
			Digit = 0b00101111;
     724:	8f e2       	ldi	r24, 0x2F	; 47
			break;
     726:	08 95       	ret
		case 4:
			Digit = 0b01100110;
     728:	86 e6       	ldi	r24, 0x66	; 102
			break;
     72a:	08 95       	ret
		case 5:
			Digit = 0b01101101;
     72c:	8d e6       	ldi	r24, 0x6D	; 109
			break;
     72e:	08 95       	ret
		case 6:
			Digit = 0b01111101;
     730:	8d e7       	ldi	r24, 0x7D	; 125
			break;
     732:	08 95       	ret
		case 7:
			Digit = 0b00000111;
     734:	87 e0       	ldi	r24, 0x07	; 7
			break;
     736:	08 95       	ret
		case 8:
			Digit = 0b01111111;
     738:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
     73a:	08 95       	ret
		case 9:
			Digit = 0b01101111;
     73c:	8f e6       	ldi	r24, 0x6F	; 111
			break;
     73e:	08 95       	ret
		case 10:
			Digit = 0b01110111;
     740:	87 e7       	ldi	r24, 0x77	; 119
			break;
     742:	08 95       	ret
		case 11:
			Digit = 0b01111100;
     744:	8c e7       	ldi	r24, 0x7C	; 124
			break;
     746:	08 95       	ret
		case 12:
			Digit = 0b01011001;
     748:	89 e5       	ldi	r24, 0x59	; 89
			break;
     74a:	08 95       	ret
		case 13:
			Digit = 0b00111110;
     74c:	8e e3       	ldi	r24, 0x3E	; 62
			break;
     74e:	08 95       	ret
		case 14:
			Digit = 0b01111001;
     750:	89 e7       	ldi	r24, 0x79	; 121
			break;
     752:	08 95       	ret
		case 15:
			Digit = 0b01110001;
     754:	81 e7       	ldi	r24, 0x71	; 113
			break;
     756:	08 95       	ret
		default:
			Digit = 0b00000000;
     758:	80 e0       	ldi	r24, 0x00	; 0
			break;			
     75a:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
     75c:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
     75e:	08 95       	ret

00000760 <TempTo7Seg>:
 	UARTSend('\n');
}

void TempTo7Seg()
{	
	PORTC = DecToDigit(tempArr[0]);
     760:	80 91 f1 01 	lds	r24, 0x01F1
     764:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DecToDigit>
     768:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 7);
     76a:	80 e8       	ldi	r24, 0x80	; 128
     76c:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[1]);
     76e:	80 91 f3 01 	lds	r24, 0x01F3
     772:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DecToDigit>
     776:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 6);
     778:	80 e4       	ldi	r24, 0x40	; 64
     77a:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[2]);
     77c:	80 91 f5 01 	lds	r24, 0x01F5
     780:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DecToDigit>
     784:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 5);
     786:	80 e2       	ldi	r24, 0x20	; 32
     788:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[3]);
     78a:	80 91 f7 01 	lds	r24, 0x01F7
     78e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DecToDigit>
     792:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 4);
     794:	80 e1       	ldi	r24, 0x10	; 16
     796:	8b bb       	out	0x1b, r24	; 27
}
     798:	08 95       	ret

0000079a <__vector_3>:
		blink--;
	}
}

ISR(TIMER2_COMP_vect)
{
     79a:	1f 92       	push	r1
     79c:	0f 92       	push	r0
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	0f 92       	push	r0
     7a2:	11 24       	eor	r1, r1
     7a4:	2f 93       	push	r18
     7a6:	3f 93       	push	r19
     7a8:	4f 93       	push	r20
     7aa:	5f 93       	push	r21
     7ac:	6f 93       	push	r22
     7ae:	7f 93       	push	r23
     7b0:	8f 93       	push	r24
     7b2:	9f 93       	push	r25
     7b4:	af 93       	push	r26
     7b6:	bf 93       	push	r27
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	ef 93       	push	r30
     7be:	ff 93       	push	r31
	if (segMode == 0)
     7c0:	80 91 e4 00 	lds	r24, 0x00E4
     7c4:	90 91 e5 00 	lds	r25, 0x00E5
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	d1 f5       	brne	.+116    	; 0x840 <__vector_3+0xa6>
	{
		PORTC = 0x00;
     7cc:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     7ce:	1b ba       	out	0x1b, r1	; 27
		PORTC = DecToDigit(timeArr[j]);
     7d0:	c0 91 d2 00 	lds	r28, 0x00D2
     7d4:	d0 91 d3 00 	lds	r29, 0x00D3
     7d8:	fe 01       	movw	r30, r28
     7da:	ee 0f       	add	r30, r30
     7dc:	ff 1f       	adc	r31, r31
     7de:	e7 59       	subi	r30, 0x97	; 151
     7e0:	fe 4f       	sbci	r31, 0xFE	; 254
     7e2:	80 81       	ld	r24, Z
     7e4:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DecToDigit>
     7e8:	85 bb       	out	0x15, r24	; 21
		
		if ((j == 2) && ((SS % 2) == 0) && (segMode == 0))
     7ea:	c2 30       	cpi	r28, 0x02	; 2
     7ec:	d1 05       	cpc	r29, r1
     7ee:	69 f4       	brne	.+26     	; 0x80a <__vector_3+0x70>
     7f0:	80 91 ca 00 	lds	r24, 0x00CA
     7f4:	80 fd       	sbrc	r24, 0
     7f6:	09 c0       	rjmp	.+18     	; 0x80a <__vector_3+0x70>
     7f8:	80 91 e4 00 	lds	r24, 0x00E4
     7fc:	90 91 e5 00 	lds	r25, 0x00E5
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	19 f4       	brne	.+6      	; 0x80a <__vector_3+0x70>
		{			
			PORTC ^= 0b10000000;	
     804:	85 b3       	in	r24, 0x15	; 21
     806:	80 58       	subi	r24, 0x80	; 128
     808:	85 bb       	out	0x15, r24	; 21
		}	
			
		PORTA = (1 << (7 - j));			
     80a:	80 91 d2 00 	lds	r24, 0x00D2
     80e:	90 91 d3 00 	lds	r25, 0x00D3
     812:	27 e0       	ldi	r18, 0x07	; 7
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	28 1b       	sub	r18, r24
     818:	39 0b       	sbc	r19, r25
     81a:	41 e0       	ldi	r20, 0x01	; 1
     81c:	50 e0       	ldi	r21, 0x00	; 0
     81e:	ba 01       	movw	r22, r20
     820:	02 c0       	rjmp	.+4      	; 0x826 <__vector_3+0x8c>
     822:	66 0f       	add	r22, r22
     824:	77 1f       	adc	r23, r23
     826:	2a 95       	dec	r18
     828:	e2 f7       	brpl	.-8      	; 0x822 <__vector_3+0x88>
     82a:	6b bb       	out	0x1b, r22	; 27
		j++;
     82c:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
     82e:	64 e0       	ldi	r22, 0x04	; 4
     830:	70 e0       	ldi	r23, 0x00	; 0
     832:	0e 94 1e 08 	call	0x103c	; 0x103c <__divmodhi4>
     836:	90 93 d3 00 	sts	0x00D3, r25
     83a:	80 93 d2 00 	sts	0x00D2, r24
     83e:	2d c0       	rjmp	.+90     	; 0x89a <__vector_3+0x100>
	}	
	else
	{
		PORTC = 0x00;
     840:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     842:	1b ba       	out	0x1b, r1	; 27
		PORTC = DecToDigit(tempArr[j]);
     844:	c0 91 d2 00 	lds	r28, 0x00D2
     848:	d0 91 d3 00 	lds	r29, 0x00D3
     84c:	fe 01       	movw	r30, r28
     84e:	ee 0f       	add	r30, r30
     850:	ff 1f       	adc	r31, r31
     852:	ef 50       	subi	r30, 0x0F	; 15
     854:	fe 4f       	sbci	r31, 0xFE	; 254
     856:	80 81       	ld	r24, Z
     858:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <DecToDigit>
     85c:	85 bb       	out	0x15, r24	; 21
		
		if (j == 3)
     85e:	c3 30       	cpi	r28, 0x03	; 3
     860:	d1 05       	cpc	r29, r1
     862:	09 f4       	brne	.+2      	; 0x866 <__vector_3+0xcc>
		{			
			PORTC |= 0b10000000;	
     864:	af 9a       	sbi	0x15, 7	; 21
		}
		
		PORTA = (1 << (7 - j));			
     866:	80 91 d2 00 	lds	r24, 0x00D2
     86a:	90 91 d3 00 	lds	r25, 0x00D3
     86e:	27 e0       	ldi	r18, 0x07	; 7
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	28 1b       	sub	r18, r24
     874:	39 0b       	sbc	r19, r25
     876:	41 e0       	ldi	r20, 0x01	; 1
     878:	50 e0       	ldi	r21, 0x00	; 0
     87a:	ba 01       	movw	r22, r20
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__vector_3+0xe8>
     87e:	66 0f       	add	r22, r22
     880:	77 1f       	adc	r23, r23
     882:	2a 95       	dec	r18
     884:	e2 f7       	brpl	.-8      	; 0x87e <__vector_3+0xe4>
     886:	6b bb       	out	0x1b, r22	; 27
		j++;		
     888:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
     88a:	64 e0       	ldi	r22, 0x04	; 4
     88c:	70 e0       	ldi	r23, 0x00	; 0
     88e:	0e 94 1e 08 	call	0x103c	; 0x103c <__divmodhi4>
     892:	90 93 d3 00 	sts	0x00D3, r25
     896:	80 93 d2 00 	sts	0x00D2, r24
	}		
}
     89a:	ff 91       	pop	r31
     89c:	ef 91       	pop	r30
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	bf 91       	pop	r27
     8a4:	af 91       	pop	r26
     8a6:	9f 91       	pop	r25
     8a8:	8f 91       	pop	r24
     8aa:	7f 91       	pop	r23
     8ac:	6f 91       	pop	r22
     8ae:	5f 91       	pop	r21
     8b0:	4f 91       	pop	r20
     8b2:	3f 91       	pop	r19
     8b4:	2f 91       	pop	r18
     8b6:	0f 90       	pop	r0
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	0f 90       	pop	r0
     8bc:	1f 90       	pop	r1
     8be:	18 95       	reti

000008c0 <get_status>:
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
	PORTC &= ~0b00000011; // Clear pull-up on both lines
}

static uint8_t get_status(uint8_t status)
{
     8c0:	98 2f       	mov	r25, r24
	uint8_t st;

	while (!(TWCR & (1 << TWINT)))
     8c2:	06 b6       	in	r0, 0x36	; 54
     8c4:	07 fe       	sbrs	r0, 7
     8c6:	fd cf       	rjmp	.-6      	; 0x8c2 <get_status+0x2>
		;
	if ((st = (TWSR & 0xF8)) == status)
     8c8:	81 b1       	in	r24, 0x01	; 1
     8ca:	88 7f       	andi	r24, 0xF8	; 248
     8cc:	89 17       	cp	r24, r25
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <get_status+0x12>
		return 0;
     8d0:	80 e0       	ldi	r24, 0x00	; 0
	else
		return st;
}
     8d2:	08 95       	ret

000008d4 <send_start>:

static int send_start(uint8_t status)
{
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     8d4:	94 ea       	ldi	r25, 0xA4	; 164
     8d6:	96 bf       	out	0x36, r25	; 54
	return get_status(status);
     8d8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <get_status>
}
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	08 95       	ret

000008e0 <send_stop>:

static void send_stop(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     8e0:	84 e9       	ldi	r24, 0x94	; 148
     8e2:	86 bf       	out	0x36, r24	; 54
}
     8e4:	08 95       	ret

000008e6 <send_data>:

static int send_data(uint8_t data, uint8_t status)
{
	TWDR = data;
     8e6:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);
     8e8:	84 e8       	ldi	r24, 0x84	; 132
     8ea:	86 bf       	out	0x36, r24	; 54
	return get_status(status);
     8ec:	86 2f       	mov	r24, r22
     8ee:	0e 94 60 04 	call	0x8c0	; 0x8c0 <get_status>
}
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	08 95       	ret

000008f6 <recv_data>:

static int recv_data(uint8_t *data, uint8_t status, uint8_t ack)
{
     8f6:	cf 93       	push	r28
     8f8:	df 93       	push	r29
     8fa:	ec 01       	movw	r28, r24
     8fc:	86 2f       	mov	r24, r22
	TWCR = (1 << TWINT) | (ack << TWEA) | (1 << TWEN);
     8fe:	42 95       	swap	r20
     900:	44 0f       	add	r20, r20
     902:	44 0f       	add	r20, r20
     904:	40 7c       	andi	r20, 0xC0	; 192
     906:	44 68       	ori	r20, 0x84	; 132
     908:	46 bf       	out	0x36, r20	; 54
	if (get_status(status) == 0)
     90a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <get_status>
     90e:	88 23       	and	r24, r24
     910:	29 f4       	brne	.+10     	; 0x91c <recv_data+0x26>
	{
		*data = TWDR;
     912:	83 b1       	in	r24, 0x03	; 3
     914:	88 83       	st	Y, r24
		return 0;
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	02 c0       	rjmp	.+4      	; 0x920 <recv_data+0x2a>
	}
	else
	{
		return -1;
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	3f ef       	ldi	r19, 0xFF	; 255
	}
}
     920:	82 2f       	mov	r24, r18
     922:	93 2f       	mov	r25, r19
     924:	df 91       	pop	r29
     926:	cf 91       	pop	r28
     928:	08 95       	ret

0000092a <twi_init>:
} TwiOperation;

void twi_init(TwiMode mode)
{
	// 1 = output, 0 = input
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
     92a:	94 b3       	in	r25, 0x14	; 20
     92c:	9c 7f       	andi	r25, 0xFC	; 252
     92e:	94 bb       	out	0x14, r25	; 20
	PORTC |= 0b00000011; // Internal pull-up on both lines
     930:	95 b3       	in	r25, 0x15	; 21
     932:	93 60       	ori	r25, 0x03	; 3
     934:	95 bb       	out	0x15, r25	; 21

	TWBR = (mode == standard) ? 32 : 2;
     936:	88 23       	and	r24, r24
     938:	11 f4       	brne	.+4      	; 0x93e <twi_init+0x14>
     93a:	80 e2       	ldi	r24, 0x20	; 32
     93c:	01 c0       	rjmp	.+2      	; 0x940 <twi_init+0x16>
     93e:	82 e0       	ldi	r24, 0x02	; 2
     940:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~(0b11 << TWPS0); // Clearing TWSP to 0
     942:	81 b1       	in	r24, 0x01	; 1
     944:	8c 7f       	andi	r24, 0xFC	; 252
     946:	81 b9       	out	0x01, r24	; 1

	TWCR |= (1 << TWEN); // Enable TWI, generating the SCLK
     948:	86 b7       	in	r24, 0x36	; 54
     94a:	84 60       	ori	r24, 0x04	; 4
     94c:	86 bf       	out	0x36, r24	; 54
}
     94e:	08 95       	ret

00000950 <twi_shut>:

void twi_shut(void)
{
	TWCR &= ~(1 << TWEN); // Disable TWI
     950:	86 b7       	in	r24, 0x36	; 54
     952:	8b 7f       	andi	r24, 0xFB	; 251
     954:	86 bf       	out	0x36, r24	; 54

	TWBR = 0;
     956:	10 b8       	out	0x00, r1	; 0
	TWSR &= ~(0b11 << TWPS0);
     958:	81 b1       	in	r24, 0x01	; 1
     95a:	8c 7f       	andi	r24, 0xFC	; 252
     95c:	81 b9       	out	0x01, r24	; 1

	// 1 = output, 0 = input
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
     95e:	84 b3       	in	r24, 0x14	; 20
     960:	8c 7f       	andi	r24, 0xFC	; 252
     962:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~0b00000011; // Clear pull-up on both lines
     964:	85 b3       	in	r24, 0x15	; 21
     966:	8c 7f       	andi	r24, 0xFC	; 252
     968:	85 bb       	out	0x15, r24	; 21
}
     96a:	08 95       	ret

0000096c <twi_master_tx>:
		return -1;
	}
}

int twi_master_tx(uint8_t addr, uint8_t *data, int len)
{
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	08 2f       	mov	r16, r24
     97c:	16 2f       	mov	r17, r22
     97e:	d7 2e       	mov	r13, r23
     980:	7a 01       	movw	r14, r20
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     982:	88 e0       	ldi	r24, 0x08	; 8
     984:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <send_start>
     988:	00 97       	sbiw	r24, 0x00	; 0
     98a:	29 f0       	breq	.+10     	; 0x996 <twi_master_tx+0x2a>
     98c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     990:	2f ef       	ldi	r18, 0xFF	; 255
     992:	3f ef       	ldi	r19, 0xFF	; 255
     994:	29 c0       	rjmp	.+82     	; 0x9e8 <twi_master_tx+0x7c>
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     996:	80 2f       	mov	r24, r16
     998:	88 0f       	add	r24, r24
     99a:	68 e1       	ldi	r22, 0x18	; 24
     99c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <send_data>
     9a0:	00 97       	sbiw	r24, 0x00	; 0
     9a2:	21 f4       	brne	.+8      	; 0x9ac <twi_master_tx+0x40>
	for (i = 0; i < len; i++)
     9a4:	1e 14       	cp	r1, r14
     9a6:	1f 04       	cpc	r1, r15
     9a8:	34 f0       	brlt	.+12     	; 0x9b6 <twi_master_tx+0x4a>
     9aa:	1a c0       	rjmp	.+52     	; 0x9e0 <twi_master_tx+0x74>
int twi_master_tx(uint8_t addr, uint8_t *data, int len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     9ac:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	19 c0       	rjmp	.+50     	; 0x9e8 <twi_master_tx+0x7c>
     9b6:	01 2f       	mov	r16, r17
     9b8:	1d 2d       	mov	r17, r13
	for (i = 0; i < len; i++)
     9ba:	c0 e0       	ldi	r28, 0x00	; 0
     9bc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (send_data(data[i], st_data_w_ack)) QUIT_TWI_OP;
     9be:	f8 01       	movw	r30, r16
     9c0:	81 91       	ld	r24, Z+
     9c2:	8f 01       	movw	r16, r30
     9c4:	68 e2       	ldi	r22, 0x28	; 40
     9c6:	0e 94 73 04 	call	0x8e6	; 0x8e6 <send_data>
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	29 f0       	breq	.+10     	; 0x9d8 <twi_master_tx+0x6c>
     9ce:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     9d2:	2f ef       	ldi	r18, 0xFF	; 255
     9d4:	3f ef       	ldi	r19, 0xFF	; 255
     9d6:	08 c0       	rjmp	.+16     	; 0x9e8 <twi_master_tx+0x7c>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
	for (i = 0; i < len; i++)
     9d8:	21 96       	adiw	r28, 0x01	; 1
     9da:	ce 15       	cp	r28, r14
     9dc:	df 05       	cpc	r29, r15
     9de:	7c f3       	brlt	.-34     	; 0x9be <twi_master_tx+0x52>
	{
		if (send_data(data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	send_stop();
     9e0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
	return 0;
     9e4:	20 e0       	ldi	r18, 0x00	; 0
     9e6:	30 e0       	ldi	r19, 0x00	; 0
}
     9e8:	82 2f       	mov	r24, r18
     9ea:	93 2f       	mov	r25, r19
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	df 90       	pop	r13
     9fa:	08 95       	ret

000009fc <twi_master_rx>:

int twi_master_rx(uint8_t addr, uint8_t *data, int len)
{
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	d8 2e       	mov	r13, r24
     a0c:	7b 01       	movw	r14, r22
     a0e:	8a 01       	movw	r16, r20
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <send_start>
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	29 f0       	breq	.+10     	; 0xa24 <twi_master_rx+0x28>
     a1a:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     a1e:	2f ef       	ldi	r18, 0xFF	; 255
     a20:	3f ef       	ldi	r19, 0xFF	; 255
     a22:	3b c0       	rjmp	.+118    	; 0xa9a <twi_master_rx+0x9e>
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     a24:	8d 2d       	mov	r24, r13
     a26:	88 0f       	add	r24, r24
     a28:	81 60       	ori	r24, 0x01	; 1
     a2a:	60 e4       	ldi	r22, 0x40	; 64
     a2c:	0e 94 73 04 	call	0x8e6	; 0x8e6 <send_data>
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	41 f4       	brne	.+16     	; 0xa44 <twi_master_rx+0x48>
	for (i = 0; i < len - 1; i++)
     a34:	01 50       	subi	r16, 0x01	; 1
     a36:	10 40       	sbci	r17, 0x00	; 0
     a38:	10 16       	cp	r1, r16
     a3a:	11 06       	cpc	r1, r17
     a3c:	44 f0       	brlt	.+16     	; 0xa4e <twi_master_rx+0x52>
     a3e:	c0 e0       	ldi	r28, 0x00	; 0
     a40:	d0 e0       	ldi	r29, 0x00	; 0
     a42:	19 c0       	rjmp	.+50     	; 0xa76 <twi_master_rx+0x7a>
int twi_master_rx(uint8_t addr, uint8_t *data, int len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     a44:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     a48:	2f ef       	ldi	r18, 0xFF	; 255
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 c0       	rjmp	.+76     	; 0xa9a <twi_master_rx+0x9e>
	for (i = 0; i < len - 1; i++)
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (recv_data(&data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
     a52:	c7 01       	movw	r24, r14
     a54:	8c 0f       	add	r24, r28
     a56:	9d 1f       	adc	r25, r29
     a58:	60 e5       	ldi	r22, 0x50	; 80
     a5a:	41 e0       	ldi	r20, 0x01	; 1
     a5c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <recv_data>
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	29 f0       	breq	.+10     	; 0xa6e <twi_master_rx+0x72>
     a64:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     a68:	2f ef       	ldi	r18, 0xFF	; 255
     a6a:	3f ef       	ldi	r19, 0xFF	; 255
     a6c:	16 c0       	rjmp	.+44     	; 0xa9a <twi_master_rx+0x9e>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
	for (i = 0; i < len - 1; i++)
     a6e:	21 96       	adiw	r28, 0x01	; 1
     a70:	c0 17       	cp	r28, r16
     a72:	d1 07       	cpc	r29, r17
     a74:	74 f3       	brlt	.-36     	; 0xa52 <twi_master_rx+0x56>
	{
		if (recv_data(&data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
	}
	if (recv_data(&data[i], st_data_r_noack, 0)) QUIT_TWI_OP;
     a76:	c7 01       	movw	r24, r14
     a78:	8c 0f       	add	r24, r28
     a7a:	9d 1f       	adc	r25, r29
     a7c:	68 e5       	ldi	r22, 0x58	; 88
     a7e:	40 e0       	ldi	r20, 0x00	; 0
     a80:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <recv_data>
     a84:	00 97       	sbiw	r24, 0x00	; 0
     a86:	29 f0       	breq	.+10     	; 0xa92 <twi_master_rx+0x96>
     a88:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     a8c:	2f ef       	ldi	r18, 0xFF	; 255
     a8e:	3f ef       	ldi	r19, 0xFF	; 255
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <twi_master_rx+0x9e>
	send_stop();
     a92:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
	return 0;
     a96:	20 e0       	ldi	r18, 0x00	; 0
     a98:	30 e0       	ldi	r19, 0x00	; 0
}
     a9a:	82 2f       	mov	r24, r18
     a9c:	93 2f       	mov	r25, r19
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	08 95       	ret

00000aae <twi_master_tx_rx>:

int twi_master_tx_rx(uint8_t addr, uint8_t *tx_data, int tx_len, uint8_t *rx_data,
			int rx_len)
{
     aae:	7f 92       	push	r7
     ab0:	8f 92       	push	r8
     ab2:	9f 92       	push	r9
     ab4:	af 92       	push	r10
     ab6:	bf 92       	push	r11
     ab8:	cf 92       	push	r12
     aba:	df 92       	push	r13
     abc:	ef 92       	push	r14
     abe:	ff 92       	push	r15
     ac0:	0f 93       	push	r16
     ac2:	1f 93       	push	r17
     ac4:	cf 93       	push	r28
     ac6:	df 93       	push	r29
     ac8:	b8 2e       	mov	r11, r24
     aca:	a6 2e       	mov	r10, r22
     acc:	77 2e       	mov	r7, r23
     ace:	7a 01       	movw	r14, r20
     ad0:	69 01       	movw	r12, r18
     ad2:	48 01       	movw	r8, r16
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     ad4:	88 e0       	ldi	r24, 0x08	; 8
     ad6:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <send_start>
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	29 f0       	breq	.+10     	; 0xae8 <twi_master_tx_rx+0x3a>
     ade:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     ae2:	2f ef       	ldi	r18, 0xFF	; 255
     ae4:	3f ef       	ldi	r19, 0xFF	; 255
     ae6:	6b c0       	rjmp	.+214    	; 0xbbe <twi_master_tx_rx+0x110>
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     ae8:	8b 2d       	mov	r24, r11
     aea:	88 0f       	add	r24, r24
     aec:	68 e1       	ldi	r22, 0x18	; 24
     aee:	0e 94 73 04 	call	0x8e6	; 0x8e6 <send_data>
     af2:	00 97       	sbiw	r24, 0x00	; 0
     af4:	21 f4       	brne	.+8      	; 0xafe <twi_master_tx_rx+0x50>
	for (i = 0; i < tx_len; i++)
     af6:	1e 14       	cp	r1, r14
     af8:	1f 04       	cpc	r1, r15
     afa:	34 f0       	brlt	.+12     	; 0xb08 <twi_master_tx_rx+0x5a>
     afc:	1a c0       	rjmp	.+52     	; 0xb32 <twi_master_tx_rx+0x84>
			int rx_len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     afe:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     b02:	2f ef       	ldi	r18, 0xFF	; 255
     b04:	3f ef       	ldi	r19, 0xFF	; 255
     b06:	5b c0       	rjmp	.+182    	; 0xbbe <twi_master_tx_rx+0x110>
     b08:	0a 2d       	mov	r16, r10
     b0a:	17 2d       	mov	r17, r7
	for (i = 0; i < tx_len; i++)
     b0c:	c0 e0       	ldi	r28, 0x00	; 0
     b0e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
     b10:	f8 01       	movw	r30, r16
     b12:	81 91       	ld	r24, Z+
     b14:	8f 01       	movw	r16, r30
     b16:	68 e2       	ldi	r22, 0x28	; 40
     b18:	0e 94 73 04 	call	0x8e6	; 0x8e6 <send_data>
     b1c:	00 97       	sbiw	r24, 0x00	; 0
     b1e:	29 f0       	breq	.+10     	; 0xb2a <twi_master_tx_rx+0x7c>
     b20:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     b24:	2f ef       	ldi	r18, 0xFF	; 255
     b26:	3f ef       	ldi	r19, 0xFF	; 255
     b28:	4a c0       	rjmp	.+148    	; 0xbbe <twi_master_tx_rx+0x110>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
	for (i = 0; i < tx_len; i++)
     b2a:	21 96       	adiw	r28, 0x01	; 1
     b2c:	ce 15       	cp	r28, r14
     b2e:	df 05       	cpc	r29, r15
     b30:	7c f3       	brlt	.-34     	; 0xb10 <twi_master_tx_rx+0x62>
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
     b32:	80 e1       	ldi	r24, 0x10	; 16
     b34:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <send_start>
     b38:	00 97       	sbiw	r24, 0x00	; 0
     b3a:	29 f0       	breq	.+10     	; 0xb46 <twi_master_tx_rx+0x98>
     b3c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	3c c0       	rjmp	.+120    	; 0xbbe <twi_master_tx_rx+0x110>
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     b46:	8b 2d       	mov	r24, r11
     b48:	88 0f       	add	r24, r24
     b4a:	81 60       	ori	r24, 0x01	; 1
     b4c:	60 e4       	ldi	r22, 0x40	; 64
     b4e:	0e 94 73 04 	call	0x8e6	; 0x8e6 <send_data>
     b52:	00 97       	sbiw	r24, 0x00	; 0
     b54:	49 f4       	brne	.+18     	; 0xb68 <twi_master_tx_rx+0xba>
	for (i = 0; i < rx_len - 1; i++)
     b56:	84 01       	movw	r16, r8
     b58:	01 50       	subi	r16, 0x01	; 1
     b5a:	10 40       	sbci	r17, 0x00	; 0
     b5c:	10 16       	cp	r1, r16
     b5e:	11 06       	cpc	r1, r17
     b60:	44 f0       	brlt	.+16     	; 0xb72 <twi_master_tx_rx+0xc4>
     b62:	c0 e0       	ldi	r28, 0x00	; 0
     b64:	d0 e0       	ldi	r29, 0x00	; 0
     b66:	19 c0       	rjmp	.+50     	; 0xb9a <twi_master_tx_rx+0xec>
	for (i = 0; i < tx_len; i++)
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     b68:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     b6c:	2f ef       	ldi	r18, 0xFF	; 255
     b6e:	3f ef       	ldi	r19, 0xFF	; 255
     b70:	26 c0       	rjmp	.+76     	; 0xbbe <twi_master_tx_rx+0x110>
	for (i = 0; i < rx_len - 1; i++)
     b72:	c0 e0       	ldi	r28, 0x00	; 0
     b74:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (recv_data(&rx_data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
     b76:	c6 01       	movw	r24, r12
     b78:	8c 0f       	add	r24, r28
     b7a:	9d 1f       	adc	r25, r29
     b7c:	60 e5       	ldi	r22, 0x50	; 80
     b7e:	41 e0       	ldi	r20, 0x01	; 1
     b80:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <recv_data>
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	29 f0       	breq	.+10     	; 0xb92 <twi_master_tx_rx+0xe4>
     b88:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     b8c:	2f ef       	ldi	r18, 0xFF	; 255
     b8e:	3f ef       	ldi	r19, 0xFF	; 255
     b90:	16 c0       	rjmp	.+44     	; 0xbbe <twi_master_tx_rx+0x110>
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
	for (i = 0; i < rx_len - 1; i++)
     b92:	21 96       	adiw	r28, 0x01	; 1
     b94:	c0 17       	cp	r28, r16
     b96:	d1 07       	cpc	r29, r17
     b98:	74 f3       	brlt	.-36     	; 0xb76 <twi_master_tx_rx+0xc8>
	{
		if (recv_data(&rx_data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
	}
	if (recv_data(&rx_data[i], st_data_r_noack, 0)) QUIT_TWI_OP;
     b9a:	c6 01       	movw	r24, r12
     b9c:	8c 0f       	add	r24, r28
     b9e:	9d 1f       	adc	r25, r29
     ba0:	68 e5       	ldi	r22, 0x58	; 88
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <recv_data>
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	29 f0       	breq	.+10     	; 0xbb6 <twi_master_tx_rx+0x108>
     bac:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
     bb0:	2f ef       	ldi	r18, 0xFF	; 255
     bb2:	3f ef       	ldi	r19, 0xFF	; 255
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <twi_master_tx_rx+0x110>
	send_stop();
     bb6:	0e 94 70 04 	call	0x8e0	; 0x8e0 <send_stop>
	return 0;
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
}
     bbe:	82 2f       	mov	r24, r18
     bc0:	93 2f       	mov	r25, r19
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	bf 90       	pop	r11
     bd4:	af 90       	pop	r10
     bd6:	9f 90       	pop	r9
     bd8:	8f 90       	pop	r8
     bda:	7f 90       	pop	r7
     bdc:	08 95       	ret

00000bde <UARTInit>:
#include "main.h"
#include "uartlib.h"

void UARTInit()
{		
	UCSRA = 0x00;
     bde:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
     be0:	8a b1       	in	r24, 0x0a	; 10
     be2:	88 61       	ori	r24, 0x18	; 24
     be4:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
     be6:	80 b5       	in	r24, 0x20	; 32
     be8:	86 68       	ori	r24, 0x86	; 134
     bea:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;
     bec:	89 e1       	ldi	r24, 0x19	; 25
     bee:	89 b9       	out	0x09, r24	; 9
}
     bf0:	08 95       	ret

00000bf2 <UARTSend>:

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
     bf2:	5d 9b       	sbis	0x0b, 5	; 11
     bf4:	fe cf       	rjmp	.-4      	; 0xbf2 <UARTSend>
	{
				
	}		
	UDR = Value;
     bf6:	8c b9       	out	0x0c, r24	; 12
}
     bf8:	08 95       	ret

00000bfa <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
     bfa:	5f 9b       	sbis	0x0b, 7	; 11
     bfc:	fe cf       	rjmp	.-4      	; 0xbfa <UARTReceive>
	{
		
	}		
	return UDR; 
     bfe:	8c b1       	in	r24, 0x0c	; 12
}
     c00:	08 95       	ret

00000c02 <SendString>:

void SendString(char* str)
{
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	ec 01       	movw	r28, r24
	while(*str != '\0')
     c08:	88 81       	ld	r24, Y
     c0a:	88 23       	and	r24, r24
     c0c:	31 f0       	breq	.+12     	; 0xc1a <SendString+0x18>
		
	}		
	return UDR; 
}

void SendString(char* str)
     c0e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
     c10:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
     c14:	89 91       	ld	r24, Y+
     c16:	88 23       	and	r24, r24
     c18:	d9 f7       	brne	.-10     	; 0xc10 <SendString+0xe>
	}
// 	//UARTSend(*str);
// 		
// 	UARTSend('\r');
// 	UARTSend('\n');
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <__subsf3>:
     c20:	50 58       	subi	r21, 0x80	; 128

00000c22 <__addsf3>:
     c22:	bb 27       	eor	r27, r27
     c24:	aa 27       	eor	r26, r26
     c26:	0e d0       	rcall	.+28     	; 0xc44 <__addsf3x>
     c28:	4d c1       	rjmp	.+666    	; 0xec4 <__fp_round>
     c2a:	3e d1       	rcall	.+636    	; 0xea8 <__fp_pscA>
     c2c:	30 f0       	brcs	.+12     	; 0xc3a <__addsf3+0x18>
     c2e:	43 d1       	rcall	.+646    	; 0xeb6 <__fp_pscB>
     c30:	20 f0       	brcs	.+8      	; 0xc3a <__addsf3+0x18>
     c32:	31 f4       	brne	.+12     	; 0xc40 <__addsf3+0x1e>
     c34:	9f 3f       	cpi	r25, 0xFF	; 255
     c36:	11 f4       	brne	.+4      	; 0xc3c <__addsf3+0x1a>
     c38:	1e f4       	brtc	.+6      	; 0xc40 <__addsf3+0x1e>
     c3a:	33 c1       	rjmp	.+614    	; 0xea2 <__fp_nan>
     c3c:	0e f4       	brtc	.+2      	; 0xc40 <__addsf3+0x1e>
     c3e:	e0 95       	com	r30
     c40:	e7 fb       	bst	r30, 7
     c42:	29 c1       	rjmp	.+594    	; 0xe96 <__fp_inf>

00000c44 <__addsf3x>:
     c44:	e9 2f       	mov	r30, r25
     c46:	4f d1       	rcall	.+670    	; 0xee6 <__fp_split3>
     c48:	80 f3       	brcs	.-32     	; 0xc2a <__addsf3+0x8>
     c4a:	ba 17       	cp	r27, r26
     c4c:	62 07       	cpc	r22, r18
     c4e:	73 07       	cpc	r23, r19
     c50:	84 07       	cpc	r24, r20
     c52:	95 07       	cpc	r25, r21
     c54:	18 f0       	brcs	.+6      	; 0xc5c <__addsf3x+0x18>
     c56:	71 f4       	brne	.+28     	; 0xc74 <__addsf3x+0x30>
     c58:	9e f5       	brtc	.+102    	; 0xcc0 <__addsf3x+0x7c>
     c5a:	67 c1       	rjmp	.+718    	; 0xf2a <__fp_zero>
     c5c:	0e f4       	brtc	.+2      	; 0xc60 <__addsf3x+0x1c>
     c5e:	e0 95       	com	r30
     c60:	0b 2e       	mov	r0, r27
     c62:	ba 2f       	mov	r27, r26
     c64:	a0 2d       	mov	r26, r0
     c66:	0b 01       	movw	r0, r22
     c68:	b9 01       	movw	r22, r18
     c6a:	90 01       	movw	r18, r0
     c6c:	0c 01       	movw	r0, r24
     c6e:	ca 01       	movw	r24, r20
     c70:	a0 01       	movw	r20, r0
     c72:	11 24       	eor	r1, r1
     c74:	ff 27       	eor	r31, r31
     c76:	59 1b       	sub	r21, r25
     c78:	99 f0       	breq	.+38     	; 0xca0 <__addsf3x+0x5c>
     c7a:	59 3f       	cpi	r21, 0xF9	; 249
     c7c:	50 f4       	brcc	.+20     	; 0xc92 <__addsf3x+0x4e>
     c7e:	50 3e       	cpi	r21, 0xE0	; 224
     c80:	68 f1       	brcs	.+90     	; 0xcdc <__addsf3x+0x98>
     c82:	1a 16       	cp	r1, r26
     c84:	f0 40       	sbci	r31, 0x00	; 0
     c86:	a2 2f       	mov	r26, r18
     c88:	23 2f       	mov	r18, r19
     c8a:	34 2f       	mov	r19, r20
     c8c:	44 27       	eor	r20, r20
     c8e:	58 5f       	subi	r21, 0xF8	; 248
     c90:	f3 cf       	rjmp	.-26     	; 0xc78 <__addsf3x+0x34>
     c92:	46 95       	lsr	r20
     c94:	37 95       	ror	r19
     c96:	27 95       	ror	r18
     c98:	a7 95       	ror	r26
     c9a:	f0 40       	sbci	r31, 0x00	; 0
     c9c:	53 95       	inc	r21
     c9e:	c9 f7       	brne	.-14     	; 0xc92 <__addsf3x+0x4e>
     ca0:	7e f4       	brtc	.+30     	; 0xcc0 <__addsf3x+0x7c>
     ca2:	1f 16       	cp	r1, r31
     ca4:	ba 0b       	sbc	r27, r26
     ca6:	62 0b       	sbc	r22, r18
     ca8:	73 0b       	sbc	r23, r19
     caa:	84 0b       	sbc	r24, r20
     cac:	ba f0       	brmi	.+46     	; 0xcdc <__addsf3x+0x98>
     cae:	91 50       	subi	r25, 0x01	; 1
     cb0:	a1 f0       	breq	.+40     	; 0xcda <__addsf3x+0x96>
     cb2:	ff 0f       	add	r31, r31
     cb4:	bb 1f       	adc	r27, r27
     cb6:	66 1f       	adc	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	88 1f       	adc	r24, r24
     cbc:	c2 f7       	brpl	.-16     	; 0xcae <__addsf3x+0x6a>
     cbe:	0e c0       	rjmp	.+28     	; 0xcdc <__addsf3x+0x98>
     cc0:	ba 0f       	add	r27, r26
     cc2:	62 1f       	adc	r22, r18
     cc4:	73 1f       	adc	r23, r19
     cc6:	84 1f       	adc	r24, r20
     cc8:	48 f4       	brcc	.+18     	; 0xcdc <__addsf3x+0x98>
     cca:	87 95       	ror	r24
     ccc:	77 95       	ror	r23
     cce:	67 95       	ror	r22
     cd0:	b7 95       	ror	r27
     cd2:	f7 95       	ror	r31
     cd4:	9e 3f       	cpi	r25, 0xFE	; 254
     cd6:	08 f0       	brcs	.+2      	; 0xcda <__addsf3x+0x96>
     cd8:	b3 cf       	rjmp	.-154    	; 0xc40 <__addsf3+0x1e>
     cda:	93 95       	inc	r25
     cdc:	88 0f       	add	r24, r24
     cde:	08 f0       	brcs	.+2      	; 0xce2 <__addsf3x+0x9e>
     ce0:	99 27       	eor	r25, r25
     ce2:	ee 0f       	add	r30, r30
     ce4:	97 95       	ror	r25
     ce6:	87 95       	ror	r24
     ce8:	08 95       	ret

00000cea <__divsf3>:
     cea:	0c d0       	rcall	.+24     	; 0xd04 <__divsf3x>
     cec:	eb c0       	rjmp	.+470    	; 0xec4 <__fp_round>
     cee:	e3 d0       	rcall	.+454    	; 0xeb6 <__fp_pscB>
     cf0:	40 f0       	brcs	.+16     	; 0xd02 <__divsf3+0x18>
     cf2:	da d0       	rcall	.+436    	; 0xea8 <__fp_pscA>
     cf4:	30 f0       	brcs	.+12     	; 0xd02 <__divsf3+0x18>
     cf6:	21 f4       	brne	.+8      	; 0xd00 <__divsf3+0x16>
     cf8:	5f 3f       	cpi	r21, 0xFF	; 255
     cfa:	19 f0       	breq	.+6      	; 0xd02 <__divsf3+0x18>
     cfc:	cc c0       	rjmp	.+408    	; 0xe96 <__fp_inf>
     cfe:	51 11       	cpse	r21, r1
     d00:	15 c1       	rjmp	.+554    	; 0xf2c <__fp_szero>
     d02:	cf c0       	rjmp	.+414    	; 0xea2 <__fp_nan>

00000d04 <__divsf3x>:
     d04:	f0 d0       	rcall	.+480    	; 0xee6 <__fp_split3>
     d06:	98 f3       	brcs	.-26     	; 0xcee <__divsf3+0x4>

00000d08 <__divsf3_pse>:
     d08:	99 23       	and	r25, r25
     d0a:	c9 f3       	breq	.-14     	; 0xcfe <__divsf3+0x14>
     d0c:	55 23       	and	r21, r21
     d0e:	b1 f3       	breq	.-20     	; 0xcfc <__divsf3+0x12>
     d10:	95 1b       	sub	r25, r21
     d12:	55 0b       	sbc	r21, r21
     d14:	bb 27       	eor	r27, r27
     d16:	aa 27       	eor	r26, r26
     d18:	62 17       	cp	r22, r18
     d1a:	73 07       	cpc	r23, r19
     d1c:	84 07       	cpc	r24, r20
     d1e:	38 f0       	brcs	.+14     	; 0xd2e <__divsf3_pse+0x26>
     d20:	9f 5f       	subi	r25, 0xFF	; 255
     d22:	5f 4f       	sbci	r21, 0xFF	; 255
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	44 1f       	adc	r20, r20
     d2a:	aa 1f       	adc	r26, r26
     d2c:	a9 f3       	breq	.-22     	; 0xd18 <__divsf3_pse+0x10>
     d2e:	33 d0       	rcall	.+102    	; 0xd96 <__divsf3_pse+0x8e>
     d30:	0e 2e       	mov	r0, r30
     d32:	3a f0       	brmi	.+14     	; 0xd42 <__divsf3_pse+0x3a>
     d34:	e0 e8       	ldi	r30, 0x80	; 128
     d36:	30 d0       	rcall	.+96     	; 0xd98 <__divsf3_pse+0x90>
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	50 40       	sbci	r21, 0x00	; 0
     d3c:	e6 95       	lsr	r30
     d3e:	00 1c       	adc	r0, r0
     d40:	ca f7       	brpl	.-14     	; 0xd34 <__divsf3_pse+0x2c>
     d42:	29 d0       	rcall	.+82     	; 0xd96 <__divsf3_pse+0x8e>
     d44:	fe 2f       	mov	r31, r30
     d46:	27 d0       	rcall	.+78     	; 0xd96 <__divsf3_pse+0x8e>
     d48:	66 0f       	add	r22, r22
     d4a:	77 1f       	adc	r23, r23
     d4c:	88 1f       	adc	r24, r24
     d4e:	bb 1f       	adc	r27, r27
     d50:	26 17       	cp	r18, r22
     d52:	37 07       	cpc	r19, r23
     d54:	48 07       	cpc	r20, r24
     d56:	ab 07       	cpc	r26, r27
     d58:	b0 e8       	ldi	r27, 0x80	; 128
     d5a:	09 f0       	breq	.+2      	; 0xd5e <__divsf3_pse+0x56>
     d5c:	bb 0b       	sbc	r27, r27
     d5e:	80 2d       	mov	r24, r0
     d60:	bf 01       	movw	r22, r30
     d62:	ff 27       	eor	r31, r31
     d64:	93 58       	subi	r25, 0x83	; 131
     d66:	5f 4f       	sbci	r21, 0xFF	; 255
     d68:	2a f0       	brmi	.+10     	; 0xd74 <__divsf3_pse+0x6c>
     d6a:	9e 3f       	cpi	r25, 0xFE	; 254
     d6c:	51 05       	cpc	r21, r1
     d6e:	68 f0       	brcs	.+26     	; 0xd8a <__divsf3_pse+0x82>
     d70:	92 c0       	rjmp	.+292    	; 0xe96 <__fp_inf>
     d72:	dc c0       	rjmp	.+440    	; 0xf2c <__fp_szero>
     d74:	5f 3f       	cpi	r21, 0xFF	; 255
     d76:	ec f3       	brlt	.-6      	; 0xd72 <__divsf3_pse+0x6a>
     d78:	98 3e       	cpi	r25, 0xE8	; 232
     d7a:	dc f3       	brlt	.-10     	; 0xd72 <__divsf3_pse+0x6a>
     d7c:	86 95       	lsr	r24
     d7e:	77 95       	ror	r23
     d80:	67 95       	ror	r22
     d82:	b7 95       	ror	r27
     d84:	f7 95       	ror	r31
     d86:	9f 5f       	subi	r25, 0xFF	; 255
     d88:	c9 f7       	brne	.-14     	; 0xd7c <__divsf3_pse+0x74>
     d8a:	88 0f       	add	r24, r24
     d8c:	91 1d       	adc	r25, r1
     d8e:	96 95       	lsr	r25
     d90:	87 95       	ror	r24
     d92:	97 f9       	bld	r25, 7
     d94:	08 95       	ret
     d96:	e1 e0       	ldi	r30, 0x01	; 1
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	bb 1f       	adc	r27, r27
     da0:	62 17       	cp	r22, r18
     da2:	73 07       	cpc	r23, r19
     da4:	84 07       	cpc	r24, r20
     da6:	ba 07       	cpc	r27, r26
     da8:	20 f0       	brcs	.+8      	; 0xdb2 <__divsf3_pse+0xaa>
     daa:	62 1b       	sub	r22, r18
     dac:	73 0b       	sbc	r23, r19
     dae:	84 0b       	sbc	r24, r20
     db0:	ba 0b       	sbc	r27, r26
     db2:	ee 1f       	adc	r30, r30
     db4:	88 f7       	brcc	.-30     	; 0xd98 <__divsf3_pse+0x90>
     db6:	e0 95       	com	r30
     db8:	08 95       	ret

00000dba <__fixsfsi>:
     dba:	04 d0       	rcall	.+8      	; 0xdc4 <__fixunssfsi>
     dbc:	68 94       	set
     dbe:	b1 11       	cpse	r27, r1
     dc0:	b5 c0       	rjmp	.+362    	; 0xf2c <__fp_szero>
     dc2:	08 95       	ret

00000dc4 <__fixunssfsi>:
     dc4:	98 d0       	rcall	.+304    	; 0xef6 <__fp_splitA>
     dc6:	88 f0       	brcs	.+34     	; 0xdea <__fixunssfsi+0x26>
     dc8:	9f 57       	subi	r25, 0x7F	; 127
     dca:	90 f0       	brcs	.+36     	; 0xdf0 <__fixunssfsi+0x2c>
     dcc:	b9 2f       	mov	r27, r25
     dce:	99 27       	eor	r25, r25
     dd0:	b7 51       	subi	r27, 0x17	; 23
     dd2:	a0 f0       	brcs	.+40     	; 0xdfc <__fixunssfsi+0x38>
     dd4:	d1 f0       	breq	.+52     	; 0xe0a <__fixunssfsi+0x46>
     dd6:	66 0f       	add	r22, r22
     dd8:	77 1f       	adc	r23, r23
     dda:	88 1f       	adc	r24, r24
     ddc:	99 1f       	adc	r25, r25
     dde:	1a f0       	brmi	.+6      	; 0xde6 <__fixunssfsi+0x22>
     de0:	ba 95       	dec	r27
     de2:	c9 f7       	brne	.-14     	; 0xdd6 <__fixunssfsi+0x12>
     de4:	12 c0       	rjmp	.+36     	; 0xe0a <__fixunssfsi+0x46>
     de6:	b1 30       	cpi	r27, 0x01	; 1
     de8:	81 f0       	breq	.+32     	; 0xe0a <__fixunssfsi+0x46>
     dea:	9f d0       	rcall	.+318    	; 0xf2a <__fp_zero>
     dec:	b1 e0       	ldi	r27, 0x01	; 1
     dee:	08 95       	ret
     df0:	9c c0       	rjmp	.+312    	; 0xf2a <__fp_zero>
     df2:	67 2f       	mov	r22, r23
     df4:	78 2f       	mov	r23, r24
     df6:	88 27       	eor	r24, r24
     df8:	b8 5f       	subi	r27, 0xF8	; 248
     dfa:	39 f0       	breq	.+14     	; 0xe0a <__fixunssfsi+0x46>
     dfc:	b9 3f       	cpi	r27, 0xF9	; 249
     dfe:	cc f3       	brlt	.-14     	; 0xdf2 <__fixunssfsi+0x2e>
     e00:	86 95       	lsr	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b3 95       	inc	r27
     e08:	d9 f7       	brne	.-10     	; 0xe00 <__fixunssfsi+0x3c>
     e0a:	3e f4       	brtc	.+14     	; 0xe1a <__fixunssfsi+0x56>
     e0c:	90 95       	com	r25
     e0e:	80 95       	com	r24
     e10:	70 95       	com	r23
     e12:	61 95       	neg	r22
     e14:	7f 4f       	sbci	r23, 0xFF	; 255
     e16:	8f 4f       	sbci	r24, 0xFF	; 255
     e18:	9f 4f       	sbci	r25, 0xFF	; 255
     e1a:	08 95       	ret

00000e1c <__floatunsisf>:
     e1c:	e8 94       	clt
     e1e:	09 c0       	rjmp	.+18     	; 0xe32 <__floatsisf+0x12>

00000e20 <__floatsisf>:
     e20:	97 fb       	bst	r25, 7
     e22:	3e f4       	brtc	.+14     	; 0xe32 <__floatsisf+0x12>
     e24:	90 95       	com	r25
     e26:	80 95       	com	r24
     e28:	70 95       	com	r23
     e2a:	61 95       	neg	r22
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	99 23       	and	r25, r25
     e34:	a9 f0       	breq	.+42     	; 0xe60 <__floatsisf+0x40>
     e36:	f9 2f       	mov	r31, r25
     e38:	96 e9       	ldi	r25, 0x96	; 150
     e3a:	bb 27       	eor	r27, r27
     e3c:	93 95       	inc	r25
     e3e:	f6 95       	lsr	r31
     e40:	87 95       	ror	r24
     e42:	77 95       	ror	r23
     e44:	67 95       	ror	r22
     e46:	b7 95       	ror	r27
     e48:	f1 11       	cpse	r31, r1
     e4a:	f8 cf       	rjmp	.-16     	; 0xe3c <__floatsisf+0x1c>
     e4c:	fa f4       	brpl	.+62     	; 0xe8c <__floatsisf+0x6c>
     e4e:	bb 0f       	add	r27, r27
     e50:	11 f4       	brne	.+4      	; 0xe56 <__floatsisf+0x36>
     e52:	60 ff       	sbrs	r22, 0
     e54:	1b c0       	rjmp	.+54     	; 0xe8c <__floatsisf+0x6c>
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f 4f       	sbci	r24, 0xFF	; 255
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	16 c0       	rjmp	.+44     	; 0xe8c <__floatsisf+0x6c>
     e60:	88 23       	and	r24, r24
     e62:	11 f0       	breq	.+4      	; 0xe68 <__floatsisf+0x48>
     e64:	96 e9       	ldi	r25, 0x96	; 150
     e66:	11 c0       	rjmp	.+34     	; 0xe8a <__floatsisf+0x6a>
     e68:	77 23       	and	r23, r23
     e6a:	21 f0       	breq	.+8      	; 0xe74 <__floatsisf+0x54>
     e6c:	9e e8       	ldi	r25, 0x8E	; 142
     e6e:	87 2f       	mov	r24, r23
     e70:	76 2f       	mov	r23, r22
     e72:	05 c0       	rjmp	.+10     	; 0xe7e <__floatsisf+0x5e>
     e74:	66 23       	and	r22, r22
     e76:	71 f0       	breq	.+28     	; 0xe94 <__floatsisf+0x74>
     e78:	96 e8       	ldi	r25, 0x86	; 134
     e7a:	86 2f       	mov	r24, r22
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	2a f0       	brmi	.+10     	; 0xe8c <__floatsisf+0x6c>
     e82:	9a 95       	dec	r25
     e84:	66 0f       	add	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	da f7       	brpl	.-10     	; 0xe82 <__floatsisf+0x62>
     e8c:	88 0f       	add	r24, r24
     e8e:	96 95       	lsr	r25
     e90:	87 95       	ror	r24
     e92:	97 f9       	bld	r25, 7
     e94:	08 95       	ret

00000e96 <__fp_inf>:
     e96:	97 f9       	bld	r25, 7
     e98:	9f 67       	ori	r25, 0x7F	; 127
     e9a:	80 e8       	ldi	r24, 0x80	; 128
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	08 95       	ret

00000ea2 <__fp_nan>:
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	80 ec       	ldi	r24, 0xC0	; 192
     ea6:	08 95       	ret

00000ea8 <__fp_pscA>:
     ea8:	00 24       	eor	r0, r0
     eaa:	0a 94       	dec	r0
     eac:	16 16       	cp	r1, r22
     eae:	17 06       	cpc	r1, r23
     eb0:	18 06       	cpc	r1, r24
     eb2:	09 06       	cpc	r0, r25
     eb4:	08 95       	ret

00000eb6 <__fp_pscB>:
     eb6:	00 24       	eor	r0, r0
     eb8:	0a 94       	dec	r0
     eba:	12 16       	cp	r1, r18
     ebc:	13 06       	cpc	r1, r19
     ebe:	14 06       	cpc	r1, r20
     ec0:	05 06       	cpc	r0, r21
     ec2:	08 95       	ret

00000ec4 <__fp_round>:
     ec4:	09 2e       	mov	r0, r25
     ec6:	03 94       	inc	r0
     ec8:	00 0c       	add	r0, r0
     eca:	11 f4       	brne	.+4      	; 0xed0 <__fp_round+0xc>
     ecc:	88 23       	and	r24, r24
     ece:	52 f0       	brmi	.+20     	; 0xee4 <__fp_round+0x20>
     ed0:	bb 0f       	add	r27, r27
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <__fp_round+0x20>
     ed4:	bf 2b       	or	r27, r31
     ed6:	11 f4       	brne	.+4      	; 0xedc <__fp_round+0x18>
     ed8:	60 ff       	sbrs	r22, 0
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <__fp_round+0x20>
     edc:	6f 5f       	subi	r22, 0xFF	; 255
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
     ee0:	8f 4f       	sbci	r24, 0xFF	; 255
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	08 95       	ret

00000ee6 <__fp_split3>:
     ee6:	57 fd       	sbrc	r21, 7
     ee8:	90 58       	subi	r25, 0x80	; 128
     eea:	44 0f       	add	r20, r20
     eec:	55 1f       	adc	r21, r21
     eee:	59 f0       	breq	.+22     	; 0xf06 <__fp_splitA+0x10>
     ef0:	5f 3f       	cpi	r21, 0xFF	; 255
     ef2:	71 f0       	breq	.+28     	; 0xf10 <__fp_splitA+0x1a>
     ef4:	47 95       	ror	r20

00000ef6 <__fp_splitA>:
     ef6:	88 0f       	add	r24, r24
     ef8:	97 fb       	bst	r25, 7
     efa:	99 1f       	adc	r25, r25
     efc:	61 f0       	breq	.+24     	; 0xf16 <__fp_splitA+0x20>
     efe:	9f 3f       	cpi	r25, 0xFF	; 255
     f00:	79 f0       	breq	.+30     	; 0xf20 <__fp_splitA+0x2a>
     f02:	87 95       	ror	r24
     f04:	08 95       	ret
     f06:	12 16       	cp	r1, r18
     f08:	13 06       	cpc	r1, r19
     f0a:	14 06       	cpc	r1, r20
     f0c:	55 1f       	adc	r21, r21
     f0e:	f2 cf       	rjmp	.-28     	; 0xef4 <__fp_split3+0xe>
     f10:	46 95       	lsr	r20
     f12:	f1 df       	rcall	.-30     	; 0xef6 <__fp_splitA>
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <__fp_splitA+0x30>
     f16:	16 16       	cp	r1, r22
     f18:	17 06       	cpc	r1, r23
     f1a:	18 06       	cpc	r1, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	f1 cf       	rjmp	.-30     	; 0xf02 <__fp_splitA+0xc>
     f20:	86 95       	lsr	r24
     f22:	71 05       	cpc	r23, r1
     f24:	61 05       	cpc	r22, r1
     f26:	08 94       	sec
     f28:	08 95       	ret

00000f2a <__fp_zero>:
     f2a:	e8 94       	clt

00000f2c <__fp_szero>:
     f2c:	bb 27       	eor	r27, r27
     f2e:	66 27       	eor	r22, r22
     f30:	77 27       	eor	r23, r23
     f32:	cb 01       	movw	r24, r22
     f34:	97 f9       	bld	r25, 7
     f36:	08 95       	ret

00000f38 <__mulsf3>:
     f38:	0b d0       	rcall	.+22     	; 0xf50 <__mulsf3x>
     f3a:	c4 cf       	rjmp	.-120    	; 0xec4 <__fp_round>
     f3c:	b5 df       	rcall	.-150    	; 0xea8 <__fp_pscA>
     f3e:	28 f0       	brcs	.+10     	; 0xf4a <__mulsf3+0x12>
     f40:	ba df       	rcall	.-140    	; 0xeb6 <__fp_pscB>
     f42:	18 f0       	brcs	.+6      	; 0xf4a <__mulsf3+0x12>
     f44:	95 23       	and	r25, r21
     f46:	09 f0       	breq	.+2      	; 0xf4a <__mulsf3+0x12>
     f48:	a6 cf       	rjmp	.-180    	; 0xe96 <__fp_inf>
     f4a:	ab cf       	rjmp	.-170    	; 0xea2 <__fp_nan>
     f4c:	11 24       	eor	r1, r1
     f4e:	ee cf       	rjmp	.-36     	; 0xf2c <__fp_szero>

00000f50 <__mulsf3x>:
     f50:	ca df       	rcall	.-108    	; 0xee6 <__fp_split3>
     f52:	a0 f3       	brcs	.-24     	; 0xf3c <__mulsf3+0x4>

00000f54 <__mulsf3_pse>:
     f54:	95 9f       	mul	r25, r21
     f56:	d1 f3       	breq	.-12     	; 0xf4c <__mulsf3+0x14>
     f58:	95 0f       	add	r25, r21
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	55 1f       	adc	r21, r21
     f5e:	62 9f       	mul	r22, r18
     f60:	f0 01       	movw	r30, r0
     f62:	72 9f       	mul	r23, r18
     f64:	bb 27       	eor	r27, r27
     f66:	f0 0d       	add	r31, r0
     f68:	b1 1d       	adc	r27, r1
     f6a:	63 9f       	mul	r22, r19
     f6c:	aa 27       	eor	r26, r26
     f6e:	f0 0d       	add	r31, r0
     f70:	b1 1d       	adc	r27, r1
     f72:	aa 1f       	adc	r26, r26
     f74:	64 9f       	mul	r22, r20
     f76:	66 27       	eor	r22, r22
     f78:	b0 0d       	add	r27, r0
     f7a:	a1 1d       	adc	r26, r1
     f7c:	66 1f       	adc	r22, r22
     f7e:	82 9f       	mul	r24, r18
     f80:	22 27       	eor	r18, r18
     f82:	b0 0d       	add	r27, r0
     f84:	a1 1d       	adc	r26, r1
     f86:	62 1f       	adc	r22, r18
     f88:	73 9f       	mul	r23, r19
     f8a:	b0 0d       	add	r27, r0
     f8c:	a1 1d       	adc	r26, r1
     f8e:	62 1f       	adc	r22, r18
     f90:	83 9f       	mul	r24, r19
     f92:	a0 0d       	add	r26, r0
     f94:	61 1d       	adc	r22, r1
     f96:	22 1f       	adc	r18, r18
     f98:	74 9f       	mul	r23, r20
     f9a:	33 27       	eor	r19, r19
     f9c:	a0 0d       	add	r26, r0
     f9e:	61 1d       	adc	r22, r1
     fa0:	23 1f       	adc	r18, r19
     fa2:	84 9f       	mul	r24, r20
     fa4:	60 0d       	add	r22, r0
     fa6:	21 1d       	adc	r18, r1
     fa8:	82 2f       	mov	r24, r18
     faa:	76 2f       	mov	r23, r22
     fac:	6a 2f       	mov	r22, r26
     fae:	11 24       	eor	r1, r1
     fb0:	9f 57       	subi	r25, 0x7F	; 127
     fb2:	50 40       	sbci	r21, 0x00	; 0
     fb4:	8a f0       	brmi	.+34     	; 0xfd8 <__mulsf3_pse+0x84>
     fb6:	e1 f0       	breq	.+56     	; 0xff0 <__mulsf3_pse+0x9c>
     fb8:	88 23       	and	r24, r24
     fba:	4a f0       	brmi	.+18     	; 0xfce <__mulsf3_pse+0x7a>
     fbc:	ee 0f       	add	r30, r30
     fbe:	ff 1f       	adc	r31, r31
     fc0:	bb 1f       	adc	r27, r27
     fc2:	66 1f       	adc	r22, r22
     fc4:	77 1f       	adc	r23, r23
     fc6:	88 1f       	adc	r24, r24
     fc8:	91 50       	subi	r25, 0x01	; 1
     fca:	50 40       	sbci	r21, 0x00	; 0
     fcc:	a9 f7       	brne	.-22     	; 0xfb8 <__mulsf3_pse+0x64>
     fce:	9e 3f       	cpi	r25, 0xFE	; 254
     fd0:	51 05       	cpc	r21, r1
     fd2:	70 f0       	brcs	.+28     	; 0xff0 <__mulsf3_pse+0x9c>
     fd4:	60 cf       	rjmp	.-320    	; 0xe96 <__fp_inf>
     fd6:	aa cf       	rjmp	.-172    	; 0xf2c <__fp_szero>
     fd8:	5f 3f       	cpi	r21, 0xFF	; 255
     fda:	ec f3       	brlt	.-6      	; 0xfd6 <__mulsf3_pse+0x82>
     fdc:	98 3e       	cpi	r25, 0xE8	; 232
     fde:	dc f3       	brlt	.-10     	; 0xfd6 <__mulsf3_pse+0x82>
     fe0:	86 95       	lsr	r24
     fe2:	77 95       	ror	r23
     fe4:	67 95       	ror	r22
     fe6:	b7 95       	ror	r27
     fe8:	f7 95       	ror	r31
     fea:	e7 95       	ror	r30
     fec:	9f 5f       	subi	r25, 0xFF	; 255
     fee:	c1 f7       	brne	.-16     	; 0xfe0 <__mulsf3_pse+0x8c>
     ff0:	fe 2b       	or	r31, r30
     ff2:	88 0f       	add	r24, r24
     ff4:	91 1d       	adc	r25, r1
     ff6:	96 95       	lsr	r25
     ff8:	87 95       	ror	r24
     ffa:	97 f9       	bld	r25, 7
     ffc:	08 95       	ret

00000ffe <__mulsi3>:
     ffe:	62 9f       	mul	r22, r18
    1000:	d0 01       	movw	r26, r0
    1002:	73 9f       	mul	r23, r19
    1004:	f0 01       	movw	r30, r0
    1006:	82 9f       	mul	r24, r18
    1008:	e0 0d       	add	r30, r0
    100a:	f1 1d       	adc	r31, r1
    100c:	64 9f       	mul	r22, r20
    100e:	e0 0d       	add	r30, r0
    1010:	f1 1d       	adc	r31, r1
    1012:	92 9f       	mul	r25, r18
    1014:	f0 0d       	add	r31, r0
    1016:	83 9f       	mul	r24, r19
    1018:	f0 0d       	add	r31, r0
    101a:	74 9f       	mul	r23, r20
    101c:	f0 0d       	add	r31, r0
    101e:	65 9f       	mul	r22, r21
    1020:	f0 0d       	add	r31, r0
    1022:	99 27       	eor	r25, r25
    1024:	72 9f       	mul	r23, r18
    1026:	b0 0d       	add	r27, r0
    1028:	e1 1d       	adc	r30, r1
    102a:	f9 1f       	adc	r31, r25
    102c:	63 9f       	mul	r22, r19
    102e:	b0 0d       	add	r27, r0
    1030:	e1 1d       	adc	r30, r1
    1032:	f9 1f       	adc	r31, r25
    1034:	bd 01       	movw	r22, r26
    1036:	cf 01       	movw	r24, r30
    1038:	11 24       	eor	r1, r1
    103a:	08 95       	ret

0000103c <__divmodhi4>:
    103c:	97 fb       	bst	r25, 7
    103e:	09 2e       	mov	r0, r25
    1040:	07 26       	eor	r0, r23
    1042:	0a d0       	rcall	.+20     	; 0x1058 <__divmodhi4_neg1>
    1044:	77 fd       	sbrc	r23, 7
    1046:	04 d0       	rcall	.+8      	; 0x1050 <__divmodhi4_neg2>
    1048:	0c d0       	rcall	.+24     	; 0x1062 <__udivmodhi4>
    104a:	06 d0       	rcall	.+12     	; 0x1058 <__divmodhi4_neg1>
    104c:	00 20       	and	r0, r0
    104e:	1a f4       	brpl	.+6      	; 0x1056 <__divmodhi4_exit>

00001050 <__divmodhi4_neg2>:
    1050:	70 95       	com	r23
    1052:	61 95       	neg	r22
    1054:	7f 4f       	sbci	r23, 0xFF	; 255

00001056 <__divmodhi4_exit>:
    1056:	08 95       	ret

00001058 <__divmodhi4_neg1>:
    1058:	f6 f7       	brtc	.-4      	; 0x1056 <__divmodhi4_exit>
    105a:	90 95       	com	r25
    105c:	81 95       	neg	r24
    105e:	9f 4f       	sbci	r25, 0xFF	; 255
    1060:	08 95       	ret

00001062 <__udivmodhi4>:
    1062:	aa 1b       	sub	r26, r26
    1064:	bb 1b       	sub	r27, r27
    1066:	51 e1       	ldi	r21, 0x11	; 17
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <__udivmodhi4_ep>

0000106a <__udivmodhi4_loop>:
    106a:	aa 1f       	adc	r26, r26
    106c:	bb 1f       	adc	r27, r27
    106e:	a6 17       	cp	r26, r22
    1070:	b7 07       	cpc	r27, r23
    1072:	10 f0       	brcs	.+4      	; 0x1078 <__udivmodhi4_ep>
    1074:	a6 1b       	sub	r26, r22
    1076:	b7 0b       	sbc	r27, r23

00001078 <__udivmodhi4_ep>:
    1078:	88 1f       	adc	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	5a 95       	dec	r21
    107e:	a9 f7       	brne	.-22     	; 0x106a <__udivmodhi4_loop>
    1080:	80 95       	com	r24
    1082:	90 95       	com	r25
    1084:	bc 01       	movw	r22, r24
    1086:	cd 01       	movw	r24, r26
    1088:	08 95       	ret

0000108a <atoi>:
    108a:	fc 01       	movw	r30, r24
    108c:	88 27       	eor	r24, r24
    108e:	99 27       	eor	r25, r25
    1090:	e8 94       	clt
    1092:	21 91       	ld	r18, Z+
    1094:	20 32       	cpi	r18, 0x20	; 32
    1096:	e9 f3       	breq	.-6      	; 0x1092 <atoi+0x8>
    1098:	29 30       	cpi	r18, 0x09	; 9
    109a:	10 f0       	brcs	.+4      	; 0x10a0 <atoi+0x16>
    109c:	2e 30       	cpi	r18, 0x0E	; 14
    109e:	c8 f3       	brcs	.-14     	; 0x1092 <atoi+0x8>
    10a0:	2b 32       	cpi	r18, 0x2B	; 43
    10a2:	41 f0       	breq	.+16     	; 0x10b4 <atoi+0x2a>
    10a4:	2d 32       	cpi	r18, 0x2D	; 45
    10a6:	39 f4       	brne	.+14     	; 0x10b6 <atoi+0x2c>
    10a8:	68 94       	set
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <atoi+0x2a>
    10ac:	0e 94 b8 08 	call	0x1170	; 0x1170 <__mulhi_const_10>
    10b0:	82 0f       	add	r24, r18
    10b2:	91 1d       	adc	r25, r1
    10b4:	21 91       	ld	r18, Z+
    10b6:	20 53       	subi	r18, 0x30	; 48
    10b8:	2a 30       	cpi	r18, 0x0A	; 10
    10ba:	c0 f3       	brcs	.-16     	; 0x10ac <atoi+0x22>
    10bc:	1e f4       	brtc	.+6      	; 0x10c4 <atoi+0x3a>
    10be:	90 95       	com	r25
    10c0:	81 95       	neg	r24
    10c2:	9f 4f       	sbci	r25, 0xFF	; 255
    10c4:	08 95       	ret

000010c6 <itoa>:
    10c6:	fb 01       	movw	r30, r22
    10c8:	9f 01       	movw	r18, r30
    10ca:	e8 94       	clt
    10cc:	42 30       	cpi	r20, 0x02	; 2
    10ce:	c4 f0       	brlt	.+48     	; 0x1100 <itoa+0x3a>
    10d0:	45 32       	cpi	r20, 0x25	; 37
    10d2:	b4 f4       	brge	.+44     	; 0x1100 <itoa+0x3a>
    10d4:	4a 30       	cpi	r20, 0x0A	; 10
    10d6:	29 f4       	brne	.+10     	; 0x10e2 <itoa+0x1c>
    10d8:	97 fb       	bst	r25, 7
    10da:	1e f4       	brtc	.+6      	; 0x10e2 <itoa+0x1c>
    10dc:	90 95       	com	r25
    10de:	81 95       	neg	r24
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	64 2f       	mov	r22, r20
    10e4:	77 27       	eor	r23, r23
    10e6:	0e 94 31 08 	call	0x1062	; 0x1062 <__udivmodhi4>
    10ea:	80 5d       	subi	r24, 0xD0	; 208
    10ec:	8a 33       	cpi	r24, 0x3A	; 58
    10ee:	0c f0       	brlt	.+2      	; 0x10f2 <itoa+0x2c>
    10f0:	89 5d       	subi	r24, 0xD9	; 217
    10f2:	81 93       	st	Z+, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	a1 f7       	brne	.-24     	; 0x10e2 <itoa+0x1c>
    10fa:	16 f4       	brtc	.+4      	; 0x1100 <itoa+0x3a>
    10fc:	5d e2       	ldi	r21, 0x2D	; 45
    10fe:	51 93       	st	Z+, r21
    1100:	10 82       	st	Z, r1
    1102:	c9 01       	movw	r24, r18
    1104:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <strrev>

00001108 <ltoa>:
    1108:	fa 01       	movw	r30, r20
    110a:	cf 93       	push	r28
    110c:	ff 93       	push	r31
    110e:	ef 93       	push	r30
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	44 f1       	brlt	.+80     	; 0x1164 <ltoa+0x5c>
    1114:	25 32       	cpi	r18, 0x25	; 37
    1116:	34 f5       	brge	.+76     	; 0x1164 <ltoa+0x5c>
    1118:	c2 2f       	mov	r28, r18
    111a:	e8 94       	clt
    111c:	ca 30       	cpi	r28, 0x0A	; 10
    111e:	49 f4       	brne	.+18     	; 0x1132 <ltoa+0x2a>
    1120:	97 fb       	bst	r25, 7
    1122:	3e f4       	brtc	.+14     	; 0x1132 <ltoa+0x2a>
    1124:	90 95       	com	r25
    1126:	80 95       	com	r24
    1128:	70 95       	com	r23
    112a:	61 95       	neg	r22
    112c:	7f 4f       	sbci	r23, 0xFF	; 255
    112e:	8f 4f       	sbci	r24, 0xFF	; 255
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	2c 2f       	mov	r18, r28
    1134:	33 27       	eor	r19, r19
    1136:	44 27       	eor	r20, r20
    1138:	55 27       	eor	r21, r21
    113a:	ff 93       	push	r31
    113c:	ef 93       	push	r30
    113e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <__udivmodsi4>
    1142:	ef 91       	pop	r30
    1144:	ff 91       	pop	r31
    1146:	60 5d       	subi	r22, 0xD0	; 208
    1148:	6a 33       	cpi	r22, 0x3A	; 58
    114a:	0c f0       	brlt	.+2      	; 0x114e <ltoa+0x46>
    114c:	69 5d       	subi	r22, 0xD9	; 217
    114e:	61 93       	st	Z+, r22
    1150:	b9 01       	movw	r22, r18
    1152:	ca 01       	movw	r24, r20
    1154:	60 50       	subi	r22, 0x00	; 0
    1156:	70 40       	sbci	r23, 0x00	; 0
    1158:	80 40       	sbci	r24, 0x00	; 0
    115a:	90 40       	sbci	r25, 0x00	; 0
    115c:	51 f7       	brne	.-44     	; 0x1132 <ltoa+0x2a>
    115e:	16 f4       	brtc	.+4      	; 0x1164 <ltoa+0x5c>
    1160:	cd e2       	ldi	r28, 0x2D	; 45
    1162:	c1 93       	st	Z+, r28
    1164:	10 82       	st	Z, r1
    1166:	8f 91       	pop	r24
    1168:	9f 91       	pop	r25
    116a:	cf 91       	pop	r28
    116c:	0c 94 c0 08 	jmp	0x1180	; 0x1180 <strrev>

00001170 <__mulhi_const_10>:
    1170:	7a e0       	ldi	r23, 0x0A	; 10
    1172:	97 9f       	mul	r25, r23
    1174:	90 2d       	mov	r25, r0
    1176:	87 9f       	mul	r24, r23
    1178:	80 2d       	mov	r24, r0
    117a:	91 0d       	add	r25, r1
    117c:	11 24       	eor	r1, r1
    117e:	08 95       	ret

00001180 <strrev>:
    1180:	dc 01       	movw	r26, r24
    1182:	fc 01       	movw	r30, r24
    1184:	67 2f       	mov	r22, r23
    1186:	71 91       	ld	r23, Z+
    1188:	77 23       	and	r23, r23
    118a:	e1 f7       	brne	.-8      	; 0x1184 <strrev+0x4>
    118c:	32 97       	sbiw	r30, 0x02	; 2
    118e:	04 c0       	rjmp	.+8      	; 0x1198 <strrev+0x18>
    1190:	7c 91       	ld	r23, X
    1192:	6d 93       	st	X+, r22
    1194:	70 83       	st	Z, r23
    1196:	62 91       	ld	r22, -Z
    1198:	ae 17       	cp	r26, r30
    119a:	bf 07       	cpc	r27, r31
    119c:	c8 f3       	brcs	.-14     	; 0x1190 <strrev+0x10>
    119e:	08 95       	ret

000011a0 <__udivmodsi4>:
    11a0:	a1 e2       	ldi	r26, 0x21	; 33
    11a2:	1a 2e       	mov	r1, r26
    11a4:	aa 1b       	sub	r26, r26
    11a6:	bb 1b       	sub	r27, r27
    11a8:	fd 01       	movw	r30, r26
    11aa:	0d c0       	rjmp	.+26     	; 0x11c6 <__udivmodsi4_ep>

000011ac <__udivmodsi4_loop>:
    11ac:	aa 1f       	adc	r26, r26
    11ae:	bb 1f       	adc	r27, r27
    11b0:	ee 1f       	adc	r30, r30
    11b2:	ff 1f       	adc	r31, r31
    11b4:	a2 17       	cp	r26, r18
    11b6:	b3 07       	cpc	r27, r19
    11b8:	e4 07       	cpc	r30, r20
    11ba:	f5 07       	cpc	r31, r21
    11bc:	20 f0       	brcs	.+8      	; 0x11c6 <__udivmodsi4_ep>
    11be:	a2 1b       	sub	r26, r18
    11c0:	b3 0b       	sbc	r27, r19
    11c2:	e4 0b       	sbc	r30, r20
    11c4:	f5 0b       	sbc	r31, r21

000011c6 <__udivmodsi4_ep>:
    11c6:	66 1f       	adc	r22, r22
    11c8:	77 1f       	adc	r23, r23
    11ca:	88 1f       	adc	r24, r24
    11cc:	99 1f       	adc	r25, r25
    11ce:	1a 94       	dec	r1
    11d0:	69 f7       	brne	.-38     	; 0x11ac <__udivmodsi4_loop>
    11d2:	60 95       	com	r22
    11d4:	70 95       	com	r23
    11d6:	80 95       	com	r24
    11d8:	90 95       	com	r25
    11da:	9b 01       	movw	r18, r22
    11dc:	ac 01       	movw	r20, r24
    11de:	bd 01       	movw	r22, r26
    11e0:	cf 01       	movw	r24, r30
    11e2:	08 95       	ret

000011e4 <_exit>:
    11e4:	f8 94       	cli

000011e6 <__stop_program>:
    11e6:	ff cf       	rjmp	.-2      	; 0x11e6 <__stop_program>
