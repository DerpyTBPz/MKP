
AVRGCC8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000127c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  0000127c  00001310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012d  008000d2  008000d2  00001382  2**0
                  ALLOC
  3 .stab         00002874  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000987  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  0000457f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000024b  00000000  00000000  000045df  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000b4c  00000000  00000000  0000482a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000043a  00000000  00000000  00005376  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ed8  00000000  00000000  000057b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00006688  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000398  00000000  00000000  00006868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005a9  00000000  00000000  00006c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000080  00000000  00000000  000071a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000030  00000000  00000000  00007229  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
       8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_2>
       c:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3f       	cpi	r26, 0xFF	; 255
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
      8a:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
		j %= 4;
	}		
}

ISR(INT0_vect)
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	9f 93       	push	r25
	timeMode++;
      a0:	80 91 de 00 	lds	r24, 0x00DE
      a4:	90 91 df 00 	lds	r25, 0x00DF
      a8:	01 96       	adiw	r24, 0x01	; 1
      aa:	90 93 df 00 	sts	0x00DF, r25
      ae:	80 93 de 00 	sts	0x00DE, r24
}
      b2:	9f 91       	pop	r25
      b4:	8f 91       	pop	r24
      b6:	0f 90       	pop	r0
      b8:	0f be       	out	0x3f, r0	; 63
      ba:	0f 90       	pop	r0
      bc:	1f 90       	pop	r1
      be:	18 95       	reti

000000c0 <TimerInit>:
}

void TimerInit()
{
 	//TIMER1	
	TCNT1 |= 0;
      c0:	8c b5       	in	r24, 0x2c	; 44
      c2:	9d b5       	in	r25, 0x2d	; 45
      c4:	9d bd       	out	0x2d, r25	; 45
      c6:	8c bd       	out	0x2c, r24	; 44
	OCR1A |= 15625;
      c8:	8a b5       	in	r24, 0x2a	; 42
      ca:	9b b5       	in	r25, 0x2b	; 43
      cc:	89 60       	ori	r24, 0x09	; 9
      ce:	9d 63       	ori	r25, 0x3D	; 61
      d0:	9b bd       	out	0x2b, r25	; 43
      d2:	8a bd       	out	0x2a, r24	; 42
	TCCR1A |= (1 << FOC1A);
      d4:	8f b5       	in	r24, 0x2f	; 47
      d6:	88 60       	ori	r24, 0x08	; 8
      d8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
      da:	8e b5       	in	r24, 0x2e	; 46
      dc:	8b 60       	ori	r24, 0x0B	; 11
      de:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A);
      e0:	89 b7       	in	r24, 0x39	; 57
      e2:	80 61       	ori	r24, 0x10	; 16
      e4:	89 bf       	out	0x39, r24	; 57
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
      e6:	85 b5       	in	r24, 0x25	; 37
      e8:	8e 60       	ori	r24, 0x0E	; 14
      ea:	85 bd       	out	0x25, r24	; 37
	OCR2 = 2;
      ec:	82 e0       	ldi	r24, 0x02	; 2
      ee:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
      f0:	89 b7       	in	r24, 0x39	; 57
      f2:	80 68       	ori	r24, 0x80	; 128
      f4:	89 bf       	out	0x39, r24	; 57
}
      f6:	08 95       	ret

000000f8 <CalculateTemp>:

void CalculateTemp()
{	
      f8:	0f 93       	push	r16
      fa:	1f 93       	push	r17
	TIMSK ^= (1 << OCIE2);
      fc:	89 b7       	in	r24, 0x39	; 57
      fe:	80 58       	subi	r24, 0x80	; 128
     100:	89 bf       	out	0x39, r24	; 57
	
	TWBR = (mode == standard) ? 32 : 2;
     102:	80 91 c4 00 	lds	r24, 0x00C4
     106:	90 91 c5 00 	lds	r25, 0x00C5
     10a:	00 97       	sbiw	r24, 0x00	; 0
     10c:	11 f4       	brne	.+4      	; 0x112 <CalculateTemp+0x1a>
     10e:	80 e2       	ldi	r24, 0x20	; 32
     110:	01 c0       	rjmp	.+2      	; 0x114 <CalculateTemp+0x1c>
     112:	82 e0       	ldi	r24, 0x02	; 2
     114:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~(0b11 << TWPS0); 
     116:	81 b1       	in	r24, 0x01	; 1
     118:	8c 7f       	andi	r24, 0xFC	; 252
     11a:	81 b9       	out	0x01, r24	; 1
	TWCR |= (1 << TWEN); 
     11c:	86 b7       	in	r24, 0x36	; 54
     11e:	84 60       	ori	r24, 0x04	; 4
     120:	86 bf       	out	0x36, r24	; 54
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     122:	89 ef       	ldi	r24, 0xF9	; 249
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	f1 f7       	brne	.-4      	; 0x126 <CalculateTemp+0x2e>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <CalculateTemp+0x34>
     12c:	00 00       	nop
	_delay_ms(1);
	
	twi_master_tx_rx(0x44, sendData, 2, data, 6);
     12e:	84 e4       	ldi	r24, 0x44	; 68
     130:	60 ed       	ldi	r22, 0xD0	; 208
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	42 e0       	ldi	r20, 0x02	; 2
     136:	50 e0       	ldi	r21, 0x00	; 0
     138:	28 ed       	ldi	r18, 0xD8	; 216
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	06 e0       	ldi	r16, 0x06	; 6
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	0e 94 a1 05 	call	0xb42	; 0xb42 <twi_master_tx_rx>
	
	temp = (data[0] * 256 + data[1]);
     144:	70 91 d8 00 	lds	r23, 0x00D8
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	80 91 d9 00 	lds	r24, 0x00D9
     14e:	68 0f       	add	r22, r24
     150:	71 1d       	adc	r23, r1
     152:	88 27       	eor	r24, r24
     154:	77 fd       	sbrc	r23, 7
     156:	80 95       	com	r24
     158:	98 2f       	mov	r25, r24
     15a:	60 93 cc 00 	sts	0x00CC, r22
     15e:	70 93 cd 00 	sts	0x00CD, r23
     162:	80 93 ce 00 	sts	0x00CE, r24
     166:	90 93 cf 00 	sts	0x00CF, r25
	cTemp = ((double)(175 * temp / 65535.0) - 45) * 10;	
     16a:	2f ea       	ldi	r18, 0xAF	; 175
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	50 e0       	ldi	r21, 0x00	; 0
     172:	0e 94 49 08 	call	0x1092	; 0x1092 <__mulsi3>
     176:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <__floatsisf>
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	3f ef       	ldi	r19, 0xFF	; 255
     17e:	4f e7       	ldi	r20, 0x7F	; 127
     180:	57 e4       	ldi	r21, 0x47	; 71
     182:	0e 94 bf 06 	call	0xd7e	; 0xd7e <__divsf3>
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	44 e3       	ldi	r20, 0x34	; 52
     18c:	52 e4       	ldi	r21, 0x42	; 66
     18e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <__subsf3>
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	40 e2       	ldi	r20, 0x20	; 32
     198:	51 e4       	ldi	r21, 0x41	; 65
     19a:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__mulsf3>
     19e:	60 93 fb 01 	sts	0x01FB, r22
     1a2:	70 93 fc 01 	sts	0x01FC, r23
     1a6:	80 93 fd 01 	sts	0x01FD, r24
     1aa:	90 93 fe 01 	sts	0x01FE, r25
	
	TWBR = 0;
     1ae:	10 b8       	out	0x00, r1	; 0
	TWSR = 0;
     1b0:	11 b8       	out	0x01, r1	; 1
	TWCR = 0;
     1b2:	16 be       	out	0x36, r1	; 54
	
	TIMSK ^= (1 << OCIE2);
     1b4:	89 b7       	in	r24, 0x39	; 57
     1b6:	80 58       	subi	r24, 0x80	; 128
     1b8:	89 bf       	out	0x39, r24	; 57
}
     1ba:	1f 91       	pop	r17
     1bc:	0f 91       	pop	r16
     1be:	08 95       	ret

000001c0 <__vector_2>:
{
	timeMode++;
}

ISR(INT1_vect)
{
     1c0:	1f 92       	push	r1
     1c2:	0f 92       	push	r0
     1c4:	0f b6       	in	r0, 0x3f	; 63
     1c6:	0f 92       	push	r0
     1c8:	11 24       	eor	r1, r1
     1ca:	2f 93       	push	r18
     1cc:	3f 93       	push	r19
     1ce:	4f 93       	push	r20
     1d0:	5f 93       	push	r21
     1d2:	6f 93       	push	r22
     1d4:	7f 93       	push	r23
     1d6:	8f 93       	push	r24
     1d8:	9f 93       	push	r25
     1da:	af 93       	push	r26
     1dc:	bf 93       	push	r27
     1de:	ef 93       	push	r30
     1e0:	ff 93       	push	r31
	segMode++;
     1e2:	80 91 e4 00 	lds	r24, 0x00E4
     1e6:	90 91 e5 00 	lds	r25, 0x00E5
     1ea:	01 96       	adiw	r24, 0x01	; 1
     1ec:	90 93 e5 00 	sts	0x00E5, r25
     1f0:	80 93 e4 00 	sts	0x00E4, r24
	
	if (segMode == 1)
     1f4:	81 30       	cpi	r24, 0x01	; 1
     1f6:	91 05       	cpc	r25, r1
     1f8:	29 f4       	brne	.+10     	; 0x204 <__vector_2+0x44>
	{		
		PORTC = 0x00;
     1fa:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     1fc:	1b ba       	out	0x1b, r1	; 27
		CalculateTemp();
     1fe:	0e 94 7c 00 	call	0xf8	; 0xf8 <CalculateTemp>
     202:	04 c0       	rjmp	.+8      	; 0x20c <__vector_2+0x4c>
		//TIMSK ^= (1 << OCIE2);		
	}
	else
	{
		//TIMSK ^= (1 << OCIE2);
 		segMode = 0;
     204:	10 92 e5 00 	sts	0x00E5, r1
     208:	10 92 e4 00 	sts	0x00E4, r1
	}
}
     20c:	ff 91       	pop	r31
     20e:	ef 91       	pop	r30
     210:	bf 91       	pop	r27
     212:	af 91       	pop	r26
     214:	9f 91       	pop	r25
     216:	8f 91       	pop	r24
     218:	7f 91       	pop	r23
     21a:	6f 91       	pop	r22
     21c:	5f 91       	pop	r21
     21e:	4f 91       	pop	r20
     220:	3f 91       	pop	r19
     222:	2f 91       	pop	r18
     224:	0f 90       	pop	r0
     226:	0f be       	out	0x3f, r0	; 63
     228:	0f 90       	pop	r0
     22a:	1f 90       	pop	r1
     22c:	18 95       	reti

0000022e <SendTime>:
	
	TIMSK ^= (1 << OCIE2);
}

void SendTime()
{
     22e:	cf 93       	push	r28
     230:	df 93       	push	r29
	itoa(HH, string, 10);
     232:	c9 ee       	ldi	r28, 0xE9	; 233
     234:	d0 e0       	ldi	r29, 0x00	; 0
     236:	80 91 c6 00 	lds	r24, 0x00C6
     23a:	90 91 c7 00 	lds	r25, 0x00C7
     23e:	be 01       	movw	r22, r28
     240:	4a e0       	ldi	r20, 0x0A	; 10
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	0e 94 ad 08 	call	0x115a	; 0x115a <itoa>
	SendString(string);
     248:	ce 01       	movw	r24, r28
     24a:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
	UARTSend(':');
     24e:	8a e3       	ldi	r24, 0x3A	; 58
     250:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
	itoa(MM, string, 10);
     254:	80 91 c8 00 	lds	r24, 0x00C8
     258:	90 91 c9 00 	lds	r25, 0x00C9
     25c:	be 01       	movw	r22, r28
     25e:	4a e0       	ldi	r20, 0x0A	; 10
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	0e 94 ad 08 	call	0x115a	; 0x115a <itoa>
	SendString(string);
     266:	ce 01       	movw	r24, r28
     268:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
	UARTSend(':');
     26c:	8a e3       	ldi	r24, 0x3A	; 58
     26e:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
	itoa(SS, string, 10);
     272:	80 91 ca 00 	lds	r24, 0x00CA
     276:	90 91 cb 00 	lds	r25, 0x00CB
     27a:	be 01       	movw	r22, r28
     27c:	4a e0       	ldi	r20, 0x0A	; 10
     27e:	50 e0       	ldi	r21, 0x00	; 0
     280:	0e 94 ad 08 	call	0x115a	; 0x115a <itoa>
	SendString(string);	
     284:	ce 01       	movw	r24, r28
     286:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
	
 	UARTSend('\r');
     28a:	8d e0       	ldi	r24, 0x0D	; 13
     28c:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
 	UARTSend('\n');
     290:	8a e0       	ldi	r24, 0x0A	; 10
     292:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
}
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <SendTemperature>:

void SendTemperature()
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
	itoa(tempArr[3], string, 10);
     2a0:	c9 ee       	ldi	r28, 0xE9	; 233
     2a2:	d0 e0       	ldi	r29, 0x00	; 0
     2a4:	80 91 f9 01 	lds	r24, 0x01F9
     2a8:	90 91 fa 01 	lds	r25, 0x01FA
     2ac:	be 01       	movw	r22, r28
     2ae:	4a e0       	ldi	r20, 0x0A	; 10
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	0e 94 ad 08 	call	0x115a	; 0x115a <itoa>
	SendString(string);
     2b6:	ce 01       	movw	r24, r28
     2b8:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
	itoa(tempArr[2], string, 10);
     2bc:	80 91 f7 01 	lds	r24, 0x01F7
     2c0:	90 91 f8 01 	lds	r25, 0x01F8
     2c4:	be 01       	movw	r22, r28
     2c6:	4a e0       	ldi	r20, 0x0A	; 10
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	0e 94 ad 08 	call	0x115a	; 0x115a <itoa>
	SendString(string);
     2ce:	ce 01       	movw	r24, r28
     2d0:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
	SendString(".");
     2d4:	80 e6       	ldi	r24, 0x60	; 96
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
	itoa(tempArr[1], string, 10);
     2dc:	80 91 f5 01 	lds	r24, 0x01F5
     2e0:	90 91 f6 01 	lds	r25, 0x01F6
     2e4:	be 01       	movw	r22, r28
     2e6:	4a e0       	ldi	r20, 0x0A	; 10
     2e8:	50 e0       	ldi	r21, 0x00	; 0
     2ea:	0e 94 ad 08 	call	0x115a	; 0x115a <itoa>
	SendString(string);
     2ee:	ce 01       	movw	r24, r28
     2f0:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
	SendString(" C");
     2f4:	82 e6       	ldi	r24, 0x62	; 98
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
	
	UARTSend('\r');
     2fc:	8d e0       	ldi	r24, 0x0D	; 13
     2fe:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
 	UARTSend('\n');
     302:	8a e0       	ldi	r24, 0x0A	; 10
     304:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
}
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <NumToArr>:
	PORTC = DecToDigit(tempArr[3]);
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
{	
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	e9 e6       	ldi	r30, 0x69	; 105
     314:	f1 e0       	ldi	r31, 0x01	; 1
	
	PORTC = DecToDigit(tempArr[3]);
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
     316:	ef 01       	movw	r28, r30
     318:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		timeArr[k] = numbr % 10;
     31a:	2a e0       	ldi	r18, 0x0A	; 10
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	b9 01       	movw	r22, r18
     320:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__divmodhi4>
     324:	81 93       	st	Z+, r24
     326:	91 93       	st	Z+, r25
		numbr /= 10;
     328:	86 2f       	mov	r24, r22
     32a:	97 2f       	mov	r25, r23
	PORTA = (1 << 4);
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
     32c:	ec 17       	cp	r30, r28
     32e:	fd 07       	cpc	r31, r29
     330:	b1 f7       	brne	.-20     	; 0x31e <NumToArr+0x10>
	{		
		timeArr[k] = numbr % 10;
		numbr /= 10;
	}
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	08 95       	ret

00000338 <__vector_6>:
		}
	}
}

ISR(TIMER1_COMPA_vect)
{
     338:	1f 92       	push	r1
     33a:	0f 92       	push	r0
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	0f 92       	push	r0
     340:	11 24       	eor	r1, r1
     342:	2f 93       	push	r18
     344:	3f 93       	push	r19
     346:	4f 93       	push	r20
     348:	5f 93       	push	r21
     34a:	6f 93       	push	r22
     34c:	7f 93       	push	r23
     34e:	8f 93       	push	r24
     350:	9f 93       	push	r25
     352:	af 93       	push	r26
     354:	bf 93       	push	r27
     356:	ef 93       	push	r30
     358:	ff 93       	push	r31
	if (timeMode == 0)
     35a:	80 91 de 00 	lds	r24, 0x00DE
     35e:	90 91 df 00 	lds	r25, 0x00DF
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	09 f0       	breq	.+2      	; 0x368 <__vector_6+0x30>
     366:	74 c0       	rjmp	.+232    	; 0x450 <__vector_6+0x118>
	{
		SS++;
     368:	80 91 ca 00 	lds	r24, 0x00CA
     36c:	90 91 cb 00 	lds	r25, 0x00CB
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	90 93 cb 00 	sts	0x00CB, r25
     376:	80 93 ca 00 	sts	0x00CA, r24
		if (SS == 60)
     37a:	8c 33       	cpi	r24, 0x3C	; 60
     37c:	91 05       	cpc	r25, r1
     37e:	09 f0       	breq	.+2      	; 0x382 <__vector_6+0x4a>
     380:	43 c0       	rjmp	.+134    	; 0x408 <__vector_6+0xd0>
		{
			MM++;
     382:	80 91 c8 00 	lds	r24, 0x00C8
     386:	90 91 c9 00 	lds	r25, 0x00C9
     38a:	01 96       	adiw	r24, 0x01	; 1
     38c:	90 93 c9 00 	sts	0x00C9, r25
     390:	80 93 c8 00 	sts	0x00C8, r24
			SS = 0;
     394:	10 92 cb 00 	sts	0x00CB, r1
     398:	10 92 ca 00 	sts	0x00CA, r1
			if (MM == 60)
     39c:	8c 33       	cpi	r24, 0x3C	; 60
     39e:	91 05       	cpc	r25, r1
     3a0:	99 f5       	brne	.+102    	; 0x408 <__vector_6+0xd0>
			{
				HH++;
     3a2:	80 91 c6 00 	lds	r24, 0x00C6
     3a6:	90 91 c7 00 	lds	r25, 0x00C7
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	90 93 c7 00 	sts	0x00C7, r25
     3b0:	80 93 c6 00 	sts	0x00C6, r24
				MM = 0;
     3b4:	10 92 c9 00 	sts	0x00C9, r1
     3b8:	10 92 c8 00 	sts	0x00C8, r1
				if (HH == 24)
     3bc:	88 31       	cpi	r24, 0x18	; 24
     3be:	91 05       	cpc	r25, r1
     3c0:	29 f4       	brne	.+10     	; 0x3cc <__vector_6+0x94>
				{
					HH = 0;
     3c2:	10 92 c7 00 	sts	0x00C7, r1
     3c6:	10 92 c6 00 	sts	0x00C6, r1
     3ca:	11 c0       	rjmp	.+34     	; 0x3ee <__vector_6+0xb6>
				}
				if (HH > 12)
     3cc:	80 91 c6 00 	lds	r24, 0x00C6
     3d0:	90 91 c7 00 	lds	r25, 0x00C7
     3d4:	8d 30       	cpi	r24, 0x0D	; 13
     3d6:	91 05       	cpc	r25, r1
     3d8:	44 f0       	brlt	.+16     	; 0x3ea <__vector_6+0xb2>
				{
					blink = (HH - 12) * 2;
     3da:	0c 97       	sbiw	r24, 0x0c	; 12
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	90 93 e3 00 	sts	0x00E3, r25
     3e4:	80 93 e2 00 	sts	0x00E2, r24
     3e8:	0f c0       	rjmp	.+30     	; 0x408 <__vector_6+0xd0>
				}
				else if (HH == 0)
     3ea:	00 97       	sbiw	r24, 0x00	; 0
     3ec:	39 f4       	brne	.+14     	; 0x3fc <__vector_6+0xc4>
				{
					blink = 24;					
     3ee:	88 e1       	ldi	r24, 0x18	; 24
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	90 93 e3 00 	sts	0x00E3, r25
     3f6:	80 93 e2 00 	sts	0x00E2, r24
     3fa:	06 c0       	rjmp	.+12     	; 0x408 <__vector_6+0xd0>
				}
				else
				{
					blink = HH * 2;
     3fc:	88 0f       	add	r24, r24
     3fe:	99 1f       	adc	r25, r25
     400:	90 93 e3 00 	sts	0x00E3, r25
     404:	80 93 e2 00 	sts	0x00E2, r24
				}	
			}
		}		
		time = (HH * 100) + MM;			
     408:	40 91 c6 00 	lds	r20, 0x00C6
     40c:	50 91 c7 00 	lds	r21, 0x00C7
     410:	84 e6       	ldi	r24, 0x64	; 100
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	48 9f       	mul	r20, r24
     416:	90 01       	movw	r18, r0
     418:	49 9f       	mul	r20, r25
     41a:	30 0d       	add	r19, r0
     41c:	58 9f       	mul	r21, r24
     41e:	30 0d       	add	r19, r0
     420:	11 24       	eor	r1, r1
     422:	80 91 c8 00 	lds	r24, 0x00C8
     426:	90 91 c9 00 	lds	r25, 0x00C9
     42a:	82 0f       	add	r24, r18
     42c:	93 1f       	adc	r25, r19
     42e:	90 93 d7 00 	sts	0x00D7, r25
     432:	80 93 d6 00 	sts	0x00D6, r24
		NumToArr(time);
     436:	0e 94 87 01 	call	0x30e	; 0x30e <NumToArr>
		
// 		PORTC = 0x00;
// 		PORTA = 0x00;
// 		CalculateTemp();
		
		if (segMode == 1)
     43a:	80 91 e4 00 	lds	r24, 0x00E4
     43e:	90 91 e5 00 	lds	r25, 0x00E5
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	91 05       	cpc	r25, r1
     446:	21 f4       	brne	.+8      	; 0x450 <__vector_6+0x118>
		{			
			PORTC = 0x00;
     448:	15 ba       	out	0x15, r1	; 21
			PORTA = 0x00;
     44a:	1b ba       	out	0x1b, r1	; 27
			CalculateTemp();
     44c:	0e 94 7c 00 	call	0xf8	; 0xf8 <CalculateTemp>
		}
	}
	
	if (blink != 0)	
     450:	80 91 e2 00 	lds	r24, 0x00E2
     454:	90 91 e3 00 	lds	r25, 0x00E3
     458:	00 97       	sbiw	r24, 0x00	; 0
     45a:	69 f0       	breq	.+26     	; 0x476 <__stack+0x17>
	{
		PORTD ^= RED | GREEN | BLUE;
     45c:	92 b3       	in	r25, 0x12	; 18
     45e:	80 eb       	ldi	r24, 0xB0	; 176
     460:	89 27       	eor	r24, r25
     462:	82 bb       	out	0x12, r24	; 18
		blink--;
     464:	80 91 e2 00 	lds	r24, 0x00E2
     468:	90 91 e3 00 	lds	r25, 0x00E3
     46c:	01 97       	sbiw	r24, 0x01	; 1
     46e:	90 93 e3 00 	sts	0x00E3, r25
     472:	80 93 e2 00 	sts	0x00E2, r24
	}
}
     476:	ff 91       	pop	r31
     478:	ef 91       	pop	r30
     47a:	bf 91       	pop	r27
     47c:	af 91       	pop	r26
     47e:	9f 91       	pop	r25
     480:	8f 91       	pop	r24
     482:	7f 91       	pop	r23
     484:	6f 91       	pop	r22
     486:	5f 91       	pop	r21
     488:	4f 91       	pop	r20
     48a:	3f 91       	pop	r19
     48c:	2f 91       	pop	r18
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <TempToArr>:
	}
}

void TempToArr(int tempr)
{	
	tempArr[0] = 12;
     498:	2c e0       	ldi	r18, 0x0C	; 12
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	30 93 f4 01 	sts	0x01F4, r19
     4a0:	20 93 f3 01 	sts	0x01F3, r18
	for (int k = 1; k < DIGITS; k++)
	{		
		tempArr[k] = tempr % 10;
     4a4:	2a e0       	ldi	r18, 0x0A	; 10
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	b9 01       	movw	r22, r18
     4aa:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__divmodhi4>
     4ae:	90 93 f6 01 	sts	0x01F6, r25
     4b2:	80 93 f5 01 	sts	0x01F5, r24
     4b6:	cb 01       	movw	r24, r22
     4b8:	b9 01       	movw	r22, r18
     4ba:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__divmodhi4>
     4be:	90 93 f8 01 	sts	0x01F8, r25
     4c2:	80 93 f7 01 	sts	0x01F7, r24
     4c6:	cb 01       	movw	r24, r22
     4c8:	b9 01       	movw	r22, r18
     4ca:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__divmodhi4>
     4ce:	90 93 fa 01 	sts	0x01FA, r25
     4d2:	80 93 f9 01 	sts	0x01F9, r24
		tempr /= 10;
	}
}
     4d6:	08 95       	ret

000004d8 <main>:
char tmp[3];
int blink = 0;
int segMode = 0;

int main(void)
{	
     4d8:	2f 92       	push	r2
     4da:	3f 92       	push	r3
     4dc:	4f 92       	push	r4
     4de:	5f 92       	push	r5
     4e0:	6f 92       	push	r6
     4e2:	7f 92       	push	r7
     4e4:	8f 92       	push	r8
     4e6:	9f 92       	push	r9
     4e8:	af 92       	push	r10
     4ea:	bf 92       	push	r11
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
	DDRA = 0xF0;
     4fc:	80 ef       	ldi	r24, 0xF0	; 240
     4fe:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
     500:	8f ef       	ldi	r24, 0xFF	; 255
     502:	84 bb       	out	0x14, r24	; 20
	DDRD |= RED | GREEN | BLUE | BTN1 | BTN2;
     504:	81 b3       	in	r24, 0x11	; 17
     506:	8c 6b       	ori	r24, 0xBC	; 188
     508:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
     50a:	8f e0       	ldi	r24, 0x0F	; 15
     50c:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
     50e:	80 ec       	ldi	r24, 0xC0	; 192
     510:	8b bf       	out	0x3b, r24	; 59
     512:	89 ef       	ldi	r24, 0xF9	; 249
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	01 97       	sbiw	r24, 0x01	; 1
     518:	f1 f7       	brne	.-4      	; 0x516 <main+0x3e>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <main+0x44>
     51c:	00 00       	nop
	
	_delay_ms(1);
	TimerInit();
     51e:	0e 94 60 00 	call	0xc0	; 0xc0 <TimerInit>
	UARTInit();
     522:	0e 94 39 06 	call	0xc72	; 0xc72 <UARTInit>
	
	sei();
     526:	78 94       	sei
			SendTime();
		}
		else if ((segMode == 1) && (timeMode < 1))
		{	
			//TempToArr(temp);
			ltoa((long int)(cTemp), tmpStr, 10);
     528:	0f 2e       	mov	r0, r31
     52a:	f3 e7       	ldi	r31, 0x73	; 115
     52c:	6f 2e       	mov	r6, r31
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	7f 2e       	mov	r7, r31
     532:	f0 2d       	mov	r31, r0
			while(1)
			{	
				HH = 0;
				MM = 0;
				SS = 0;		
				SendString("Enter hours (HH)");
     534:	0f 2e       	mov	r0, r31
     536:	f5 e6       	ldi	r31, 0x65	; 101
     538:	ef 2e       	mov	r14, r31
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	ff 2e       	mov	r15, r31
     53e:	f0 2d       	mov	r31, r0
				UARTSend('\r');
 				UARTSend('\n');
				tmp[0] = UARTReceive();
     540:	c6 ee       	ldi	r28, 0xE6	; 230
     542:	d0 e0       	ldi	r29, 0x00	; 0
				tmp[1] = UARTReceive();				
     544:	8e 01       	movw	r16, r28
     546:	0f 5f       	subi	r16, 0xFF	; 255
     548:	1f 4f       	sbci	r17, 0xFF	; 255
					tmp[0] = 0;
					tmp[1] = 0;
				}
				_delay_ms(100);
				
				SendString("Enter minutes (MM)");
     54a:	0f 2e       	mov	r0, r31
     54c:	f2 e8       	ldi	r31, 0x82	; 130
     54e:	cf 2e       	mov	r12, r31
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	df 2e       	mov	r13, r31
     554:	f0 2d       	mov	r31, r0
					tmp[0] = 0;
					tmp[1] = 0;
				}
				_delay_ms(100);
				
				SendString("Enter seconds (SS)");
     556:	0f 2e       	mov	r0, r31
     558:	f3 ea       	ldi	r31, 0xA3	; 163
     55a:	af 2e       	mov	r10, r31
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	bf 2e       	mov	r11, r31
     560:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				tmpTime = atoi(tmp);	
				if (tmpTime > 59)
				{
					SendString("Wrong seconds");
     562:	0f 2e       	mov	r0, r31
     564:	f6 eb       	ldi	r31, 0xB6	; 182
     566:	2f 2e       	mov	r2, r31
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	3f 2e       	mov	r3, r31
     56c:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				tmpTime = atoi(tmp);				
				if (tmpTime > 59)
				{
					SendString("Wrong minutes");
     56e:	0f 2e       	mov	r0, r31
     570:	f5 e9       	ldi	r31, 0x95	; 149
     572:	4f 2e       	mov	r4, r31
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	5f 2e       	mov	r5, r31
     578:	f0 2d       	mov	r31, r0
				tmp[0] = UARTReceive();
				tmp[1] = UARTReceive();				
				tmpTime = atoi(tmp);				
				if (tmpTime > 23)
				{
					SendString("Wrong hours");
     57a:	0f 2e       	mov	r0, r31
     57c:	f6 e7       	ldi	r31, 0x76	; 118
     57e:	8f 2e       	mov	r8, r31
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	9f 2e       	mov	r9, r31
     584:	f0 2d       	mov	r31, r0
	
	sei();
	
	while(1)
	{
		if ((segMode == 0) && (timeMode < 1))
     586:	80 91 e4 00 	lds	r24, 0x00E4
     58a:	90 91 e5 00 	lds	r25, 0x00E5
     58e:	00 97       	sbiw	r24, 0x00	; 0
     590:	51 f4       	brne	.+20     	; 0x5a6 <main+0xce>
     592:	20 91 de 00 	lds	r18, 0x00DE
     596:	30 91 df 00 	lds	r19, 0x00DF
     59a:	12 16       	cp	r1, r18
     59c:	13 06       	cpc	r1, r19
     59e:	1c f0       	brlt	.+6      	; 0x5a6 <main+0xce>
		{
			SendTime();
     5a0:	0e 94 17 01 	call	0x22e	; 0x22e <SendTime>
     5a4:	29 c0       	rjmp	.+82     	; 0x5f8 <main+0x120>
		}
		else if ((segMode == 1) && (timeMode < 1))
     5a6:	81 30       	cpi	r24, 0x01	; 1
     5a8:	91 05       	cpc	r25, r1
     5aa:	31 f5       	brne	.+76     	; 0x5f8 <main+0x120>
     5ac:	80 91 de 00 	lds	r24, 0x00DE
     5b0:	90 91 df 00 	lds	r25, 0x00DF
     5b4:	18 16       	cp	r1, r24
     5b6:	19 06       	cpc	r1, r25
     5b8:	3c f1       	brlt	.+78     	; 0x608 <main+0x130>
		{	
			//TempToArr(temp);
			ltoa((long int)(cTemp), tmpStr, 10);
     5ba:	60 91 fb 01 	lds	r22, 0x01FB
     5be:	70 91 fc 01 	lds	r23, 0x01FC
     5c2:	80 91 fd 01 	lds	r24, 0x01FD
     5c6:	90 91 fe 01 	lds	r25, 0x01FE
     5ca:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fixsfsi>
     5ce:	a3 01       	movw	r20, r6
     5d0:	2a e0       	ldi	r18, 0x0A	; 10
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	0e 94 ce 08 	call	0x119c	; 0x119c <ltoa>
			TempToArr((long int)(cTemp));
     5d8:	60 91 fb 01 	lds	r22, 0x01FB
     5dc:	70 91 fc 01 	lds	r23, 0x01FC
     5e0:	80 91 fd 01 	lds	r24, 0x01FD
     5e4:	90 91 fe 01 	lds	r25, 0x01FE
     5e8:	0e 94 27 07 	call	0xe4e	; 0xe4e <__fixsfsi>
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	0e 94 4c 02 	call	0x498	; 0x498 <TempToArr>
			SendTemperature();
     5f4:	0e 94 4e 01 	call	0x29c	; 0x29c <SendTemperature>
			//TempTo7Seg();					
		}
		
		if (timeMode >= 1)
     5f8:	80 91 de 00 	lds	r24, 0x00DE
     5fc:	90 91 df 00 	lds	r25, 0x00DF
     600:	18 16       	cp	r1, r24
     602:	19 06       	cpc	r1, r25
     604:	0c f0       	brlt	.+2      	; 0x608 <main+0x130>
     606:	bf cf       	rjmp	.-130    	; 0x586 <main+0xae>
		{
			while(1)
			{	
				HH = 0;
     608:	10 92 c7 00 	sts	0x00C7, r1
     60c:	10 92 c6 00 	sts	0x00C6, r1
				MM = 0;
     610:	10 92 c9 00 	sts	0x00C9, r1
     614:	10 92 c8 00 	sts	0x00C8, r1
				SS = 0;		
     618:	10 92 cb 00 	sts	0x00CB, r1
     61c:	10 92 ca 00 	sts	0x00CA, r1
				SendString("Enter hours (HH)");
     620:	c7 01       	movw	r24, r14
     622:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
				UARTSend('\r');
     626:	8d e0       	ldi	r24, 0x0D	; 13
     628:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
 				UARTSend('\n');
     62c:	8a e0       	ldi	r24, 0x0A	; 10
     62e:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
				tmp[0] = UARTReceive();
     632:	0e 94 47 06 	call	0xc8e	; 0xc8e <UARTReceive>
     636:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     638:	0e 94 47 06 	call	0xc8e	; 0xc8e <UARTReceive>
     63c:	f8 01       	movw	r30, r16
     63e:	80 83       	st	Z, r24
				tmpTime = atoi(tmp);				
     640:	ce 01       	movw	r24, r28
     642:	0e 94 8f 08 	call	0x111e	; 0x111e <atoi>
     646:	90 93 72 01 	sts	0x0172, r25
     64a:	80 93 71 01 	sts	0x0171, r24
				if (tmpTime > 23)
     64e:	88 31       	cpi	r24, 0x18	; 24
     650:	91 05       	cpc	r25, r1
     652:	54 f0       	brlt	.+20     	; 0x668 <main+0x190>
				{
					SendString("Wrong hours");
     654:	c4 01       	movw	r24, r8
     656:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
					UARTSend('\r');
     65a:	8d e0       	ldi	r24, 0x0D	; 13
     65c:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
 					UARTSend('\n');
     660:	8a e0       	ldi	r24, 0x0A	; 10
     662:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
					break;
     666:	8f cf       	rjmp	.-226    	; 0x586 <main+0xae>
				}
				else
				{
					HH = tmpTime;
     668:	90 93 c7 00 	sts	0x00C7, r25
     66c:	80 93 c6 00 	sts	0x00C6, r24
					tmpTime = 0;
     670:	10 92 72 01 	sts	0x0172, r1
     674:	10 92 71 01 	sts	0x0171, r1
					tmp[0] = 0;
     678:	18 82       	st	Y, r1
					tmp[1] = 0;
     67a:	f8 01       	movw	r30, r16
     67c:	10 82       	st	Z, r1
     67e:	87 ea       	ldi	r24, 0xA7	; 167
     680:	91 e6       	ldi	r25, 0x61	; 97
     682:	01 97       	sbiw	r24, 0x01	; 1
     684:	f1 f7       	brne	.-4      	; 0x682 <main+0x1aa>
     686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x1b0>
     688:	00 00       	nop
				}
				_delay_ms(100);
				
				SendString("Enter minutes (MM)");
     68a:	c6 01       	movw	r24, r12
     68c:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
				UARTSend('\r');
     690:	8d e0       	ldi	r24, 0x0D	; 13
     692:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
 				UARTSend('\n');				
     696:	8a e0       	ldi	r24, 0x0A	; 10
     698:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
				tmp[0] = UARTReceive();
     69c:	0e 94 47 06 	call	0xc8e	; 0xc8e <UARTReceive>
     6a0:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     6a2:	0e 94 47 06 	call	0xc8e	; 0xc8e <UARTReceive>
     6a6:	f8 01       	movw	r30, r16
     6a8:	80 83       	st	Z, r24
				tmpTime = atoi(tmp);				
     6aa:	ce 01       	movw	r24, r28
     6ac:	0e 94 8f 08 	call	0x111e	; 0x111e <atoi>
     6b0:	90 93 72 01 	sts	0x0172, r25
     6b4:	80 93 71 01 	sts	0x0171, r24
				if (tmpTime > 59)
     6b8:	8c 33       	cpi	r24, 0x3C	; 60
     6ba:	91 05       	cpc	r25, r1
     6bc:	54 f0       	brlt	.+20     	; 0x6d2 <main+0x1fa>
				{
					SendString("Wrong minutes");
     6be:	c2 01       	movw	r24, r4
     6c0:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
					UARTSend('\r');
     6c4:	8d e0       	ldi	r24, 0x0D	; 13
     6c6:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
 					UARTSend('\n');
     6ca:	8a e0       	ldi	r24, 0x0A	; 10
     6cc:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
					break;
     6d0:	5a cf       	rjmp	.-332    	; 0x586 <main+0xae>
				}
				else
				{
					MM = tmpTime;
     6d2:	90 93 c9 00 	sts	0x00C9, r25
     6d6:	80 93 c8 00 	sts	0x00C8, r24
					tmpTime = 0;
     6da:	10 92 72 01 	sts	0x0172, r1
     6de:	10 92 71 01 	sts	0x0171, r1
					tmp[0] = 0;
     6e2:	18 82       	st	Y, r1
					tmp[1] = 0;
     6e4:	f8 01       	movw	r30, r16
     6e6:	10 82       	st	Z, r1
     6e8:	87 ea       	ldi	r24, 0xA7	; 167
     6ea:	91 e6       	ldi	r25, 0x61	; 97
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <main+0x214>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <main+0x21a>
     6f2:	00 00       	nop
				}
				_delay_ms(100);
				
				SendString("Enter seconds (SS)");
     6f4:	c5 01       	movw	r24, r10
     6f6:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
				UARTSend('\r');
     6fa:	8d e0       	ldi	r24, 0x0D	; 13
     6fc:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
 				UARTSend('\n');				
     700:	8a e0       	ldi	r24, 0x0A	; 10
     702:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
				tmp[0] = UARTReceive();
     706:	0e 94 47 06 	call	0xc8e	; 0xc8e <UARTReceive>
     70a:	88 83       	st	Y, r24
				tmp[1] = UARTReceive();				
     70c:	0e 94 47 06 	call	0xc8e	; 0xc8e <UARTReceive>
     710:	f8 01       	movw	r30, r16
     712:	80 83       	st	Z, r24
				tmpTime = atoi(tmp);	
     714:	ce 01       	movw	r24, r28
     716:	0e 94 8f 08 	call	0x111e	; 0x111e <atoi>
     71a:	90 93 72 01 	sts	0x0172, r25
     71e:	80 93 71 01 	sts	0x0171, r24
				if (tmpTime > 59)
     722:	8c 33       	cpi	r24, 0x3C	; 60
     724:	91 05       	cpc	r25, r1
     726:	54 f0       	brlt	.+20     	; 0x73c <main+0x264>
				{
					SendString("Wrong seconds");
     728:	c1 01       	movw	r24, r2
     72a:	0e 94 4b 06 	call	0xc96	; 0xc96 <SendString>
					UARTSend('\r');
     72e:	8d e0       	ldi	r24, 0x0D	; 13
     730:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
 					UARTSend('\n');
     734:	8a e0       	ldi	r24, 0x0A	; 10
     736:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
					break;
     73a:	25 cf       	rjmp	.-438    	; 0x586 <main+0xae>
				}
				else
				{
					SS = tmpTime;
     73c:	90 93 cb 00 	sts	0x00CB, r25
     740:	80 93 ca 00 	sts	0x00CA, r24
					tmpTime = 0;
     744:	10 92 72 01 	sts	0x0172, r1
     748:	10 92 71 01 	sts	0x0171, r1
					tmp[0] = 0;
     74c:	18 82       	st	Y, r1
					tmp[1] = 0;
     74e:	f8 01       	movw	r30, r16
     750:	10 82       	st	Z, r1
     752:	87 ea       	ldi	r24, 0xA7	; 167
     754:	91 e6       	ldi	r25, 0x61	; 97
     756:	01 97       	sbiw	r24, 0x01	; 1
     758:	f1 f7       	brne	.-4      	; 0x756 <main+0x27e>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <main+0x284>
     75c:	00 00       	nop
				}	
				_delay_ms(100);
				timeMode = 0;	
     75e:	10 92 df 00 	sts	0x00DF, r1
     762:	10 92 de 00 	sts	0x00DE, r1
     766:	0f cf       	rjmp	.-482    	; 0x586 <main+0xae>

00000768 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
     768:	87 30       	cpi	r24, 0x07	; 7
     76a:	71 f1       	breq	.+92     	; 0x7c8 <DecToDigit+0x60>
     76c:	88 30       	cpi	r24, 0x08	; 8
     76e:	70 f4       	brcc	.+28     	; 0x78c <DecToDigit+0x24>
     770:	83 30       	cpi	r24, 0x03	; 3
     772:	11 f1       	breq	.+68     	; 0x7b8 <DecToDigit+0x50>
     774:	84 30       	cpi	r24, 0x04	; 4
     776:	28 f4       	brcc	.+10     	; 0x782 <DecToDigit+0x1a>
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	d1 f1       	breq	.+116    	; 0x7f0 <DecToDigit+0x88>
     77c:	82 30       	cpi	r24, 0x02	; 2
     77e:	d0 f4       	brcc	.+52     	; 0x7b4 <DecToDigit+0x4c>
     780:	17 c0       	rjmp	.+46     	; 0x7b0 <DecToDigit+0x48>
     782:	85 30       	cpi	r24, 0x05	; 5
     784:	e9 f0       	breq	.+58     	; 0x7c0 <DecToDigit+0x58>
     786:	86 30       	cpi	r24, 0x06	; 6
     788:	e8 f4       	brcc	.+58     	; 0x7c4 <DecToDigit+0x5c>
     78a:	18 c0       	rjmp	.+48     	; 0x7bc <DecToDigit+0x54>
     78c:	8b 30       	cpi	r24, 0x0B	; 11
     78e:	21 f1       	breq	.+72     	; 0x7d8 <DecToDigit+0x70>
     790:	8c 30       	cpi	r24, 0x0C	; 12
     792:	28 f4       	brcc	.+10     	; 0x79e <DecToDigit+0x36>
     794:	89 30       	cpi	r24, 0x09	; 9
     796:	e1 f0       	breq	.+56     	; 0x7d0 <DecToDigit+0x68>
     798:	8a 30       	cpi	r24, 0x0A	; 10
     79a:	e0 f4       	brcc	.+56     	; 0x7d4 <DecToDigit+0x6c>
     79c:	17 c0       	rjmp	.+46     	; 0x7cc <DecToDigit+0x64>
     79e:	8d 30       	cpi	r24, 0x0D	; 13
     7a0:	f9 f0       	breq	.+62     	; 0x7e0 <DecToDigit+0x78>
     7a2:	8d 30       	cpi	r24, 0x0D	; 13
     7a4:	d8 f0       	brcs	.+54     	; 0x7dc <DecToDigit+0x74>
     7a6:	8e 30       	cpi	r24, 0x0E	; 14
     7a8:	e9 f0       	breq	.+58     	; 0x7e4 <DecToDigit+0x7c>
     7aa:	8f 30       	cpi	r24, 0x0F	; 15
     7ac:	f9 f4       	brne	.+62     	; 0x7ec <DecToDigit+0x84>
     7ae:	1c c0       	rjmp	.+56     	; 0x7e8 <DecToDigit+0x80>
	{
		case 0:
			Digit = 0b01011111;				
     7b0:	8f e5       	ldi	r24, 0x5F	; 95
     7b2:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
     7b4:	8b e3       	ldi	r24, 0x3B	; 59
			break;
     7b6:	08 95       	ret
		case 3:
			Digit = 0b00101111;
     7b8:	8f e2       	ldi	r24, 0x2F	; 47
			break;
     7ba:	08 95       	ret
		case 4:
			Digit = 0b01100110;
     7bc:	86 e6       	ldi	r24, 0x66	; 102
			break;
     7be:	08 95       	ret
		case 5:
			Digit = 0b01101101;
     7c0:	8d e6       	ldi	r24, 0x6D	; 109
			break;
     7c2:	08 95       	ret
		case 6:
			Digit = 0b01111101;
     7c4:	8d e7       	ldi	r24, 0x7D	; 125
			break;
     7c6:	08 95       	ret
		case 7:
			Digit = 0b00000111;
     7c8:	87 e0       	ldi	r24, 0x07	; 7
			break;
     7ca:	08 95       	ret
		case 8:
			Digit = 0b01111111;
     7cc:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
     7ce:	08 95       	ret
		case 9:
			Digit = 0b01101111;
     7d0:	8f e6       	ldi	r24, 0x6F	; 111
			break;
     7d2:	08 95       	ret
		case 10:
			Digit = 0b01110111;
     7d4:	87 e7       	ldi	r24, 0x77	; 119
			break;
     7d6:	08 95       	ret
		case 11:
			Digit = 0b01111100;
     7d8:	8c e7       	ldi	r24, 0x7C	; 124
			break;
     7da:	08 95       	ret
		case 12:
			Digit = 0b01011001;
     7dc:	89 e5       	ldi	r24, 0x59	; 89
			break;
     7de:	08 95       	ret
		case 13:
			Digit = 0b00111110;
     7e0:	8e e3       	ldi	r24, 0x3E	; 62
			break;
     7e2:	08 95       	ret
		case 14:
			Digit = 0b01111001;
     7e4:	89 e7       	ldi	r24, 0x79	; 121
			break;
     7e6:	08 95       	ret
		case 15:
			Digit = 0b01110001;
     7e8:	81 e7       	ldi	r24, 0x71	; 113
			break;
     7ea:	08 95       	ret
		default:
			Digit = 0b00000000;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
			break;			
     7ee:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
     7f0:	86 e0       	ldi	r24, 0x06	; 6
		default:
			Digit = 0b00000000;
			break;			
 	}		 
	return Digit;
     7f2:	08 95       	ret

000007f4 <TempTo7Seg>:
 	UARTSend('\n');
}

void TempTo7Seg()
{	
	PORTC = DecToDigit(tempArr[0]);
     7f4:	80 91 f3 01 	lds	r24, 0x01F3
     7f8:	0e 94 b4 03 	call	0x768	; 0x768 <DecToDigit>
     7fc:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 7);
     7fe:	80 e8       	ldi	r24, 0x80	; 128
     800:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[1]);
     802:	80 91 f5 01 	lds	r24, 0x01F5
     806:	0e 94 b4 03 	call	0x768	; 0x768 <DecToDigit>
     80a:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 6);
     80c:	80 e4       	ldi	r24, 0x40	; 64
     80e:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[2]);
     810:	80 91 f7 01 	lds	r24, 0x01F7
     814:	0e 94 b4 03 	call	0x768	; 0x768 <DecToDigit>
     818:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 5);
     81a:	80 e2       	ldi	r24, 0x20	; 32
     81c:	8b bb       	out	0x1b, r24	; 27
	
	PORTC = DecToDigit(tempArr[3]);
     81e:	80 91 f9 01 	lds	r24, 0x01F9
     822:	0e 94 b4 03 	call	0x768	; 0x768 <DecToDigit>
     826:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << 4);
     828:	80 e1       	ldi	r24, 0x10	; 16
     82a:	8b bb       	out	0x1b, r24	; 27
}
     82c:	08 95       	ret

0000082e <__vector_3>:
		blink--;
	}
}

ISR(TIMER2_COMP_vect)
{
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	2f 93       	push	r18
     83a:	3f 93       	push	r19
     83c:	4f 93       	push	r20
     83e:	5f 93       	push	r21
     840:	6f 93       	push	r22
     842:	7f 93       	push	r23
     844:	8f 93       	push	r24
     846:	9f 93       	push	r25
     848:	af 93       	push	r26
     84a:	bf 93       	push	r27
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
     850:	ef 93       	push	r30
     852:	ff 93       	push	r31
	if (segMode == 0)
     854:	80 91 e4 00 	lds	r24, 0x00E4
     858:	90 91 e5 00 	lds	r25, 0x00E5
     85c:	00 97       	sbiw	r24, 0x00	; 0
     85e:	d1 f5       	brne	.+116    	; 0x8d4 <__vector_3+0xa6>
	{
		PORTC = 0x00;
     860:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     862:	1b ba       	out	0x1b, r1	; 27
		PORTC = DecToDigit(timeArr[j]);
     864:	c0 91 d2 00 	lds	r28, 0x00D2
     868:	d0 91 d3 00 	lds	r29, 0x00D3
     86c:	fe 01       	movw	r30, r28
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	e7 59       	subi	r30, 0x97	; 151
     874:	fe 4f       	sbci	r31, 0xFE	; 254
     876:	80 81       	ld	r24, Z
     878:	0e 94 b4 03 	call	0x768	; 0x768 <DecToDigit>
     87c:	85 bb       	out	0x15, r24	; 21
		
		if ((j == 2) && ((SS % 2) == 0) && (segMode == 0))
     87e:	c2 30       	cpi	r28, 0x02	; 2
     880:	d1 05       	cpc	r29, r1
     882:	69 f4       	brne	.+26     	; 0x89e <__vector_3+0x70>
     884:	80 91 ca 00 	lds	r24, 0x00CA
     888:	80 fd       	sbrc	r24, 0
     88a:	09 c0       	rjmp	.+18     	; 0x89e <__vector_3+0x70>
     88c:	80 91 e4 00 	lds	r24, 0x00E4
     890:	90 91 e5 00 	lds	r25, 0x00E5
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	19 f4       	brne	.+6      	; 0x89e <__vector_3+0x70>
		{			
			PORTC ^= 0b10000000;	
     898:	85 b3       	in	r24, 0x15	; 21
     89a:	80 58       	subi	r24, 0x80	; 128
     89c:	85 bb       	out	0x15, r24	; 21
		}	
			
		PORTA = (1 << (7 - j));			
     89e:	80 91 d2 00 	lds	r24, 0x00D2
     8a2:	90 91 d3 00 	lds	r25, 0x00D3
     8a6:	27 e0       	ldi	r18, 0x07	; 7
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	28 1b       	sub	r18, r24
     8ac:	39 0b       	sbc	r19, r25
     8ae:	41 e0       	ldi	r20, 0x01	; 1
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	ba 01       	movw	r22, r20
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__vector_3+0x8c>
     8b6:	66 0f       	add	r22, r22
     8b8:	77 1f       	adc	r23, r23
     8ba:	2a 95       	dec	r18
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <__vector_3+0x88>
     8be:	6b bb       	out	0x1b, r22	; 27
		j++;
     8c0:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
     8c2:	64 e0       	ldi	r22, 0x04	; 4
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__divmodhi4>
     8ca:	90 93 d3 00 	sts	0x00D3, r25
     8ce:	80 93 d2 00 	sts	0x00D2, r24
     8d2:	2d c0       	rjmp	.+90     	; 0x92e <__vector_3+0x100>
	}	
	else
	{
		PORTC = 0x00;
     8d4:	15 ba       	out	0x15, r1	; 21
		PORTA = 0x00;
     8d6:	1b ba       	out	0x1b, r1	; 27
		PORTC = DecToDigit(tempArr[j]);
     8d8:	c0 91 d2 00 	lds	r28, 0x00D2
     8dc:	d0 91 d3 00 	lds	r29, 0x00D3
     8e0:	fe 01       	movw	r30, r28
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	ed 50       	subi	r30, 0x0D	; 13
     8e8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ea:	80 81       	ld	r24, Z
     8ec:	0e 94 b4 03 	call	0x768	; 0x768 <DecToDigit>
     8f0:	85 bb       	out	0x15, r24	; 21
		
		if (j == 3)
     8f2:	c3 30       	cpi	r28, 0x03	; 3
     8f4:	d1 05       	cpc	r29, r1
     8f6:	09 f4       	brne	.+2      	; 0x8fa <__vector_3+0xcc>
		{			
			PORTC |= 0b10000000;	
     8f8:	af 9a       	sbi	0x15, 7	; 21
		}
		
		PORTA = (1 << (7 - j));			
     8fa:	80 91 d2 00 	lds	r24, 0x00D2
     8fe:	90 91 d3 00 	lds	r25, 0x00D3
     902:	27 e0       	ldi	r18, 0x07	; 7
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	28 1b       	sub	r18, r24
     908:	39 0b       	sbc	r19, r25
     90a:	41 e0       	ldi	r20, 0x01	; 1
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	ba 01       	movw	r22, r20
     910:	02 c0       	rjmp	.+4      	; 0x916 <__vector_3+0xe8>
     912:	66 0f       	add	r22, r22
     914:	77 1f       	adc	r23, r23
     916:	2a 95       	dec	r18
     918:	e2 f7       	brpl	.-8      	; 0x912 <__vector_3+0xe4>
     91a:	6b bb       	out	0x1b, r22	; 27
		j++;		
     91c:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
     91e:	64 e0       	ldi	r22, 0x04	; 4
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__divmodhi4>
     926:	90 93 d3 00 	sts	0x00D3, r25
     92a:	80 93 d2 00 	sts	0x00D2, r24
	}		
}
     92e:	ff 91       	pop	r31
     930:	ef 91       	pop	r30
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f 90       	pop	r0
     950:	1f 90       	pop	r1
     952:	18 95       	reti

00000954 <get_status>:
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
	PORTC &= ~0b00000011; // Clear pull-up on both lines
}

static uint8_t get_status(uint8_t status)
{
     954:	98 2f       	mov	r25, r24
	uint8_t st;

	while (!(TWCR & (1 << TWINT)))
     956:	06 b6       	in	r0, 0x36	; 54
     958:	07 fe       	sbrs	r0, 7
     95a:	fd cf       	rjmp	.-6      	; 0x956 <get_status+0x2>
		;
	if ((st = (TWSR & 0xF8)) == status)
     95c:	81 b1       	in	r24, 0x01	; 1
     95e:	88 7f       	andi	r24, 0xF8	; 248
     960:	89 17       	cp	r24, r25
     962:	09 f4       	brne	.+2      	; 0x966 <get_status+0x12>
		return 0;
     964:	80 e0       	ldi	r24, 0x00	; 0
	else
		return st;
}
     966:	08 95       	ret

00000968 <send_start>:

static int send_start(uint8_t status)
{
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     968:	94 ea       	ldi	r25, 0xA4	; 164
     96a:	96 bf       	out	0x36, r25	; 54
	return get_status(status);
     96c:	0e 94 aa 04 	call	0x954	; 0x954 <get_status>
}
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	08 95       	ret

00000974 <send_stop>:

static void send_stop(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     974:	84 e9       	ldi	r24, 0x94	; 148
     976:	86 bf       	out	0x36, r24	; 54
}
     978:	08 95       	ret

0000097a <send_data>:

static int send_data(uint8_t data, uint8_t status)
{
	TWDR = data;
     97a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);
     97c:	84 e8       	ldi	r24, 0x84	; 132
     97e:	86 bf       	out	0x36, r24	; 54
	return get_status(status);
     980:	86 2f       	mov	r24, r22
     982:	0e 94 aa 04 	call	0x954	; 0x954 <get_status>
}
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	08 95       	ret

0000098a <recv_data>:

static int recv_data(uint8_t *data, uint8_t status, uint8_t ack)
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ec 01       	movw	r28, r24
     990:	86 2f       	mov	r24, r22
	TWCR = (1 << TWINT) | (ack << TWEA) | (1 << TWEN);
     992:	42 95       	swap	r20
     994:	44 0f       	add	r20, r20
     996:	44 0f       	add	r20, r20
     998:	40 7c       	andi	r20, 0xC0	; 192
     99a:	44 68       	ori	r20, 0x84	; 132
     99c:	46 bf       	out	0x36, r20	; 54
	if (get_status(status) == 0)
     99e:	0e 94 aa 04 	call	0x954	; 0x954 <get_status>
     9a2:	88 23       	and	r24, r24
     9a4:	29 f4       	brne	.+10     	; 0x9b0 <recv_data+0x26>
	{
		*data = TWDR;
     9a6:	83 b1       	in	r24, 0x03	; 3
     9a8:	88 83       	st	Y, r24
		return 0;
     9aa:	20 e0       	ldi	r18, 0x00	; 0
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <recv_data+0x2a>
	}
	else
	{
		return -1;
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
	}
}
     9b4:	82 2f       	mov	r24, r18
     9b6:	93 2f       	mov	r25, r19
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <twi_init>:
} TwiOperation;

void twi_init(TwiMode mode)
{
	// 1 = output, 0 = input
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
     9be:	94 b3       	in	r25, 0x14	; 20
     9c0:	9c 7f       	andi	r25, 0xFC	; 252
     9c2:	94 bb       	out	0x14, r25	; 20
	PORTC |= 0b00000011; // Internal pull-up on both lines
     9c4:	95 b3       	in	r25, 0x15	; 21
     9c6:	93 60       	ori	r25, 0x03	; 3
     9c8:	95 bb       	out	0x15, r25	; 21

	TWBR = (mode == standard) ? 32 : 2;
     9ca:	88 23       	and	r24, r24
     9cc:	11 f4       	brne	.+4      	; 0x9d2 <twi_init+0x14>
     9ce:	80 e2       	ldi	r24, 0x20	; 32
     9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <twi_init+0x16>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	80 b9       	out	0x00, r24	; 0
	TWSR &= ~(0b11 << TWPS0); // Clearing TWSP to 0
     9d6:	81 b1       	in	r24, 0x01	; 1
     9d8:	8c 7f       	andi	r24, 0xFC	; 252
     9da:	81 b9       	out	0x01, r24	; 1

	TWCR |= (1 << TWEN); // Enable TWI, generating the SCLK
     9dc:	86 b7       	in	r24, 0x36	; 54
     9de:	84 60       	ori	r24, 0x04	; 4
     9e0:	86 bf       	out	0x36, r24	; 54
}
     9e2:	08 95       	ret

000009e4 <twi_shut>:

void twi_shut(void)
{
	TWCR &= ~(1 << TWEN); // Disable TWI
     9e4:	86 b7       	in	r24, 0x36	; 54
     9e6:	8b 7f       	andi	r24, 0xFB	; 251
     9e8:	86 bf       	out	0x36, r24	; 54

	TWBR = 0;
     9ea:	10 b8       	out	0x00, r1	; 0
	TWSR &= ~(0b11 << TWPS0);
     9ec:	81 b1       	in	r24, 0x01	; 1
     9ee:	8c 7f       	andi	r24, 0xFC	; 252
     9f0:	81 b9       	out	0x01, r24	; 1

	// 1 = output, 0 = input
	DDRC &= ~0b00000011; // PC0 = SCL; PC1 = SDA
     9f2:	84 b3       	in	r24, 0x14	; 20
     9f4:	8c 7f       	andi	r24, 0xFC	; 252
     9f6:	84 bb       	out	0x14, r24	; 20
	PORTC &= ~0b00000011; // Clear pull-up on both lines
     9f8:	85 b3       	in	r24, 0x15	; 21
     9fa:	8c 7f       	andi	r24, 0xFC	; 252
     9fc:	85 bb       	out	0x15, r24	; 21
}
     9fe:	08 95       	ret

00000a00 <twi_master_tx>:
		return -1;
	}
}

int twi_master_tx(uint8_t addr, uint8_t *data, int len)
{
     a00:	df 92       	push	r13
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
     a0e:	08 2f       	mov	r16, r24
     a10:	16 2f       	mov	r17, r22
     a12:	d7 2e       	mov	r13, r23
     a14:	7a 01       	movw	r14, r20
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	0e 94 b4 04 	call	0x968	; 0x968 <send_start>
     a1c:	00 97       	sbiw	r24, 0x00	; 0
     a1e:	29 f0       	breq	.+10     	; 0xa2a <twi_master_tx+0x2a>
     a20:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     a24:	2f ef       	ldi	r18, 0xFF	; 255
     a26:	3f ef       	ldi	r19, 0xFF	; 255
     a28:	29 c0       	rjmp	.+82     	; 0xa7c <twi_master_tx+0x7c>
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     a2a:	80 2f       	mov	r24, r16
     a2c:	88 0f       	add	r24, r24
     a2e:	68 e1       	ldi	r22, 0x18	; 24
     a30:	0e 94 bd 04 	call	0x97a	; 0x97a <send_data>
     a34:	00 97       	sbiw	r24, 0x00	; 0
     a36:	21 f4       	brne	.+8      	; 0xa40 <twi_master_tx+0x40>
	for (i = 0; i < len; i++)
     a38:	1e 14       	cp	r1, r14
     a3a:	1f 04       	cpc	r1, r15
     a3c:	34 f0       	brlt	.+12     	; 0xa4a <twi_master_tx+0x4a>
     a3e:	1a c0       	rjmp	.+52     	; 0xa74 <twi_master_tx+0x74>
int twi_master_tx(uint8_t addr, uint8_t *data, int len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     a40:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     a44:	2f ef       	ldi	r18, 0xFF	; 255
     a46:	3f ef       	ldi	r19, 0xFF	; 255
     a48:	19 c0       	rjmp	.+50     	; 0xa7c <twi_master_tx+0x7c>
     a4a:	01 2f       	mov	r16, r17
     a4c:	1d 2d       	mov	r17, r13
	for (i = 0; i < len; i++)
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (send_data(data[i], st_data_w_ack)) QUIT_TWI_OP;
     a52:	f8 01       	movw	r30, r16
     a54:	81 91       	ld	r24, Z+
     a56:	8f 01       	movw	r16, r30
     a58:	68 e2       	ldi	r22, 0x28	; 40
     a5a:	0e 94 bd 04 	call	0x97a	; 0x97a <send_data>
     a5e:	00 97       	sbiw	r24, 0x00	; 0
     a60:	29 f0       	breq	.+10     	; 0xa6c <twi_master_tx+0x6c>
     a62:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     a66:	2f ef       	ldi	r18, 0xFF	; 255
     a68:	3f ef       	ldi	r19, 0xFF	; 255
     a6a:	08 c0       	rjmp	.+16     	; 0xa7c <twi_master_tx+0x7c>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
	for (i = 0; i < len; i++)
     a6c:	21 96       	adiw	r28, 0x01	; 1
     a6e:	ce 15       	cp	r28, r14
     a70:	df 05       	cpc	r29, r15
     a72:	7c f3       	brlt	.-34     	; 0xa52 <twi_master_tx+0x52>
	{
		if (send_data(data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	send_stop();
     a74:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
	return 0;
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
}
     a7c:	82 2f       	mov	r24, r18
     a7e:	93 2f       	mov	r25, r19
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	08 95       	ret

00000a90 <twi_master_rx>:

int twi_master_rx(uint8_t addr, uint8_t *data, int len)
{
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	d8 2e       	mov	r13, r24
     aa0:	7b 01       	movw	r14, r22
     aa2:	8a 01       	movw	r16, r20
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     aa4:	88 e0       	ldi	r24, 0x08	; 8
     aa6:	0e 94 b4 04 	call	0x968	; 0x968 <send_start>
     aaa:	00 97       	sbiw	r24, 0x00	; 0
     aac:	29 f0       	breq	.+10     	; 0xab8 <twi_master_rx+0x28>
     aae:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     ab2:	2f ef       	ldi	r18, 0xFF	; 255
     ab4:	3f ef       	ldi	r19, 0xFF	; 255
     ab6:	3b c0       	rjmp	.+118    	; 0xb2e <twi_master_rx+0x9e>
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     ab8:	8d 2d       	mov	r24, r13
     aba:	88 0f       	add	r24, r24
     abc:	81 60       	ori	r24, 0x01	; 1
     abe:	60 e4       	ldi	r22, 0x40	; 64
     ac0:	0e 94 bd 04 	call	0x97a	; 0x97a <send_data>
     ac4:	00 97       	sbiw	r24, 0x00	; 0
     ac6:	41 f4       	brne	.+16     	; 0xad8 <twi_master_rx+0x48>
	for (i = 0; i < len - 1; i++)
     ac8:	01 50       	subi	r16, 0x01	; 1
     aca:	10 40       	sbci	r17, 0x00	; 0
     acc:	10 16       	cp	r1, r16
     ace:	11 06       	cpc	r1, r17
     ad0:	44 f0       	brlt	.+16     	; 0xae2 <twi_master_rx+0x52>
     ad2:	c0 e0       	ldi	r28, 0x00	; 0
     ad4:	d0 e0       	ldi	r29, 0x00	; 0
     ad6:	19 c0       	rjmp	.+50     	; 0xb0a <twi_master_rx+0x7a>
int twi_master_rx(uint8_t addr, uint8_t *data, int len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     ad8:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     adc:	2f ef       	ldi	r18, 0xFF	; 255
     ade:	3f ef       	ldi	r19, 0xFF	; 255
     ae0:	26 c0       	rjmp	.+76     	; 0xb2e <twi_master_rx+0x9e>
	for (i = 0; i < len - 1; i++)
     ae2:	c0 e0       	ldi	r28, 0x00	; 0
     ae4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (recv_data(&data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
     ae6:	c7 01       	movw	r24, r14
     ae8:	8c 0f       	add	r24, r28
     aea:	9d 1f       	adc	r25, r29
     aec:	60 e5       	ldi	r22, 0x50	; 80
     aee:	41 e0       	ldi	r20, 0x01	; 1
     af0:	0e 94 c5 04 	call	0x98a	; 0x98a <recv_data>
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	29 f0       	breq	.+10     	; 0xb02 <twi_master_rx+0x72>
     af8:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     afc:	2f ef       	ldi	r18, 0xFF	; 255
     afe:	3f ef       	ldi	r19, 0xFF	; 255
     b00:	16 c0       	rjmp	.+44     	; 0xb2e <twi_master_rx+0x9e>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
	for (i = 0; i < len - 1; i++)
     b02:	21 96       	adiw	r28, 0x01	; 1
     b04:	c0 17       	cp	r28, r16
     b06:	d1 07       	cpc	r29, r17
     b08:	74 f3       	brlt	.-36     	; 0xae6 <twi_master_rx+0x56>
	{
		if (recv_data(&data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
	}
	if (recv_data(&data[i], st_data_r_noack, 0)) QUIT_TWI_OP;
     b0a:	c7 01       	movw	r24, r14
     b0c:	8c 0f       	add	r24, r28
     b0e:	9d 1f       	adc	r25, r29
     b10:	68 e5       	ldi	r22, 0x58	; 88
     b12:	40 e0       	ldi	r20, 0x00	; 0
     b14:	0e 94 c5 04 	call	0x98a	; 0x98a <recv_data>
     b18:	00 97       	sbiw	r24, 0x00	; 0
     b1a:	29 f0       	breq	.+10     	; 0xb26 <twi_master_rx+0x96>
     b1c:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     b20:	2f ef       	ldi	r18, 0xFF	; 255
     b22:	3f ef       	ldi	r19, 0xFF	; 255
     b24:	04 c0       	rjmp	.+8      	; 0xb2e <twi_master_rx+0x9e>
	send_stop();
     b26:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
	return 0;
     b2a:	20 e0       	ldi	r18, 0x00	; 0
     b2c:	30 e0       	ldi	r19, 0x00	; 0
}
     b2e:	82 2f       	mov	r24, r18
     b30:	93 2f       	mov	r25, r19
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	08 95       	ret

00000b42 <twi_master_tx_rx>:

int twi_master_tx_rx(uint8_t addr, uint8_t *tx_data, int tx_len, uint8_t *rx_data,
			int rx_len)
{
     b42:	7f 92       	push	r7
     b44:	8f 92       	push	r8
     b46:	9f 92       	push	r9
     b48:	af 92       	push	r10
     b4a:	bf 92       	push	r11
     b4c:	cf 92       	push	r12
     b4e:	df 92       	push	r13
     b50:	ef 92       	push	r14
     b52:	ff 92       	push	r15
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	b8 2e       	mov	r11, r24
     b5e:	a6 2e       	mov	r10, r22
     b60:	77 2e       	mov	r7, r23
     b62:	7a 01       	movw	r14, r20
     b64:	69 01       	movw	r12, r18
     b66:	48 01       	movw	r8, r16
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
     b68:	88 e0       	ldi	r24, 0x08	; 8
     b6a:	0e 94 b4 04 	call	0x968	; 0x968 <send_start>
     b6e:	00 97       	sbiw	r24, 0x00	; 0
     b70:	29 f0       	breq	.+10     	; 0xb7c <twi_master_tx_rx+0x3a>
     b72:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     b76:	2f ef       	ldi	r18, 0xFF	; 255
     b78:	3f ef       	ldi	r19, 0xFF	; 255
     b7a:	6b c0       	rjmp	.+214    	; 0xc52 <twi_master_tx_rx+0x110>
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     b7c:	8b 2d       	mov	r24, r11
     b7e:	88 0f       	add	r24, r24
     b80:	68 e1       	ldi	r22, 0x18	; 24
     b82:	0e 94 bd 04 	call	0x97a	; 0x97a <send_data>
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	21 f4       	brne	.+8      	; 0xb92 <twi_master_tx_rx+0x50>
	for (i = 0; i < tx_len; i++)
     b8a:	1e 14       	cp	r1, r14
     b8c:	1f 04       	cpc	r1, r15
     b8e:	34 f0       	brlt	.+12     	; 0xb9c <twi_master_tx_rx+0x5a>
     b90:	1a c0       	rjmp	.+52     	; 0xbc6 <twi_master_tx_rx+0x84>
			int rx_len)
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
     b92:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     b96:	2f ef       	ldi	r18, 0xFF	; 255
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	5b c0       	rjmp	.+182    	; 0xc52 <twi_master_tx_rx+0x110>
     b9c:	0a 2d       	mov	r16, r10
     b9e:	17 2d       	mov	r17, r7
	for (i = 0; i < tx_len; i++)
     ba0:	c0 e0       	ldi	r28, 0x00	; 0
     ba2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
     ba4:	f8 01       	movw	r30, r16
     ba6:	81 91       	ld	r24, Z+
     ba8:	8f 01       	movw	r16, r30
     baa:	68 e2       	ldi	r22, 0x28	; 40
     bac:	0e 94 bd 04 	call	0x97a	; 0x97a <send_data>
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	29 f0       	breq	.+10     	; 0xbbe <twi_master_tx_rx+0x7c>
     bb4:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     bb8:	2f ef       	ldi	r18, 0xFF	; 255
     bba:	3f ef       	ldi	r19, 0xFF	; 255
     bbc:	4a c0       	rjmp	.+148    	; 0xc52 <twi_master_tx_rx+0x110>
{
	int i;

	if (send_start(st_start)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_write, st_sla_w_ack)) QUIT_TWI_OP;
	for (i = 0; i < tx_len; i++)
     bbe:	21 96       	adiw	r28, 0x01	; 1
     bc0:	ce 15       	cp	r28, r14
     bc2:	df 05       	cpc	r29, r15
     bc4:	7c f3       	brlt	.-34     	; 0xba4 <twi_master_tx_rx+0x62>
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
     bc6:	80 e1       	ldi	r24, 0x10	; 16
     bc8:	0e 94 b4 04 	call	0x968	; 0x968 <send_start>
     bcc:	00 97       	sbiw	r24, 0x00	; 0
     bce:	29 f0       	breq	.+10     	; 0xbda <twi_master_tx_rx+0x98>
     bd0:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     bd4:	2f ef       	ldi	r18, 0xFF	; 255
     bd6:	3f ef       	ldi	r19, 0xFF	; 255
     bd8:	3c c0       	rjmp	.+120    	; 0xc52 <twi_master_tx_rx+0x110>
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     bda:	8b 2d       	mov	r24, r11
     bdc:	88 0f       	add	r24, r24
     bde:	81 60       	ori	r24, 0x01	; 1
     be0:	60 e4       	ldi	r22, 0x40	; 64
     be2:	0e 94 bd 04 	call	0x97a	; 0x97a <send_data>
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	49 f4       	brne	.+18     	; 0xbfc <twi_master_tx_rx+0xba>
	for (i = 0; i < rx_len - 1; i++)
     bea:	84 01       	movw	r16, r8
     bec:	01 50       	subi	r16, 0x01	; 1
     bee:	10 40       	sbci	r17, 0x00	; 0
     bf0:	10 16       	cp	r1, r16
     bf2:	11 06       	cpc	r1, r17
     bf4:	44 f0       	brlt	.+16     	; 0xc06 <twi_master_tx_rx+0xc4>
     bf6:	c0 e0       	ldi	r28, 0x00	; 0
     bf8:	d0 e0       	ldi	r29, 0x00	; 0
     bfa:	19 c0       	rjmp	.+50     	; 0xc2e <twi_master_tx_rx+0xec>
	for (i = 0; i < tx_len; i++)
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
     bfc:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     c00:	2f ef       	ldi	r18, 0xFF	; 255
     c02:	3f ef       	ldi	r19, 0xFF	; 255
     c04:	26 c0       	rjmp	.+76     	; 0xc52 <twi_master_tx_rx+0x110>
	for (i = 0; i < rx_len - 1; i++)
     c06:	c0 e0       	ldi	r28, 0x00	; 0
     c08:	d0 e0       	ldi	r29, 0x00	; 0
	{
		if (recv_data(&rx_data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
     c0a:	c6 01       	movw	r24, r12
     c0c:	8c 0f       	add	r24, r28
     c0e:	9d 1f       	adc	r25, r29
     c10:	60 e5       	ldi	r22, 0x50	; 80
     c12:	41 e0       	ldi	r20, 0x01	; 1
     c14:	0e 94 c5 04 	call	0x98a	; 0x98a <recv_data>
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	29 f0       	breq	.+10     	; 0xc26 <twi_master_tx_rx+0xe4>
     c1c:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     c20:	2f ef       	ldi	r18, 0xFF	; 255
     c22:	3f ef       	ldi	r19, 0xFF	; 255
     c24:	16 c0       	rjmp	.+44     	; 0xc52 <twi_master_tx_rx+0x110>
	{
		if (send_data(tx_data[i], st_data_w_ack)) QUIT_TWI_OP;
	}
	if (send_start(st_restart)) QUIT_TWI_OP;
	if (send_data((addr << 1) | dir_read, st_sla_r_ack)) QUIT_TWI_OP;
	for (i = 0; i < rx_len - 1; i++)
     c26:	21 96       	adiw	r28, 0x01	; 1
     c28:	c0 17       	cp	r28, r16
     c2a:	d1 07       	cpc	r29, r17
     c2c:	74 f3       	brlt	.-36     	; 0xc0a <twi_master_tx_rx+0xc8>
	{
		if (recv_data(&rx_data[i], st_data_r_ack, 1)) QUIT_TWI_OP;
	}
	if (recv_data(&rx_data[i], st_data_r_noack, 0)) QUIT_TWI_OP;
     c2e:	c6 01       	movw	r24, r12
     c30:	8c 0f       	add	r24, r28
     c32:	9d 1f       	adc	r25, r29
     c34:	68 e5       	ldi	r22, 0x58	; 88
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	0e 94 c5 04 	call	0x98a	; 0x98a <recv_data>
     c3c:	00 97       	sbiw	r24, 0x00	; 0
     c3e:	29 f0       	breq	.+10     	; 0xc4a <twi_master_tx_rx+0x108>
     c40:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
     c44:	2f ef       	ldi	r18, 0xFF	; 255
     c46:	3f ef       	ldi	r19, 0xFF	; 255
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <twi_master_tx_rx+0x110>
	send_stop();
     c4a:	0e 94 ba 04 	call	0x974	; 0x974 <send_stop>
	return 0;
     c4e:	20 e0       	ldi	r18, 0x00	; 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
}
     c52:	82 2f       	mov	r24, r18
     c54:	93 2f       	mov	r25, r19
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	df 90       	pop	r13
     c64:	cf 90       	pop	r12
     c66:	bf 90       	pop	r11
     c68:	af 90       	pop	r10
     c6a:	9f 90       	pop	r9
     c6c:	8f 90       	pop	r8
     c6e:	7f 90       	pop	r7
     c70:	08 95       	ret

00000c72 <UARTInit>:
#include "main.h"
#include "uartlib.h"

void UARTInit()
{		
	UCSRA = 0x00;
     c72:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
     c74:	8a b1       	in	r24, 0x0a	; 10
     c76:	88 61       	ori	r24, 0x18	; 24
     c78:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
     c7a:	80 b5       	in	r24, 0x20	; 32
     c7c:	86 68       	ori	r24, 0x86	; 134
     c7e:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;
     c80:	89 e1       	ldi	r24, 0x19	; 25
     c82:	89 b9       	out	0x09, r24	; 9
}
     c84:	08 95       	ret

00000c86 <UARTSend>:

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
     c86:	5d 9b       	sbis	0x0b, 5	; 11
     c88:	fe cf       	rjmp	.-4      	; 0xc86 <UARTSend>
	{
				
	}		
	UDR = Value;
     c8a:	8c b9       	out	0x0c, r24	; 12
}
     c8c:	08 95       	ret

00000c8e <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
     c8e:	5f 9b       	sbis	0x0b, 7	; 11
     c90:	fe cf       	rjmp	.-4      	; 0xc8e <UARTReceive>
	{
		
	}		
	return UDR; 
     c92:	8c b1       	in	r24, 0x0c	; 12
}
     c94:	08 95       	ret

00000c96 <SendString>:

void SendString(char* str)
{
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	ec 01       	movw	r28, r24
	while(*str != '\0')
     c9c:	88 81       	ld	r24, Y
     c9e:	88 23       	and	r24, r24
     ca0:	31 f0       	breq	.+12     	; 0xcae <SendString+0x18>
		
	}		
	return UDR; 
}

void SendString(char* str)
     ca2:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
     ca4:	0e 94 43 06 	call	0xc86	; 0xc86 <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
     ca8:	89 91       	ld	r24, Y+
     caa:	88 23       	and	r24, r24
     cac:	d9 f7       	brne	.-10     	; 0xca4 <SendString+0xe>
	}
// 	//UARTSend(*str);
// 		
// 	UARTSend('\r');
// 	UARTSend('\n');
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	08 95       	ret

00000cb4 <__subsf3>:
     cb4:	50 58       	subi	r21, 0x80	; 128

00000cb6 <__addsf3>:
     cb6:	bb 27       	eor	r27, r27
     cb8:	aa 27       	eor	r26, r26
     cba:	0e d0       	rcall	.+28     	; 0xcd8 <__addsf3x>
     cbc:	4d c1       	rjmp	.+666    	; 0xf58 <__fp_round>
     cbe:	3e d1       	rcall	.+636    	; 0xf3c <__fp_pscA>
     cc0:	30 f0       	brcs	.+12     	; 0xcce <__addsf3+0x18>
     cc2:	43 d1       	rcall	.+646    	; 0xf4a <__fp_pscB>
     cc4:	20 f0       	brcs	.+8      	; 0xcce <__addsf3+0x18>
     cc6:	31 f4       	brne	.+12     	; 0xcd4 <__addsf3+0x1e>
     cc8:	9f 3f       	cpi	r25, 0xFF	; 255
     cca:	11 f4       	brne	.+4      	; 0xcd0 <__addsf3+0x1a>
     ccc:	1e f4       	brtc	.+6      	; 0xcd4 <__addsf3+0x1e>
     cce:	33 c1       	rjmp	.+614    	; 0xf36 <__fp_nan>
     cd0:	0e f4       	brtc	.+2      	; 0xcd4 <__addsf3+0x1e>
     cd2:	e0 95       	com	r30
     cd4:	e7 fb       	bst	r30, 7
     cd6:	29 c1       	rjmp	.+594    	; 0xf2a <__fp_inf>

00000cd8 <__addsf3x>:
     cd8:	e9 2f       	mov	r30, r25
     cda:	4f d1       	rcall	.+670    	; 0xf7a <__fp_split3>
     cdc:	80 f3       	brcs	.-32     	; 0xcbe <__addsf3+0x8>
     cde:	ba 17       	cp	r27, r26
     ce0:	62 07       	cpc	r22, r18
     ce2:	73 07       	cpc	r23, r19
     ce4:	84 07       	cpc	r24, r20
     ce6:	95 07       	cpc	r25, r21
     ce8:	18 f0       	brcs	.+6      	; 0xcf0 <__addsf3x+0x18>
     cea:	71 f4       	brne	.+28     	; 0xd08 <__addsf3x+0x30>
     cec:	9e f5       	brtc	.+102    	; 0xd54 <__addsf3x+0x7c>
     cee:	67 c1       	rjmp	.+718    	; 0xfbe <__fp_zero>
     cf0:	0e f4       	brtc	.+2      	; 0xcf4 <__addsf3x+0x1c>
     cf2:	e0 95       	com	r30
     cf4:	0b 2e       	mov	r0, r27
     cf6:	ba 2f       	mov	r27, r26
     cf8:	a0 2d       	mov	r26, r0
     cfa:	0b 01       	movw	r0, r22
     cfc:	b9 01       	movw	r22, r18
     cfe:	90 01       	movw	r18, r0
     d00:	0c 01       	movw	r0, r24
     d02:	ca 01       	movw	r24, r20
     d04:	a0 01       	movw	r20, r0
     d06:	11 24       	eor	r1, r1
     d08:	ff 27       	eor	r31, r31
     d0a:	59 1b       	sub	r21, r25
     d0c:	99 f0       	breq	.+38     	; 0xd34 <__addsf3x+0x5c>
     d0e:	59 3f       	cpi	r21, 0xF9	; 249
     d10:	50 f4       	brcc	.+20     	; 0xd26 <__addsf3x+0x4e>
     d12:	50 3e       	cpi	r21, 0xE0	; 224
     d14:	68 f1       	brcs	.+90     	; 0xd70 <__addsf3x+0x98>
     d16:	1a 16       	cp	r1, r26
     d18:	f0 40       	sbci	r31, 0x00	; 0
     d1a:	a2 2f       	mov	r26, r18
     d1c:	23 2f       	mov	r18, r19
     d1e:	34 2f       	mov	r19, r20
     d20:	44 27       	eor	r20, r20
     d22:	58 5f       	subi	r21, 0xF8	; 248
     d24:	f3 cf       	rjmp	.-26     	; 0xd0c <__addsf3x+0x34>
     d26:	46 95       	lsr	r20
     d28:	37 95       	ror	r19
     d2a:	27 95       	ror	r18
     d2c:	a7 95       	ror	r26
     d2e:	f0 40       	sbci	r31, 0x00	; 0
     d30:	53 95       	inc	r21
     d32:	c9 f7       	brne	.-14     	; 0xd26 <__addsf3x+0x4e>
     d34:	7e f4       	brtc	.+30     	; 0xd54 <__addsf3x+0x7c>
     d36:	1f 16       	cp	r1, r31
     d38:	ba 0b       	sbc	r27, r26
     d3a:	62 0b       	sbc	r22, r18
     d3c:	73 0b       	sbc	r23, r19
     d3e:	84 0b       	sbc	r24, r20
     d40:	ba f0       	brmi	.+46     	; 0xd70 <__addsf3x+0x98>
     d42:	91 50       	subi	r25, 0x01	; 1
     d44:	a1 f0       	breq	.+40     	; 0xd6e <__addsf3x+0x96>
     d46:	ff 0f       	add	r31, r31
     d48:	bb 1f       	adc	r27, r27
     d4a:	66 1f       	adc	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	88 1f       	adc	r24, r24
     d50:	c2 f7       	brpl	.-16     	; 0xd42 <__addsf3x+0x6a>
     d52:	0e c0       	rjmp	.+28     	; 0xd70 <__addsf3x+0x98>
     d54:	ba 0f       	add	r27, r26
     d56:	62 1f       	adc	r22, r18
     d58:	73 1f       	adc	r23, r19
     d5a:	84 1f       	adc	r24, r20
     d5c:	48 f4       	brcc	.+18     	; 0xd70 <__addsf3x+0x98>
     d5e:	87 95       	ror	r24
     d60:	77 95       	ror	r23
     d62:	67 95       	ror	r22
     d64:	b7 95       	ror	r27
     d66:	f7 95       	ror	r31
     d68:	9e 3f       	cpi	r25, 0xFE	; 254
     d6a:	08 f0       	brcs	.+2      	; 0xd6e <__addsf3x+0x96>
     d6c:	b3 cf       	rjmp	.-154    	; 0xcd4 <__addsf3+0x1e>
     d6e:	93 95       	inc	r25
     d70:	88 0f       	add	r24, r24
     d72:	08 f0       	brcs	.+2      	; 0xd76 <__addsf3x+0x9e>
     d74:	99 27       	eor	r25, r25
     d76:	ee 0f       	add	r30, r30
     d78:	97 95       	ror	r25
     d7a:	87 95       	ror	r24
     d7c:	08 95       	ret

00000d7e <__divsf3>:
     d7e:	0c d0       	rcall	.+24     	; 0xd98 <__divsf3x>
     d80:	eb c0       	rjmp	.+470    	; 0xf58 <__fp_round>
     d82:	e3 d0       	rcall	.+454    	; 0xf4a <__fp_pscB>
     d84:	40 f0       	brcs	.+16     	; 0xd96 <__divsf3+0x18>
     d86:	da d0       	rcall	.+436    	; 0xf3c <__fp_pscA>
     d88:	30 f0       	brcs	.+12     	; 0xd96 <__divsf3+0x18>
     d8a:	21 f4       	brne	.+8      	; 0xd94 <__divsf3+0x16>
     d8c:	5f 3f       	cpi	r21, 0xFF	; 255
     d8e:	19 f0       	breq	.+6      	; 0xd96 <__divsf3+0x18>
     d90:	cc c0       	rjmp	.+408    	; 0xf2a <__fp_inf>
     d92:	51 11       	cpse	r21, r1
     d94:	15 c1       	rjmp	.+554    	; 0xfc0 <__fp_szero>
     d96:	cf c0       	rjmp	.+414    	; 0xf36 <__fp_nan>

00000d98 <__divsf3x>:
     d98:	f0 d0       	rcall	.+480    	; 0xf7a <__fp_split3>
     d9a:	98 f3       	brcs	.-26     	; 0xd82 <__divsf3+0x4>

00000d9c <__divsf3_pse>:
     d9c:	99 23       	and	r25, r25
     d9e:	c9 f3       	breq	.-14     	; 0xd92 <__divsf3+0x14>
     da0:	55 23       	and	r21, r21
     da2:	b1 f3       	breq	.-20     	; 0xd90 <__divsf3+0x12>
     da4:	95 1b       	sub	r25, r21
     da6:	55 0b       	sbc	r21, r21
     da8:	bb 27       	eor	r27, r27
     daa:	aa 27       	eor	r26, r26
     dac:	62 17       	cp	r22, r18
     dae:	73 07       	cpc	r23, r19
     db0:	84 07       	cpc	r24, r20
     db2:	38 f0       	brcs	.+14     	; 0xdc2 <__divsf3_pse+0x26>
     db4:	9f 5f       	subi	r25, 0xFF	; 255
     db6:	5f 4f       	sbci	r21, 0xFF	; 255
     db8:	22 0f       	add	r18, r18
     dba:	33 1f       	adc	r19, r19
     dbc:	44 1f       	adc	r20, r20
     dbe:	aa 1f       	adc	r26, r26
     dc0:	a9 f3       	breq	.-22     	; 0xdac <__divsf3_pse+0x10>
     dc2:	33 d0       	rcall	.+102    	; 0xe2a <__divsf3_pse+0x8e>
     dc4:	0e 2e       	mov	r0, r30
     dc6:	3a f0       	brmi	.+14     	; 0xdd6 <__divsf3_pse+0x3a>
     dc8:	e0 e8       	ldi	r30, 0x80	; 128
     dca:	30 d0       	rcall	.+96     	; 0xe2c <__divsf3_pse+0x90>
     dcc:	91 50       	subi	r25, 0x01	; 1
     dce:	50 40       	sbci	r21, 0x00	; 0
     dd0:	e6 95       	lsr	r30
     dd2:	00 1c       	adc	r0, r0
     dd4:	ca f7       	brpl	.-14     	; 0xdc8 <__divsf3_pse+0x2c>
     dd6:	29 d0       	rcall	.+82     	; 0xe2a <__divsf3_pse+0x8e>
     dd8:	fe 2f       	mov	r31, r30
     dda:	27 d0       	rcall	.+78     	; 0xe2a <__divsf3_pse+0x8e>
     ddc:	66 0f       	add	r22, r22
     dde:	77 1f       	adc	r23, r23
     de0:	88 1f       	adc	r24, r24
     de2:	bb 1f       	adc	r27, r27
     de4:	26 17       	cp	r18, r22
     de6:	37 07       	cpc	r19, r23
     de8:	48 07       	cpc	r20, r24
     dea:	ab 07       	cpc	r26, r27
     dec:	b0 e8       	ldi	r27, 0x80	; 128
     dee:	09 f0       	breq	.+2      	; 0xdf2 <__divsf3_pse+0x56>
     df0:	bb 0b       	sbc	r27, r27
     df2:	80 2d       	mov	r24, r0
     df4:	bf 01       	movw	r22, r30
     df6:	ff 27       	eor	r31, r31
     df8:	93 58       	subi	r25, 0x83	; 131
     dfa:	5f 4f       	sbci	r21, 0xFF	; 255
     dfc:	2a f0       	brmi	.+10     	; 0xe08 <__divsf3_pse+0x6c>
     dfe:	9e 3f       	cpi	r25, 0xFE	; 254
     e00:	51 05       	cpc	r21, r1
     e02:	68 f0       	brcs	.+26     	; 0xe1e <__divsf3_pse+0x82>
     e04:	92 c0       	rjmp	.+292    	; 0xf2a <__fp_inf>
     e06:	dc c0       	rjmp	.+440    	; 0xfc0 <__fp_szero>
     e08:	5f 3f       	cpi	r21, 0xFF	; 255
     e0a:	ec f3       	brlt	.-6      	; 0xe06 <__divsf3_pse+0x6a>
     e0c:	98 3e       	cpi	r25, 0xE8	; 232
     e0e:	dc f3       	brlt	.-10     	; 0xe06 <__divsf3_pse+0x6a>
     e10:	86 95       	lsr	r24
     e12:	77 95       	ror	r23
     e14:	67 95       	ror	r22
     e16:	b7 95       	ror	r27
     e18:	f7 95       	ror	r31
     e1a:	9f 5f       	subi	r25, 0xFF	; 255
     e1c:	c9 f7       	brne	.-14     	; 0xe10 <__divsf3_pse+0x74>
     e1e:	88 0f       	add	r24, r24
     e20:	91 1d       	adc	r25, r1
     e22:	96 95       	lsr	r25
     e24:	87 95       	ror	r24
     e26:	97 f9       	bld	r25, 7
     e28:	08 95       	ret
     e2a:	e1 e0       	ldi	r30, 0x01	; 1
     e2c:	66 0f       	add	r22, r22
     e2e:	77 1f       	adc	r23, r23
     e30:	88 1f       	adc	r24, r24
     e32:	bb 1f       	adc	r27, r27
     e34:	62 17       	cp	r22, r18
     e36:	73 07       	cpc	r23, r19
     e38:	84 07       	cpc	r24, r20
     e3a:	ba 07       	cpc	r27, r26
     e3c:	20 f0       	brcs	.+8      	; 0xe46 <__divsf3_pse+0xaa>
     e3e:	62 1b       	sub	r22, r18
     e40:	73 0b       	sbc	r23, r19
     e42:	84 0b       	sbc	r24, r20
     e44:	ba 0b       	sbc	r27, r26
     e46:	ee 1f       	adc	r30, r30
     e48:	88 f7       	brcc	.-30     	; 0xe2c <__divsf3_pse+0x90>
     e4a:	e0 95       	com	r30
     e4c:	08 95       	ret

00000e4e <__fixsfsi>:
     e4e:	04 d0       	rcall	.+8      	; 0xe58 <__fixunssfsi>
     e50:	68 94       	set
     e52:	b1 11       	cpse	r27, r1
     e54:	b5 c0       	rjmp	.+362    	; 0xfc0 <__fp_szero>
     e56:	08 95       	ret

00000e58 <__fixunssfsi>:
     e58:	98 d0       	rcall	.+304    	; 0xf8a <__fp_splitA>
     e5a:	88 f0       	brcs	.+34     	; 0xe7e <__fixunssfsi+0x26>
     e5c:	9f 57       	subi	r25, 0x7F	; 127
     e5e:	90 f0       	brcs	.+36     	; 0xe84 <__fixunssfsi+0x2c>
     e60:	b9 2f       	mov	r27, r25
     e62:	99 27       	eor	r25, r25
     e64:	b7 51       	subi	r27, 0x17	; 23
     e66:	a0 f0       	brcs	.+40     	; 0xe90 <__fixunssfsi+0x38>
     e68:	d1 f0       	breq	.+52     	; 0xe9e <__fixunssfsi+0x46>
     e6a:	66 0f       	add	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	88 1f       	adc	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	1a f0       	brmi	.+6      	; 0xe7a <__fixunssfsi+0x22>
     e74:	ba 95       	dec	r27
     e76:	c9 f7       	brne	.-14     	; 0xe6a <__fixunssfsi+0x12>
     e78:	12 c0       	rjmp	.+36     	; 0xe9e <__fixunssfsi+0x46>
     e7a:	b1 30       	cpi	r27, 0x01	; 1
     e7c:	81 f0       	breq	.+32     	; 0xe9e <__fixunssfsi+0x46>
     e7e:	9f d0       	rcall	.+318    	; 0xfbe <__fp_zero>
     e80:	b1 e0       	ldi	r27, 0x01	; 1
     e82:	08 95       	ret
     e84:	9c c0       	rjmp	.+312    	; 0xfbe <__fp_zero>
     e86:	67 2f       	mov	r22, r23
     e88:	78 2f       	mov	r23, r24
     e8a:	88 27       	eor	r24, r24
     e8c:	b8 5f       	subi	r27, 0xF8	; 248
     e8e:	39 f0       	breq	.+14     	; 0xe9e <__fixunssfsi+0x46>
     e90:	b9 3f       	cpi	r27, 0xF9	; 249
     e92:	cc f3       	brlt	.-14     	; 0xe86 <__fixunssfsi+0x2e>
     e94:	86 95       	lsr	r24
     e96:	77 95       	ror	r23
     e98:	67 95       	ror	r22
     e9a:	b3 95       	inc	r27
     e9c:	d9 f7       	brne	.-10     	; 0xe94 <__fixunssfsi+0x3c>
     e9e:	3e f4       	brtc	.+14     	; 0xeae <__fixunssfsi+0x56>
     ea0:	90 95       	com	r25
     ea2:	80 95       	com	r24
     ea4:	70 95       	com	r23
     ea6:	61 95       	neg	r22
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	8f 4f       	sbci	r24, 0xFF	; 255
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	08 95       	ret

00000eb0 <__floatunsisf>:
     eb0:	e8 94       	clt
     eb2:	09 c0       	rjmp	.+18     	; 0xec6 <__floatsisf+0x12>

00000eb4 <__floatsisf>:
     eb4:	97 fb       	bst	r25, 7
     eb6:	3e f4       	brtc	.+14     	; 0xec6 <__floatsisf+0x12>
     eb8:	90 95       	com	r25
     eba:	80 95       	com	r24
     ebc:	70 95       	com	r23
     ebe:	61 95       	neg	r22
     ec0:	7f 4f       	sbci	r23, 0xFF	; 255
     ec2:	8f 4f       	sbci	r24, 0xFF	; 255
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	99 23       	and	r25, r25
     ec8:	a9 f0       	breq	.+42     	; 0xef4 <__floatsisf+0x40>
     eca:	f9 2f       	mov	r31, r25
     ecc:	96 e9       	ldi	r25, 0x96	; 150
     ece:	bb 27       	eor	r27, r27
     ed0:	93 95       	inc	r25
     ed2:	f6 95       	lsr	r31
     ed4:	87 95       	ror	r24
     ed6:	77 95       	ror	r23
     ed8:	67 95       	ror	r22
     eda:	b7 95       	ror	r27
     edc:	f1 11       	cpse	r31, r1
     ede:	f8 cf       	rjmp	.-16     	; 0xed0 <__floatsisf+0x1c>
     ee0:	fa f4       	brpl	.+62     	; 0xf20 <__floatsisf+0x6c>
     ee2:	bb 0f       	add	r27, r27
     ee4:	11 f4       	brne	.+4      	; 0xeea <__floatsisf+0x36>
     ee6:	60 ff       	sbrs	r22, 0
     ee8:	1b c0       	rjmp	.+54     	; 0xf20 <__floatsisf+0x6c>
     eea:	6f 5f       	subi	r22, 0xFF	; 255
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	16 c0       	rjmp	.+44     	; 0xf20 <__floatsisf+0x6c>
     ef4:	88 23       	and	r24, r24
     ef6:	11 f0       	breq	.+4      	; 0xefc <__floatsisf+0x48>
     ef8:	96 e9       	ldi	r25, 0x96	; 150
     efa:	11 c0       	rjmp	.+34     	; 0xf1e <__floatsisf+0x6a>
     efc:	77 23       	and	r23, r23
     efe:	21 f0       	breq	.+8      	; 0xf08 <__floatsisf+0x54>
     f00:	9e e8       	ldi	r25, 0x8E	; 142
     f02:	87 2f       	mov	r24, r23
     f04:	76 2f       	mov	r23, r22
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <__floatsisf+0x5e>
     f08:	66 23       	and	r22, r22
     f0a:	71 f0       	breq	.+28     	; 0xf28 <__floatsisf+0x74>
     f0c:	96 e8       	ldi	r25, 0x86	; 134
     f0e:	86 2f       	mov	r24, r22
     f10:	70 e0       	ldi	r23, 0x00	; 0
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	2a f0       	brmi	.+10     	; 0xf20 <__floatsisf+0x6c>
     f16:	9a 95       	dec	r25
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	da f7       	brpl	.-10     	; 0xf16 <__floatsisf+0x62>
     f20:	88 0f       	add	r24, r24
     f22:	96 95       	lsr	r25
     f24:	87 95       	ror	r24
     f26:	97 f9       	bld	r25, 7
     f28:	08 95       	ret

00000f2a <__fp_inf>:
     f2a:	97 f9       	bld	r25, 7
     f2c:	9f 67       	ori	r25, 0x7F	; 127
     f2e:	80 e8       	ldi	r24, 0x80	; 128
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	08 95       	ret

00000f36 <__fp_nan>:
     f36:	9f ef       	ldi	r25, 0xFF	; 255
     f38:	80 ec       	ldi	r24, 0xC0	; 192
     f3a:	08 95       	ret

00000f3c <__fp_pscA>:
     f3c:	00 24       	eor	r0, r0
     f3e:	0a 94       	dec	r0
     f40:	16 16       	cp	r1, r22
     f42:	17 06       	cpc	r1, r23
     f44:	18 06       	cpc	r1, r24
     f46:	09 06       	cpc	r0, r25
     f48:	08 95       	ret

00000f4a <__fp_pscB>:
     f4a:	00 24       	eor	r0, r0
     f4c:	0a 94       	dec	r0
     f4e:	12 16       	cp	r1, r18
     f50:	13 06       	cpc	r1, r19
     f52:	14 06       	cpc	r1, r20
     f54:	05 06       	cpc	r0, r21
     f56:	08 95       	ret

00000f58 <__fp_round>:
     f58:	09 2e       	mov	r0, r25
     f5a:	03 94       	inc	r0
     f5c:	00 0c       	add	r0, r0
     f5e:	11 f4       	brne	.+4      	; 0xf64 <__fp_round+0xc>
     f60:	88 23       	and	r24, r24
     f62:	52 f0       	brmi	.+20     	; 0xf78 <__fp_round+0x20>
     f64:	bb 0f       	add	r27, r27
     f66:	40 f4       	brcc	.+16     	; 0xf78 <__fp_round+0x20>
     f68:	bf 2b       	or	r27, r31
     f6a:	11 f4       	brne	.+4      	; 0xf70 <__fp_round+0x18>
     f6c:	60 ff       	sbrs	r22, 0
     f6e:	04 c0       	rjmp	.+8      	; 0xf78 <__fp_round+0x20>
     f70:	6f 5f       	subi	r22, 0xFF	; 255
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	8f 4f       	sbci	r24, 0xFF	; 255
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	08 95       	ret

00000f7a <__fp_split3>:
     f7a:	57 fd       	sbrc	r21, 7
     f7c:	90 58       	subi	r25, 0x80	; 128
     f7e:	44 0f       	add	r20, r20
     f80:	55 1f       	adc	r21, r21
     f82:	59 f0       	breq	.+22     	; 0xf9a <__fp_splitA+0x10>
     f84:	5f 3f       	cpi	r21, 0xFF	; 255
     f86:	71 f0       	breq	.+28     	; 0xfa4 <__fp_splitA+0x1a>
     f88:	47 95       	ror	r20

00000f8a <__fp_splitA>:
     f8a:	88 0f       	add	r24, r24
     f8c:	97 fb       	bst	r25, 7
     f8e:	99 1f       	adc	r25, r25
     f90:	61 f0       	breq	.+24     	; 0xfaa <__fp_splitA+0x20>
     f92:	9f 3f       	cpi	r25, 0xFF	; 255
     f94:	79 f0       	breq	.+30     	; 0xfb4 <__fp_splitA+0x2a>
     f96:	87 95       	ror	r24
     f98:	08 95       	ret
     f9a:	12 16       	cp	r1, r18
     f9c:	13 06       	cpc	r1, r19
     f9e:	14 06       	cpc	r1, r20
     fa0:	55 1f       	adc	r21, r21
     fa2:	f2 cf       	rjmp	.-28     	; 0xf88 <__fp_split3+0xe>
     fa4:	46 95       	lsr	r20
     fa6:	f1 df       	rcall	.-30     	; 0xf8a <__fp_splitA>
     fa8:	08 c0       	rjmp	.+16     	; 0xfba <__fp_splitA+0x30>
     faa:	16 16       	cp	r1, r22
     fac:	17 06       	cpc	r1, r23
     fae:	18 06       	cpc	r1, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	f1 cf       	rjmp	.-30     	; 0xf96 <__fp_splitA+0xc>
     fb4:	86 95       	lsr	r24
     fb6:	71 05       	cpc	r23, r1
     fb8:	61 05       	cpc	r22, r1
     fba:	08 94       	sec
     fbc:	08 95       	ret

00000fbe <__fp_zero>:
     fbe:	e8 94       	clt

00000fc0 <__fp_szero>:
     fc0:	bb 27       	eor	r27, r27
     fc2:	66 27       	eor	r22, r22
     fc4:	77 27       	eor	r23, r23
     fc6:	cb 01       	movw	r24, r22
     fc8:	97 f9       	bld	r25, 7
     fca:	08 95       	ret

00000fcc <__mulsf3>:
     fcc:	0b d0       	rcall	.+22     	; 0xfe4 <__mulsf3x>
     fce:	c4 cf       	rjmp	.-120    	; 0xf58 <__fp_round>
     fd0:	b5 df       	rcall	.-150    	; 0xf3c <__fp_pscA>
     fd2:	28 f0       	brcs	.+10     	; 0xfde <__mulsf3+0x12>
     fd4:	ba df       	rcall	.-140    	; 0xf4a <__fp_pscB>
     fd6:	18 f0       	brcs	.+6      	; 0xfde <__mulsf3+0x12>
     fd8:	95 23       	and	r25, r21
     fda:	09 f0       	breq	.+2      	; 0xfde <__mulsf3+0x12>
     fdc:	a6 cf       	rjmp	.-180    	; 0xf2a <__fp_inf>
     fde:	ab cf       	rjmp	.-170    	; 0xf36 <__fp_nan>
     fe0:	11 24       	eor	r1, r1
     fe2:	ee cf       	rjmp	.-36     	; 0xfc0 <__fp_szero>

00000fe4 <__mulsf3x>:
     fe4:	ca df       	rcall	.-108    	; 0xf7a <__fp_split3>
     fe6:	a0 f3       	brcs	.-24     	; 0xfd0 <__mulsf3+0x4>

00000fe8 <__mulsf3_pse>:
     fe8:	95 9f       	mul	r25, r21
     fea:	d1 f3       	breq	.-12     	; 0xfe0 <__mulsf3+0x14>
     fec:	95 0f       	add	r25, r21
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	55 1f       	adc	r21, r21
     ff2:	62 9f       	mul	r22, r18
     ff4:	f0 01       	movw	r30, r0
     ff6:	72 9f       	mul	r23, r18
     ff8:	bb 27       	eor	r27, r27
     ffa:	f0 0d       	add	r31, r0
     ffc:	b1 1d       	adc	r27, r1
     ffe:	63 9f       	mul	r22, r19
    1000:	aa 27       	eor	r26, r26
    1002:	f0 0d       	add	r31, r0
    1004:	b1 1d       	adc	r27, r1
    1006:	aa 1f       	adc	r26, r26
    1008:	64 9f       	mul	r22, r20
    100a:	66 27       	eor	r22, r22
    100c:	b0 0d       	add	r27, r0
    100e:	a1 1d       	adc	r26, r1
    1010:	66 1f       	adc	r22, r22
    1012:	82 9f       	mul	r24, r18
    1014:	22 27       	eor	r18, r18
    1016:	b0 0d       	add	r27, r0
    1018:	a1 1d       	adc	r26, r1
    101a:	62 1f       	adc	r22, r18
    101c:	73 9f       	mul	r23, r19
    101e:	b0 0d       	add	r27, r0
    1020:	a1 1d       	adc	r26, r1
    1022:	62 1f       	adc	r22, r18
    1024:	83 9f       	mul	r24, r19
    1026:	a0 0d       	add	r26, r0
    1028:	61 1d       	adc	r22, r1
    102a:	22 1f       	adc	r18, r18
    102c:	74 9f       	mul	r23, r20
    102e:	33 27       	eor	r19, r19
    1030:	a0 0d       	add	r26, r0
    1032:	61 1d       	adc	r22, r1
    1034:	23 1f       	adc	r18, r19
    1036:	84 9f       	mul	r24, r20
    1038:	60 0d       	add	r22, r0
    103a:	21 1d       	adc	r18, r1
    103c:	82 2f       	mov	r24, r18
    103e:	76 2f       	mov	r23, r22
    1040:	6a 2f       	mov	r22, r26
    1042:	11 24       	eor	r1, r1
    1044:	9f 57       	subi	r25, 0x7F	; 127
    1046:	50 40       	sbci	r21, 0x00	; 0
    1048:	8a f0       	brmi	.+34     	; 0x106c <__mulsf3_pse+0x84>
    104a:	e1 f0       	breq	.+56     	; 0x1084 <__mulsf3_pse+0x9c>
    104c:	88 23       	and	r24, r24
    104e:	4a f0       	brmi	.+18     	; 0x1062 <__mulsf3_pse+0x7a>
    1050:	ee 0f       	add	r30, r30
    1052:	ff 1f       	adc	r31, r31
    1054:	bb 1f       	adc	r27, r27
    1056:	66 1f       	adc	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	88 1f       	adc	r24, r24
    105c:	91 50       	subi	r25, 0x01	; 1
    105e:	50 40       	sbci	r21, 0x00	; 0
    1060:	a9 f7       	brne	.-22     	; 0x104c <__mulsf3_pse+0x64>
    1062:	9e 3f       	cpi	r25, 0xFE	; 254
    1064:	51 05       	cpc	r21, r1
    1066:	70 f0       	brcs	.+28     	; 0x1084 <__mulsf3_pse+0x9c>
    1068:	60 cf       	rjmp	.-320    	; 0xf2a <__fp_inf>
    106a:	aa cf       	rjmp	.-172    	; 0xfc0 <__fp_szero>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	ec f3       	brlt	.-6      	; 0x106a <__mulsf3_pse+0x82>
    1070:	98 3e       	cpi	r25, 0xE8	; 232
    1072:	dc f3       	brlt	.-10     	; 0x106a <__mulsf3_pse+0x82>
    1074:	86 95       	lsr	r24
    1076:	77 95       	ror	r23
    1078:	67 95       	ror	r22
    107a:	b7 95       	ror	r27
    107c:	f7 95       	ror	r31
    107e:	e7 95       	ror	r30
    1080:	9f 5f       	subi	r25, 0xFF	; 255
    1082:	c1 f7       	brne	.-16     	; 0x1074 <__mulsf3_pse+0x8c>
    1084:	fe 2b       	or	r31, r30
    1086:	88 0f       	add	r24, r24
    1088:	91 1d       	adc	r25, r1
    108a:	96 95       	lsr	r25
    108c:	87 95       	ror	r24
    108e:	97 f9       	bld	r25, 7
    1090:	08 95       	ret

00001092 <__mulsi3>:
    1092:	62 9f       	mul	r22, r18
    1094:	d0 01       	movw	r26, r0
    1096:	73 9f       	mul	r23, r19
    1098:	f0 01       	movw	r30, r0
    109a:	82 9f       	mul	r24, r18
    109c:	e0 0d       	add	r30, r0
    109e:	f1 1d       	adc	r31, r1
    10a0:	64 9f       	mul	r22, r20
    10a2:	e0 0d       	add	r30, r0
    10a4:	f1 1d       	adc	r31, r1
    10a6:	92 9f       	mul	r25, r18
    10a8:	f0 0d       	add	r31, r0
    10aa:	83 9f       	mul	r24, r19
    10ac:	f0 0d       	add	r31, r0
    10ae:	74 9f       	mul	r23, r20
    10b0:	f0 0d       	add	r31, r0
    10b2:	65 9f       	mul	r22, r21
    10b4:	f0 0d       	add	r31, r0
    10b6:	99 27       	eor	r25, r25
    10b8:	72 9f       	mul	r23, r18
    10ba:	b0 0d       	add	r27, r0
    10bc:	e1 1d       	adc	r30, r1
    10be:	f9 1f       	adc	r31, r25
    10c0:	63 9f       	mul	r22, r19
    10c2:	b0 0d       	add	r27, r0
    10c4:	e1 1d       	adc	r30, r1
    10c6:	f9 1f       	adc	r31, r25
    10c8:	bd 01       	movw	r22, r26
    10ca:	cf 01       	movw	r24, r30
    10cc:	11 24       	eor	r1, r1
    10ce:	08 95       	ret

000010d0 <__divmodhi4>:
    10d0:	97 fb       	bst	r25, 7
    10d2:	09 2e       	mov	r0, r25
    10d4:	07 26       	eor	r0, r23
    10d6:	0a d0       	rcall	.+20     	; 0x10ec <__divmodhi4_neg1>
    10d8:	77 fd       	sbrc	r23, 7
    10da:	04 d0       	rcall	.+8      	; 0x10e4 <__divmodhi4_neg2>
    10dc:	0c d0       	rcall	.+24     	; 0x10f6 <__udivmodhi4>
    10de:	06 d0       	rcall	.+12     	; 0x10ec <__divmodhi4_neg1>
    10e0:	00 20       	and	r0, r0
    10e2:	1a f4       	brpl	.+6      	; 0x10ea <__divmodhi4_exit>

000010e4 <__divmodhi4_neg2>:
    10e4:	70 95       	com	r23
    10e6:	61 95       	neg	r22
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255

000010ea <__divmodhi4_exit>:
    10ea:	08 95       	ret

000010ec <__divmodhi4_neg1>:
    10ec:	f6 f7       	brtc	.-4      	; 0x10ea <__divmodhi4_exit>
    10ee:	90 95       	com	r25
    10f0:	81 95       	neg	r24
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	08 95       	ret

000010f6 <__udivmodhi4>:
    10f6:	aa 1b       	sub	r26, r26
    10f8:	bb 1b       	sub	r27, r27
    10fa:	51 e1       	ldi	r21, 0x11	; 17
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <__udivmodhi4_ep>

000010fe <__udivmodhi4_loop>:
    10fe:	aa 1f       	adc	r26, r26
    1100:	bb 1f       	adc	r27, r27
    1102:	a6 17       	cp	r26, r22
    1104:	b7 07       	cpc	r27, r23
    1106:	10 f0       	brcs	.+4      	; 0x110c <__udivmodhi4_ep>
    1108:	a6 1b       	sub	r26, r22
    110a:	b7 0b       	sbc	r27, r23

0000110c <__udivmodhi4_ep>:
    110c:	88 1f       	adc	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	5a 95       	dec	r21
    1112:	a9 f7       	brne	.-22     	; 0x10fe <__udivmodhi4_loop>
    1114:	80 95       	com	r24
    1116:	90 95       	com	r25
    1118:	bc 01       	movw	r22, r24
    111a:	cd 01       	movw	r24, r26
    111c:	08 95       	ret

0000111e <atoi>:
    111e:	fc 01       	movw	r30, r24
    1120:	88 27       	eor	r24, r24
    1122:	99 27       	eor	r25, r25
    1124:	e8 94       	clt
    1126:	21 91       	ld	r18, Z+
    1128:	20 32       	cpi	r18, 0x20	; 32
    112a:	e9 f3       	breq	.-6      	; 0x1126 <atoi+0x8>
    112c:	29 30       	cpi	r18, 0x09	; 9
    112e:	10 f0       	brcs	.+4      	; 0x1134 <atoi+0x16>
    1130:	2e 30       	cpi	r18, 0x0E	; 14
    1132:	c8 f3       	brcs	.-14     	; 0x1126 <atoi+0x8>
    1134:	2b 32       	cpi	r18, 0x2B	; 43
    1136:	41 f0       	breq	.+16     	; 0x1148 <atoi+0x2a>
    1138:	2d 32       	cpi	r18, 0x2D	; 45
    113a:	39 f4       	brne	.+14     	; 0x114a <atoi+0x2c>
    113c:	68 94       	set
    113e:	04 c0       	rjmp	.+8      	; 0x1148 <atoi+0x2a>
    1140:	0e 94 02 09 	call	0x1204	; 0x1204 <__mulhi_const_10>
    1144:	82 0f       	add	r24, r18
    1146:	91 1d       	adc	r25, r1
    1148:	21 91       	ld	r18, Z+
    114a:	20 53       	subi	r18, 0x30	; 48
    114c:	2a 30       	cpi	r18, 0x0A	; 10
    114e:	c0 f3       	brcs	.-16     	; 0x1140 <atoi+0x22>
    1150:	1e f4       	brtc	.+6      	; 0x1158 <atoi+0x3a>
    1152:	90 95       	com	r25
    1154:	81 95       	neg	r24
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	08 95       	ret

0000115a <itoa>:
    115a:	fb 01       	movw	r30, r22
    115c:	9f 01       	movw	r18, r30
    115e:	e8 94       	clt
    1160:	42 30       	cpi	r20, 0x02	; 2
    1162:	c4 f0       	brlt	.+48     	; 0x1194 <itoa+0x3a>
    1164:	45 32       	cpi	r20, 0x25	; 37
    1166:	b4 f4       	brge	.+44     	; 0x1194 <itoa+0x3a>
    1168:	4a 30       	cpi	r20, 0x0A	; 10
    116a:	29 f4       	brne	.+10     	; 0x1176 <itoa+0x1c>
    116c:	97 fb       	bst	r25, 7
    116e:	1e f4       	brtc	.+6      	; 0x1176 <itoa+0x1c>
    1170:	90 95       	com	r25
    1172:	81 95       	neg	r24
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	64 2f       	mov	r22, r20
    1178:	77 27       	eor	r23, r23
    117a:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__udivmodhi4>
    117e:	80 5d       	subi	r24, 0xD0	; 208
    1180:	8a 33       	cpi	r24, 0x3A	; 58
    1182:	0c f0       	brlt	.+2      	; 0x1186 <itoa+0x2c>
    1184:	89 5d       	subi	r24, 0xD9	; 217
    1186:	81 93       	st	Z+, r24
    1188:	cb 01       	movw	r24, r22
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	a1 f7       	brne	.-24     	; 0x1176 <itoa+0x1c>
    118e:	16 f4       	brtc	.+4      	; 0x1194 <itoa+0x3a>
    1190:	5d e2       	ldi	r21, 0x2D	; 45
    1192:	51 93       	st	Z+, r21
    1194:	10 82       	st	Z, r1
    1196:	c9 01       	movw	r24, r18
    1198:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <strrev>

0000119c <ltoa>:
    119c:	fa 01       	movw	r30, r20
    119e:	cf 93       	push	r28
    11a0:	ff 93       	push	r31
    11a2:	ef 93       	push	r30
    11a4:	22 30       	cpi	r18, 0x02	; 2
    11a6:	44 f1       	brlt	.+80     	; 0x11f8 <ltoa+0x5c>
    11a8:	25 32       	cpi	r18, 0x25	; 37
    11aa:	34 f5       	brge	.+76     	; 0x11f8 <ltoa+0x5c>
    11ac:	c2 2f       	mov	r28, r18
    11ae:	e8 94       	clt
    11b0:	ca 30       	cpi	r28, 0x0A	; 10
    11b2:	49 f4       	brne	.+18     	; 0x11c6 <ltoa+0x2a>
    11b4:	97 fb       	bst	r25, 7
    11b6:	3e f4       	brtc	.+14     	; 0x11c6 <ltoa+0x2a>
    11b8:	90 95       	com	r25
    11ba:	80 95       	com	r24
    11bc:	70 95       	com	r23
    11be:	61 95       	neg	r22
    11c0:	7f 4f       	sbci	r23, 0xFF	; 255
    11c2:	8f 4f       	sbci	r24, 0xFF	; 255
    11c4:	9f 4f       	sbci	r25, 0xFF	; 255
    11c6:	2c 2f       	mov	r18, r28
    11c8:	33 27       	eor	r19, r19
    11ca:	44 27       	eor	r20, r20
    11cc:	55 27       	eor	r21, r21
    11ce:	ff 93       	push	r31
    11d0:	ef 93       	push	r30
    11d2:	0e 94 1a 09 	call	0x1234	; 0x1234 <__udivmodsi4>
    11d6:	ef 91       	pop	r30
    11d8:	ff 91       	pop	r31
    11da:	60 5d       	subi	r22, 0xD0	; 208
    11dc:	6a 33       	cpi	r22, 0x3A	; 58
    11de:	0c f0       	brlt	.+2      	; 0x11e2 <ltoa+0x46>
    11e0:	69 5d       	subi	r22, 0xD9	; 217
    11e2:	61 93       	st	Z+, r22
    11e4:	b9 01       	movw	r22, r18
    11e6:	ca 01       	movw	r24, r20
    11e8:	60 50       	subi	r22, 0x00	; 0
    11ea:	70 40       	sbci	r23, 0x00	; 0
    11ec:	80 40       	sbci	r24, 0x00	; 0
    11ee:	90 40       	sbci	r25, 0x00	; 0
    11f0:	51 f7       	brne	.-44     	; 0x11c6 <ltoa+0x2a>
    11f2:	16 f4       	brtc	.+4      	; 0x11f8 <ltoa+0x5c>
    11f4:	cd e2       	ldi	r28, 0x2D	; 45
    11f6:	c1 93       	st	Z+, r28
    11f8:	10 82       	st	Z, r1
    11fa:	8f 91       	pop	r24
    11fc:	9f 91       	pop	r25
    11fe:	cf 91       	pop	r28
    1200:	0c 94 0a 09 	jmp	0x1214	; 0x1214 <strrev>

00001204 <__mulhi_const_10>:
    1204:	7a e0       	ldi	r23, 0x0A	; 10
    1206:	97 9f       	mul	r25, r23
    1208:	90 2d       	mov	r25, r0
    120a:	87 9f       	mul	r24, r23
    120c:	80 2d       	mov	r24, r0
    120e:	91 0d       	add	r25, r1
    1210:	11 24       	eor	r1, r1
    1212:	08 95       	ret

00001214 <strrev>:
    1214:	dc 01       	movw	r26, r24
    1216:	fc 01       	movw	r30, r24
    1218:	67 2f       	mov	r22, r23
    121a:	71 91       	ld	r23, Z+
    121c:	77 23       	and	r23, r23
    121e:	e1 f7       	brne	.-8      	; 0x1218 <strrev+0x4>
    1220:	32 97       	sbiw	r30, 0x02	; 2
    1222:	04 c0       	rjmp	.+8      	; 0x122c <strrev+0x18>
    1224:	7c 91       	ld	r23, X
    1226:	6d 93       	st	X+, r22
    1228:	70 83       	st	Z, r23
    122a:	62 91       	ld	r22, -Z
    122c:	ae 17       	cp	r26, r30
    122e:	bf 07       	cpc	r27, r31
    1230:	c8 f3       	brcs	.-14     	; 0x1224 <strrev+0x10>
    1232:	08 95       	ret

00001234 <__udivmodsi4>:
    1234:	a1 e2       	ldi	r26, 0x21	; 33
    1236:	1a 2e       	mov	r1, r26
    1238:	aa 1b       	sub	r26, r26
    123a:	bb 1b       	sub	r27, r27
    123c:	fd 01       	movw	r30, r26
    123e:	0d c0       	rjmp	.+26     	; 0x125a <__udivmodsi4_ep>

00001240 <__udivmodsi4_loop>:
    1240:	aa 1f       	adc	r26, r26
    1242:	bb 1f       	adc	r27, r27
    1244:	ee 1f       	adc	r30, r30
    1246:	ff 1f       	adc	r31, r31
    1248:	a2 17       	cp	r26, r18
    124a:	b3 07       	cpc	r27, r19
    124c:	e4 07       	cpc	r30, r20
    124e:	f5 07       	cpc	r31, r21
    1250:	20 f0       	brcs	.+8      	; 0x125a <__udivmodsi4_ep>
    1252:	a2 1b       	sub	r26, r18
    1254:	b3 0b       	sbc	r27, r19
    1256:	e4 0b       	sbc	r30, r20
    1258:	f5 0b       	sbc	r31, r21

0000125a <__udivmodsi4_ep>:
    125a:	66 1f       	adc	r22, r22
    125c:	77 1f       	adc	r23, r23
    125e:	88 1f       	adc	r24, r24
    1260:	99 1f       	adc	r25, r25
    1262:	1a 94       	dec	r1
    1264:	69 f7       	brne	.-38     	; 0x1240 <__udivmodsi4_loop>
    1266:	60 95       	com	r22
    1268:	70 95       	com	r23
    126a:	80 95       	com	r24
    126c:	90 95       	com	r25
    126e:	9b 01       	movw	r18, r22
    1270:	ac 01       	movw	r20, r24
    1272:	bd 01       	movw	r22, r26
    1274:	cf 01       	movw	r24, r30
    1276:	08 95       	ret

00001278 <_exit>:
    1278:	f8 94       	cli

0000127a <__stop_program>:
    127a:	ff cf       	rjmp	.-2      	; 0x127a <__stop_program>
