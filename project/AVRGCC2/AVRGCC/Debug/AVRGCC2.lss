
AVRGCC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000051e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000024  00800060  00800060  00000592  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000fb  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000471  00000000  00000000  00000e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000239  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000623  00000000  00000000  000014b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017e  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031e  00000000  00000000  00001d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__vector_1>
   8:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 38       	cpi	r26, 0x84	; 132
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 61 02 	call	0x4c2	; 0x4c2 <main>
  74:	0c 94 8d 02 	jmp	0x51a	; 0x51a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DecToDigit>:
// 		default:
// 			Digit = 0b00000000;
// 			break;			
//  	}	

 switch(Dec)
  7c:	87 30       	cpi	r24, 0x07	; 7
  7e:	71 f1       	breq	.+92     	; 0xdc <DecToDigit+0x60>
  80:	88 30       	cpi	r24, 0x08	; 8
  82:	70 f4       	brcc	.+28     	; 0xa0 <DecToDigit+0x24>
  84:	83 30       	cpi	r24, 0x03	; 3
  86:	11 f1       	breq	.+68     	; 0xcc <DecToDigit+0x50>
  88:	84 30       	cpi	r24, 0x04	; 4
  8a:	28 f4       	brcc	.+10     	; 0x96 <DecToDigit+0x1a>
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	d1 f1       	breq	.+116    	; 0x104 <DecToDigit+0x88>
  90:	82 30       	cpi	r24, 0x02	; 2
  92:	d0 f4       	brcc	.+52     	; 0xc8 <DecToDigit+0x4c>
  94:	17 c0       	rjmp	.+46     	; 0xc4 <DecToDigit+0x48>
  96:	85 30       	cpi	r24, 0x05	; 5
  98:	e9 f0       	breq	.+58     	; 0xd4 <DecToDigit+0x58>
  9a:	86 30       	cpi	r24, 0x06	; 6
  9c:	e8 f4       	brcc	.+58     	; 0xd8 <DecToDigit+0x5c>
  9e:	18 c0       	rjmp	.+48     	; 0xd0 <DecToDigit+0x54>
  a0:	8b 30       	cpi	r24, 0x0B	; 11
  a2:	21 f1       	breq	.+72     	; 0xec <DecToDigit+0x70>
  a4:	8c 30       	cpi	r24, 0x0C	; 12
  a6:	28 f4       	brcc	.+10     	; 0xb2 <DecToDigit+0x36>
  a8:	89 30       	cpi	r24, 0x09	; 9
  aa:	e1 f0       	breq	.+56     	; 0xe4 <DecToDigit+0x68>
  ac:	8a 30       	cpi	r24, 0x0A	; 10
  ae:	e0 f4       	brcc	.+56     	; 0xe8 <DecToDigit+0x6c>
  b0:	17 c0       	rjmp	.+46     	; 0xe0 <DecToDigit+0x64>
  b2:	8d 30       	cpi	r24, 0x0D	; 13
  b4:	f9 f0       	breq	.+62     	; 0xf4 <DecToDigit+0x78>
  b6:	8d 30       	cpi	r24, 0x0D	; 13
  b8:	d8 f0       	brcs	.+54     	; 0xf0 <DecToDigit+0x74>
  ba:	8e 30       	cpi	r24, 0x0E	; 14
  bc:	e9 f0       	breq	.+58     	; 0xf8 <DecToDigit+0x7c>
  be:	8f 30       	cpi	r24, 0x0F	; 15
  c0:	f9 f4       	brne	.+62     	; 0x100 <DecToDigit+0x84>
  c2:	1c c0       	rjmp	.+56     	; 0xfc <DecToDigit+0x80>
	{
		case 0:
			Digit = 0b00111111;				
  c4:	8f e3       	ldi	r24, 0x3F	; 63
  c6:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b01011011;					
  c8:	8b e5       	ldi	r24, 0x5B	; 91
			break;
  ca:	08 95       	ret
		case 3:
			Digit = 0b01001111;
  cc:	8f e4       	ldi	r24, 0x4F	; 79
			break;
  ce:	08 95       	ret
		case 4:
			Digit = 0b01100110;
  d0:	86 e6       	ldi	r24, 0x66	; 102
			break;
  d2:	08 95       	ret
		case 5:
			Digit = 0b01101101;
  d4:	8d e6       	ldi	r24, 0x6D	; 109
			break;
  d6:	08 95       	ret
		case 6:
			Digit = 0b01111101;
  d8:	8d e7       	ldi	r24, 0x7D	; 125
			break;
  da:	08 95       	ret
		case 7:
			Digit = 0b00000111;
  dc:	87 e0       	ldi	r24, 0x07	; 7
			break;
  de:	08 95       	ret
		case 8:
			Digit = 0b01111111;
  e0:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
  e2:	08 95       	ret
		case 9:
			Digit = 0b01101111;
  e4:	8f e6       	ldi	r24, 0x6F	; 111
			break;
  e6:	08 95       	ret
		case 10:
			Digit = 0b01110111;
  e8:	87 e7       	ldi	r24, 0x77	; 119
			break;
  ea:	08 95       	ret
		case 11:
			Digit = 0b01111100;
  ec:	8c e7       	ldi	r24, 0x7C	; 124
			break;
  ee:	08 95       	ret
		case 12:
			Digit = 0b00111001;
  f0:	89 e3       	ldi	r24, 0x39	; 57
			break;
  f2:	08 95       	ret
		case 13:
			Digit = 0b01011110;
  f4:	8e e5       	ldi	r24, 0x5E	; 94
			break;
  f6:	08 95       	ret
		case 14:
			Digit = 0b01111001;
  f8:	89 e7       	ldi	r24, 0x79	; 121
			break;
  fa:	08 95       	ret
		case 15:
			Digit = 0b01110001;
  fc:	81 e7       	ldi	r24, 0x71	; 113
			break;
  fe:	08 95       	ret
			
		default:
			Digit = 0b00000000;
 100:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 102:	08 95       	ret
	{
		case 0:
			Digit = 0b00111111;				
			break;
		case 1:
			Digit = 0b00000110;					
 104:	86 e0       	ldi	r24, 0x06	; 6
			break;			
 	}	


	return Digit;
}
 106:	08 95       	ret

00000108 <task2>:
 	_delay_ms(500);
}
*/

void task2()
{
 108:	1f 93       	push	r17
	DDRA = 0xF0;
 10a:	80 ef       	ldi	r24, 0xF0	; 240
 10c:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 10e:	8f ef       	ldi	r24, 0xFF	; 255
 110:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2;
 112:	81 b3       	in	r24, 0x11	; 17
 114:	8c 60       	ori	r24, 0x0C	; 12
 116:	81 bb       	out	0x11, r24	; 17
	PORTA = 0x80;	
 118:	80 e8       	ldi	r24, 0x80	; 128
 11a:	8b bb       	out	0x1b, r24	; 27
	
	unsigned char i = 0;
	
	PORTC = DecToDigit(0);
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
 122:	85 bb       	out	0x15, r24	; 21
	DDRA = 0xF0;
	DDRC = 0xFF;
	DDRD |= BTN1 | BTN2;
	PORTA = 0x80;	
	
	unsigned char i = 0;
 124:	10 e0       	ldi	r17, 0x00	; 0
//		PORTC= 0b01100110;	
//		PORTC= 0b11111111;	
  		
		 // task1();
		 
		 if (PIND & BTN1)
 126:	82 9b       	sbis	0x10, 2	; 16
 128:	0f c0       	rjmp	.+30     	; 0x148 <task2+0x40>
		 {
			 i++;
 12a:	1f 5f       	subi	r17, 0xFF	; 255
			 d = DecToDigit(i);
 12c:	81 2f       	mov	r24, r17
 12e:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
			 PORTC = d;
 132:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	8f e5       	ldi	r24, 0x5F	; 95
 136:	9a ee       	ldi	r25, 0xEA	; 234
 138:	a0 e0       	ldi	r26, 0x00	; 0
 13a:	81 50       	subi	r24, 0x01	; 1
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	a0 40       	sbci	r26, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <task2+0x32>
 142:	00 c0       	rjmp	.+0      	; 0x144 <task2+0x3c>
 144:	00 00       	nop
 146:	ef cf       	rjmp	.-34     	; 0x126 <task2+0x1e>
			 _delay_ms(300);
		 }
		 else if (PIND & BTN2)
 148:	83 9b       	sbis	0x10, 3	; 16
 14a:	ed cf       	rjmp	.-38     	; 0x126 <task2+0x1e>
		 {
			 i--;
 14c:	11 50       	subi	r17, 0x01	; 1
			 d = DecToDigit(i);
 14e:	81 2f       	mov	r24, r17
 150:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
			 PORTC = d;
 154:	85 bb       	out	0x15, r24	; 21
 156:	8f e5       	ldi	r24, 0x5F	; 95
 158:	9a ee       	ldi	r25, 0xEA	; 234
 15a:	a0 e0       	ldi	r26, 0x00	; 0
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	a0 40       	sbci	r26, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <task2+0x54>
 164:	00 c0       	rjmp	.+0      	; 0x166 <task2+0x5e>
 166:	00 00       	nop
 168:	de cf       	rjmp	.-68     	; 0x126 <task2+0x1e>

0000016a <__vector_19>:
	}	
	
}

ISR(TIMER0_COMP_vect)
{	
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
	PORTC = 0x00;
 190:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 192:	1b ba       	out	0x1b, r1	; 27
	
	PORTC = DecToDigit(arr[j]);
 194:	c0 91 68 00 	lds	r28, 0x0068
 198:	d0 91 69 00 	lds	r29, 0x0069
 19c:	fe 01       	movw	r30, r28
 19e:	ee 0f       	add	r30, r30
 1a0:	ff 1f       	adc	r31, r31
 1a2:	e4 58       	subi	r30, 0x84	; 132
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
 1ac:	85 bb       	out	0x15, r24	; 21
	
	PORTA = (1 << (7 - j));
 1ae:	87 e0       	ldi	r24, 0x07	; 7
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	8c 1b       	sub	r24, r28
 1b4:	9d 0b       	sbc	r25, r29
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	a9 01       	movw	r20, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <__vector_19+0x58>
 1be:	44 0f       	add	r20, r20
 1c0:	55 1f       	adc	r21, r21
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <__vector_19+0x54>
 1c6:	4b bb       	out	0x1b, r20	; 27
	j++;
 1c8:	ce 01       	movw	r24, r28
 1ca:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 1cc:	64 e0       	ldi	r22, 0x04	; 4
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodhi4>
 1d4:	90 93 69 00 	sts	0x0069, r25
 1d8:	80 93 68 00 	sts	0x0068, r24
}
 1dc:	ff 91       	pop	r31
 1de:	ef 91       	pop	r30
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	bf 91       	pop	r27
 1e6:	af 91       	pop	r26
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	7f 91       	pop	r23
 1ee:	6f 91       	pop	r22
 1f0:	5f 91       	pop	r21
 1f2:	4f 91       	pop	r20
 1f4:	3f 91       	pop	r19
 1f6:	2f 91       	pop	r18
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{	
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ef 93       	push	r30
 226:	ff 93       	push	r31
	PORTC = 0x00;
 228:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 22a:	1b ba       	out	0x1b, r1	; 27
	
	//PORTC = DecToDigit(arr[j]);	
	//PORTC = DecToDigit(arr8[j]);
	PORTC = DecToDigit(arr16[j]);
 22c:	c0 91 68 00 	lds	r28, 0x0068
 230:	d0 91 69 00 	lds	r29, 0x0069
 234:	fe 01       	movw	r30, r28
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	ec 58       	subi	r30, 0x8C	; 140
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	80 81       	ld	r24, Z
 240:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
 244:	85 bb       	out	0x15, r24	; 21
	
	PORTA = (1 << (7 - j));
 246:	87 e0       	ldi	r24, 0x07	; 7
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	8c 1b       	sub	r24, r28
 24c:	9d 0b       	sbc	r25, r29
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	a9 01       	movw	r20, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <__vector_6+0x58>
 256:	44 0f       	add	r20, r20
 258:	55 1f       	adc	r21, r21
 25a:	8a 95       	dec	r24
 25c:	e2 f7       	brpl	.-8      	; 0x256 <__vector_6+0x54>
 25e:	4b bb       	out	0x1b, r20	; 27
	j++;
 260:	ce 01       	movw	r24, r28
 262:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodhi4>
 26c:	90 93 69 00 	sts	0x0069, r25
 270:	80 93 68 00 	sts	0x0068, r24
}
 274:	ff 91       	pop	r31
 276:	ef 91       	pop	r30
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <__vector_1>:

ISR(INT0_vect)
{	
 29a:	1f 92       	push	r1
 29c:	0f 92       	push	r0
 29e:	0f b6       	in	r0, 0x3f	; 63
 2a0:	0f 92       	push	r0
 2a2:	11 24       	eor	r1, r1
 2a4:	2f 93       	push	r18
 2a6:	3f 93       	push	r19
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
	if (flag0 > 0)
 2ac:	80 91 64 00 	lds	r24, 0x0064
 2b0:	90 91 65 00 	lds	r25, 0x0065
 2b4:	18 16       	cp	r1, r24
 2b6:	19 06       	cpc	r1, r25
 2b8:	54 f0       	brlt	.+20     	; 0x2ce <__vector_1+0x34>
	{
		
	}
	else 
	{
		num++;		
 2ba:	20 91 60 00 	lds	r18, 0x0060
 2be:	30 91 61 00 	lds	r19, 0x0061
 2c2:	2f 5f       	subi	r18, 0xFF	; 255
 2c4:	3f 4f       	sbci	r19, 0xFF	; 255
 2c6:	30 93 61 00 	sts	0x0061, r19
 2ca:	20 93 60 00 	sts	0x0060, r18
	}
	flag0++;	
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	90 93 65 00 	sts	0x0065, r25
 2d4:	80 93 64 00 	sts	0x0064, r24
}
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	3f 91       	pop	r19
 2de:	2f 91       	pop	r18
 2e0:	0f 90       	pop	r0
 2e2:	0f be       	out	0x3f, r0	; 63
 2e4:	0f 90       	pop	r0
 2e6:	1f 90       	pop	r1
 2e8:	18 95       	reti

000002ea <__vector_2>:

ISR(INT1_vect)
{	
 2ea:	1f 92       	push	r1
 2ec:	0f 92       	push	r0
 2ee:	0f b6       	in	r0, 0x3f	; 63
 2f0:	0f 92       	push	r0
 2f2:	11 24       	eor	r1, r1
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
	if (flag1 > 0)
 2f8:	80 91 66 00 	lds	r24, 0x0066
 2fc:	90 91 67 00 	lds	r25, 0x0067
 300:	18 16       	cp	r1, r24
 302:	19 06       	cpc	r1, r25
 304:	5c f0       	brlt	.+22     	; 0x31c <__vector_2+0x32>
	{
		
	}
	else 
	{
		if (num != 0)
 306:	80 91 60 00 	lds	r24, 0x0060
 30a:	90 91 61 00 	lds	r25, 0x0061
 30e:	00 97       	sbiw	r24, 0x00	; 0
 310:	29 f0       	breq	.+10     	; 0x31c <__vector_2+0x32>
		{
			num--;
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	90 93 61 00 	sts	0x0061, r25
 318:	80 93 60 00 	sts	0x0060, r24
		}
	}
	
	flag1++;		
 31c:	80 91 66 00 	lds	r24, 0x0066
 320:	90 91 67 00 	lds	r25, 0x0067
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	90 93 67 00 	sts	0x0067, r25
 32a:	80 93 66 00 	sts	0x0066, r24
}
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <NumToArr>:

void NumToArr(int num)
{	
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	ec e7       	ldi	r30, 0x7C	; 124
 342:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
	flag1++;		
}

void NumToArr(int num)
 344:	ef 01       	movw	r28, r30
 346:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = num % 10;
 348:	2a e0       	ldi	r18, 0x0A	; 10
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	b9 01       	movw	r22, r18
 34e:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodhi4>
 352:	81 93       	st	Z+, r24
 354:	91 93       	st	Z+, r25
		num /= 10;
 356:	86 2f       	mov	r24, r22
 358:	97 2f       	mov	r25, r23
	flag1++;		
}

void NumToArr(int num)
{	
	for (int k = 0; k < DIGITS; k++)
 35a:	ec 17       	cp	r30, r28
 35c:	fd 07       	cpc	r31, r29
 35e:	b1 f7       	brne	.-20     	; 0x34c <NumToArr+0x10>
	{		
		arr[k] = num % 10;
		num /= 10;
	}
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <task3>:
    }
}

void task3()
{
	DDRA = 0xF0;
 366:	80 ef       	ldi	r24, 0xF0	; 240
 368:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;
 36e:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 370:	15 ba       	out	0x15, r1	; 21
	
	
	TCCR0 |= (1 << WGM01) | (1 << CS01) | (1 << CS00);
 372:	83 b7       	in	r24, 0x33	; 51
 374:	8b 60       	ori	r24, 0x0B	; 11
 376:	83 bf       	out	0x33, r24	; 51
	OCR0 = 20;
 378:	84 e1       	ldi	r24, 0x14	; 20
 37a:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0);
 37c:	89 b7       	in	r24, 0x39	; 57
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	89 bf       	out	0x39, r24	; 57
	DDRD = 0xB0;
 382:	80 eb       	ldi	r24, 0xB0	; 176
 384:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x0;
 386:	12 ba       	out	0x12, r1	; 18
	sei();	
 388:	78 94       	sei
	
	NumToArr(1024);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	94 e0       	ldi	r25, 0x04	; 4
 38e:	0e 94 9e 01 	call	0x33c	; 0x33c <NumToArr>
 392:	ff cf       	rjmp	.-2      	; 0x392 <task3+0x2c>

00000394 <NumToArr8>:
		num /= 10;
	}
}

void NumToArr8(int num)
{	
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	9c 01       	movw	r18, r24
 39e:	ec e6       	ldi	r30, 0x6C	; 108
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
		arr[k] = num % 10;
		num /= 10;
	}
}

void NumToArr8(int num)
 3a2:	8f 01       	movw	r16, r30
 3a4:	08 5f       	subi	r16, 0xF8	; 248
 3a6:	1f 4f       	sbci	r17, 0xFF	; 255
{	
	for (int k = 0; k < DIGITS; k++)
	{
		arr8[k] = num % 8;
 3a8:	c8 e0       	ldi	r28, 0x08	; 8
 3aa:	d0 e0       	ldi	r29, 0x00	; 0
 3ac:	c9 01       	movw	r24, r18
 3ae:	be 01       	movw	r22, r28
 3b0:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodhi4>
 3b4:	81 93       	st	Z+, r24
 3b6:	91 93       	st	Z+, r25
		num /= 8;
 3b8:	c9 01       	movw	r24, r18
 3ba:	99 23       	and	r25, r25
 3bc:	0c f4       	brge	.+2      	; 0x3c0 <NumToArr8+0x2c>
 3be:	07 96       	adiw	r24, 0x07	; 7
 3c0:	9c 01       	movw	r18, r24
 3c2:	35 95       	asr	r19
 3c4:	27 95       	ror	r18
 3c6:	35 95       	asr	r19
 3c8:	27 95       	ror	r18
 3ca:	35 95       	asr	r19
 3cc:	27 95       	ror	r18
	}
}

void NumToArr8(int num)
{	
	for (int k = 0; k < DIGITS; k++)
 3ce:	e0 17       	cp	r30, r16
 3d0:	f1 07       	cpc	r31, r17
 3d2:	61 f7       	brne	.-40     	; 0x3ac <NumToArr8+0x18>
	{
		arr8[k] = num % 8;
		num /= 8;
	}
}
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	08 95       	ret

000003de <NumToArr16>:

void NumToArr16(int num)
{		
 3de:	0f 93       	push	r16
 3e0:	1f 93       	push	r17
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	9c 01       	movw	r18, r24
 3e8:	e4 e7       	ldi	r30, 0x74	; 116
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
		arr8[k] = num % 8;
		num /= 8;
	}
}

void NumToArr16(int num)
 3ec:	8f 01       	movw	r16, r30
 3ee:	08 5f       	subi	r16, 0xF8	; 248
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
{		
	for (int k = 0; k < DIGITS; k++)
	{
		arr16[k] = num % 16;
 3f2:	c0 e1       	ldi	r28, 0x10	; 16
 3f4:	d0 e0       	ldi	r29, 0x00	; 0
 3f6:	c9 01       	movw	r24, r18
 3f8:	be 01       	movw	r22, r28
 3fa:	0e 94 66 02 	call	0x4cc	; 0x4cc <__divmodhi4>
 3fe:	81 93       	st	Z+, r24
 400:	91 93       	st	Z+, r25
		num /= 16;
 402:	c9 01       	movw	r24, r18
 404:	99 23       	and	r25, r25
 406:	0c f4       	brge	.+2      	; 0x40a <NumToArr16+0x2c>
 408:	0f 96       	adiw	r24, 0x0f	; 15
 40a:	9c 01       	movw	r18, r24
 40c:	35 95       	asr	r19
 40e:	27 95       	ror	r18
 410:	35 95       	asr	r19
 412:	27 95       	ror	r18
 414:	35 95       	asr	r19
 416:	27 95       	ror	r18
 418:	35 95       	asr	r19
 41a:	27 95       	ror	r18
	}
}

void NumToArr16(int num)
{		
	for (int k = 0; k < DIGITS; k++)
 41c:	e0 17       	cp	r30, r16
 41e:	f1 07       	cpc	r31, r17
 420:	51 f7       	brne	.-44     	; 0x3f6 <NumToArr16+0x18>
	{
		arr16[k] = num % 16;
		num /= 16;
	}
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	1f 91       	pop	r17
 428:	0f 91       	pop	r16
 42a:	08 95       	ret

0000042c <task4>:
}


void task4()
{
	DDRA = 0xF0;
 42c:	80 ef       	ldi	r24, 0xF0	; 240
 42e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 430:	8f ef       	ldi	r24, 0xFF	; 255
 432:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2;
 434:	81 b3       	in	r24, 0x11	; 17
 436:	8c 60       	ori	r24, 0x0C	; 12
 438:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
 43a:	8f e0       	ldi	r24, 0x0F	; 15
 43c:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 43e:	80 ec       	ldi	r24, 0xC0	; 192
 440:	8b bf       	out	0x3b, r24	; 59
		
	PORTA = 0x00;
 442:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 444:	15 ba       	out	0x15, r1	; 21
// 	TCCR0 |= (1 << WGM01) | (1 << CS01) | (1 << CS00);
// 	OCR0 = 20;
// 	TIMSK |= (1 << OCIE0);
	
	//TIMER1
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
 446:	8f b5       	in	r24, 0x2f	; 47
 448:	81 6a       	ori	r24, 0xA1	; 161
 44a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<CS10);
 44c:	8e b5       	in	r24, 0x2e	; 46
 44e:	89 60       	ori	r24, 0x09	; 9
 450:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 10;
 452:	8a e0       	ldi	r24, 0x0A	; 10
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	9b bd       	out	0x2b, r25	; 43
 458:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);	
 45a:	89 b7       	in	r24, 0x39	; 57
 45c:	80 61       	ori	r24, 0x10	; 16
 45e:	89 bf       	out	0x39, r24	; 57
	
	PORTD = 0x0;
 460:	12 ba       	out	0x12, r1	; 18
	sei();
 462:	78 94       	sei
	
	
	while(1)
	{
		//NumToArr(num);
		NumToArr8(num);
 464:	80 91 60 00 	lds	r24, 0x0060
 468:	90 91 61 00 	lds	r25, 0x0061
 46c:	0e 94 ca 01 	call	0x394	; 0x394 <NumToArr8>
		NumToArr16(num);
 470:	80 91 60 00 	lds	r24, 0x0060
 474:	90 91 61 00 	lds	r25, 0x0061
 478:	0e 94 ef 01 	call	0x3de	; 0x3de <NumToArr16>
		
		if ((PIND & BTN1) || (PIND & BTN2))
 47c:	82 99       	sbic	0x10, 2	; 16
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__stack+0x25>
 480:	83 9b       	sbis	0x10, 3	; 16
 482:	0d c0       	rjmp	.+26     	; 0x49e <__stack+0x3f>
		{			
			wait++;
 484:	80 91 62 00 	lds	r24, 0x0062
 488:	90 91 63 00 	lds	r25, 0x0063
 48c:	01 96       	adiw	r24, 0x01	; 1
 48e:	90 93 63 00 	sts	0x0063, r25
 492:	80 93 62 00 	sts	0x0062, r24
		else
		{			
			wait = 0;
		}
		
		if (wait >= 50)
 496:	82 33       	cpi	r24, 0x32	; 50
 498:	91 05       	cpc	r25, r1
 49a:	34 f4       	brge	.+12     	; 0x4a8 <__stack+0x49>
 49c:	09 c0       	rjmp	.+18     	; 0x4b0 <__stack+0x51>
		{			
			wait++;
		}
		else
		{			
			wait = 0;
 49e:	10 92 63 00 	sts	0x0063, r1
 4a2:	10 92 62 00 	sts	0x0062, r1
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__stack+0x51>
		}
		
		if (wait >= 50)
		{
			num = 0;
 4a8:	10 92 61 00 	sts	0x0061, r1
 4ac:	10 92 60 00 	sts	0x0060, r1
		}		
		
		flag0 = 0;
 4b0:	10 92 65 00 	sts	0x0065, r1
 4b4:	10 92 64 00 	sts	0x0064, r1
		flag1 = 0;
 4b8:	10 92 67 00 	sts	0x0067, r1
 4bc:	10 92 66 00 	sts	0x0066, r1
	}	
 4c0:	d1 cf       	rjmp	.-94     	; 0x464 <__stack+0x5>

000004c2 <main>:
int main(void)
{
	
//	task2();
// 	task3();
	task4();
 4c2:	0e 94 16 02 	call	0x42c	; 0x42c <task4>
//  		 	
//   		
//         //TODO:: Please write your application code 
// 		
//     }
}
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	08 95       	ret

000004cc <__divmodhi4>:
 4cc:	97 fb       	bst	r25, 7
 4ce:	09 2e       	mov	r0, r25
 4d0:	07 26       	eor	r0, r23
 4d2:	0a d0       	rcall	.+20     	; 0x4e8 <__divmodhi4_neg1>
 4d4:	77 fd       	sbrc	r23, 7
 4d6:	04 d0       	rcall	.+8      	; 0x4e0 <__divmodhi4_neg2>
 4d8:	0c d0       	rcall	.+24     	; 0x4f2 <__udivmodhi4>
 4da:	06 d0       	rcall	.+12     	; 0x4e8 <__divmodhi4_neg1>
 4dc:	00 20       	and	r0, r0
 4de:	1a f4       	brpl	.+6      	; 0x4e6 <__divmodhi4_exit>

000004e0 <__divmodhi4_neg2>:
 4e0:	70 95       	com	r23
 4e2:	61 95       	neg	r22
 4e4:	7f 4f       	sbci	r23, 0xFF	; 255

000004e6 <__divmodhi4_exit>:
 4e6:	08 95       	ret

000004e8 <__divmodhi4_neg1>:
 4e8:	f6 f7       	brtc	.-4      	; 0x4e6 <__divmodhi4_exit>
 4ea:	90 95       	com	r25
 4ec:	81 95       	neg	r24
 4ee:	9f 4f       	sbci	r25, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__udivmodhi4>:
 4f2:	aa 1b       	sub	r26, r26
 4f4:	bb 1b       	sub	r27, r27
 4f6:	51 e1       	ldi	r21, 0x11	; 17
 4f8:	07 c0       	rjmp	.+14     	; 0x508 <__udivmodhi4_ep>

000004fa <__udivmodhi4_loop>:
 4fa:	aa 1f       	adc	r26, r26
 4fc:	bb 1f       	adc	r27, r27
 4fe:	a6 17       	cp	r26, r22
 500:	b7 07       	cpc	r27, r23
 502:	10 f0       	brcs	.+4      	; 0x508 <__udivmodhi4_ep>
 504:	a6 1b       	sub	r26, r22
 506:	b7 0b       	sbc	r27, r23

00000508 <__udivmodhi4_ep>:
 508:	88 1f       	adc	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	5a 95       	dec	r21
 50e:	a9 f7       	brne	.-22     	; 0x4fa <__udivmodhi4_loop>
 510:	80 95       	com	r24
 512:	90 95       	com	r25
 514:	bc 01       	movw	r22, r24
 516:	cd 01       	movw	r24, r26
 518:	08 95       	ret

0000051a <_exit>:
 51a:	f8 94       	cli

0000051c <__stop_program>:
 51c:	ff cf       	rjmp	.-2      	; 0x51c <__stop_program>
