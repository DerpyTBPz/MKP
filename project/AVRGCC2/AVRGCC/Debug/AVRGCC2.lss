
AVRGCC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800060  00800060  000003d2  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000a2  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000352  00000000  00000000  00000bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000225  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b5  00000000  00000000  00001169  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000147  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f6  00000000  00000000  00001807  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  000019fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_1>
   8:	0c 94 08 01 	jmp	0x210	; 0x210 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 a5 00 	jmp	0x14a	; 0x14a <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ae 36       	cpi	r26, 0x6E	; 110
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
int main(void)
{
	
//	task2();
// 	task3();
	task4();
  7c:	0e 94 36 01 	call	0x26c	; 0x26c <task4>
//  		 	
//   		
//         //TODO:: Please write your application code 
// 		
//     }
}
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret

00000086 <DecToDigit>:
// 		default:
// 			Digit = 0b00000000;
// 			break;			
//  	}	

switch(Dec)
  86:	84 30       	cpi	r24, 0x04	; 4
  88:	f9 f0       	breq	.+62     	; 0xc8 <DecToDigit+0x42>
  8a:	85 30       	cpi	r24, 0x05	; 5
  8c:	48 f4       	brcc	.+18     	; 0xa0 <DecToDigit+0x1a>
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	49 f1       	breq	.+82     	; 0xe4 <DecToDigit+0x5e>
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	98 f0       	brcs	.+38     	; 0xbc <DecToDigit+0x36>
  96:	82 30       	cpi	r24, 0x02	; 2
  98:	99 f0       	breq	.+38     	; 0xc0 <DecToDigit+0x3a>
  9a:	83 30       	cpi	r24, 0x03	; 3
  9c:	09 f5       	brne	.+66     	; 0xe0 <DecToDigit+0x5a>
  9e:	12 c0       	rjmp	.+36     	; 0xc4 <DecToDigit+0x3e>
  a0:	87 30       	cpi	r24, 0x07	; 7
  a2:	c1 f0       	breq	.+48     	; 0xd4 <DecToDigit+0x4e>
  a4:	88 30       	cpi	r24, 0x08	; 8
  a6:	28 f4       	brcc	.+10     	; 0xb2 <DecToDigit+0x2c>
  a8:	85 30       	cpi	r24, 0x05	; 5
  aa:	81 f0       	breq	.+32     	; 0xcc <DecToDigit+0x46>
  ac:	86 30       	cpi	r24, 0x06	; 6
  ae:	c1 f4       	brne	.+48     	; 0xe0 <DecToDigit+0x5a>
  b0:	0f c0       	rjmp	.+30     	; 0xd0 <DecToDigit+0x4a>
  b2:	88 30       	cpi	r24, 0x08	; 8
  b4:	89 f0       	breq	.+34     	; 0xd8 <DecToDigit+0x52>
  b6:	89 30       	cpi	r24, 0x09	; 9
  b8:	99 f4       	brne	.+38     	; 0xe0 <DecToDigit+0x5a>
  ba:	10 c0       	rjmp	.+32     	; 0xdc <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b00111111;				
  bc:	8f e3       	ldi	r24, 0x3F	; 63
  be:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b01011011;					
  c0:	8b e5       	ldi	r24, 0x5B	; 91
			break;
  c2:	08 95       	ret
		case 3:
			Digit = 0b01001111;
  c4:	8f e4       	ldi	r24, 0x4F	; 79
			break;
  c6:	08 95       	ret
		case 4:
			Digit = 0b01100110;
  c8:	86 e6       	ldi	r24, 0x66	; 102
			break;
  ca:	08 95       	ret
		case 5:
			Digit = 0b01101101;
  cc:	8d e6       	ldi	r24, 0x6D	; 109
			break;
  ce:	08 95       	ret
		case 6:
			Digit = 0b01111101;
  d0:	8d e7       	ldi	r24, 0x7D	; 125
			break;
  d2:	08 95       	ret
		case 7:
			Digit = 0b00000111;
  d4:	87 e0       	ldi	r24, 0x07	; 7
			break;
  d6:	08 95       	ret
		case 8:
			Digit = 0b01111111;
  d8:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
  da:	08 95       	ret
		case 9:
			Digit = 0b01101111;
  dc:	8f e6       	ldi	r24, 0x6F	; 111
			break;
  de:	08 95       	ret
		default:
			Digit = 0b00000000;
  e0:	80 e0       	ldi	r24, 0x00	; 0
			break;			
  e2:	08 95       	ret
	{
		case 0:
			Digit = 0b00111111;				
			break;
		case 1:
			Digit = 0b00000110;					
  e4:	86 e0       	ldi	r24, 0x06	; 6
		default:
			Digit = 0b00000000;
			break;			
 	}	
	return Digit;
}
  e6:	08 95       	ret

000000e8 <task2>:
 	_delay_ms(500);
}
*/

void task2()
{
  e8:	1f 93       	push	r17
	DDRA = 0xF0;
  ea:	80 ef       	ldi	r24, 0xF0	; 240
  ec:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2;
  f2:	81 b3       	in	r24, 0x11	; 17
  f4:	8c 60       	ori	r24, 0x0C	; 12
  f6:	81 bb       	out	0x11, r24	; 17
	PORTA = 0x80;	
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	8b bb       	out	0x1b, r24	; 27
	
	unsigned char i = 0;
	
	PORTC = DecToDigit(0);
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	0e 94 43 00 	call	0x86	; 0x86 <DecToDigit>
 102:	85 bb       	out	0x15, r24	; 21
	DDRA = 0xF0;
	DDRC = 0xFF;
	DDRD |= BTN1 | BTN2;
	PORTA = 0x80;	
	
	unsigned char i = 0;
 104:	10 e0       	ldi	r17, 0x00	; 0
//		PORTC= 0b01100110;	
//		PORTC= 0b11111111;	
  		
		 // task1();
		 
		 if (PIND & BTN1)
 106:	82 9b       	sbis	0x10, 2	; 16
 108:	0f c0       	rjmp	.+30     	; 0x128 <task2+0x40>
		 {
			 i++;
 10a:	1f 5f       	subi	r17, 0xFF	; 255
			 d = DecToDigit(i);
 10c:	81 2f       	mov	r24, r17
 10e:	0e 94 43 00 	call	0x86	; 0x86 <DecToDigit>
			 PORTC = d;
 112:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	8f e5       	ldi	r24, 0x5F	; 95
 116:	9a ee       	ldi	r25, 0xEA	; 234
 118:	a0 e0       	ldi	r26, 0x00	; 0
 11a:	81 50       	subi	r24, 0x01	; 1
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	a0 40       	sbci	r26, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <task2+0x32>
 122:	00 c0       	rjmp	.+0      	; 0x124 <task2+0x3c>
 124:	00 00       	nop
 126:	ef cf       	rjmp	.-34     	; 0x106 <task2+0x1e>
			 _delay_ms(300);
		 }
		 else if (PIND & BTN2)
 128:	83 9b       	sbis	0x10, 3	; 16
 12a:	ed cf       	rjmp	.-38     	; 0x106 <task2+0x1e>
		 {
			 i--;
 12c:	11 50       	subi	r17, 0x01	; 1
			 d = DecToDigit(i);
 12e:	81 2f       	mov	r24, r17
 130:	0e 94 43 00 	call	0x86	; 0x86 <DecToDigit>
			 PORTC = d;
 134:	85 bb       	out	0x15, r24	; 21
 136:	8f e5       	ldi	r24, 0x5F	; 95
 138:	9a ee       	ldi	r25, 0xEA	; 234
 13a:	a0 e0       	ldi	r26, 0x00	; 0
 13c:	81 50       	subi	r24, 0x01	; 1
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	a0 40       	sbci	r26, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <task2+0x54>
 144:	00 c0       	rjmp	.+0      	; 0x146 <task2+0x5e>
 146:	00 00       	nop
 148:	de cf       	rjmp	.-68     	; 0x106 <task2+0x1e>

0000014a <__vector_19>:
	}	
	
}

ISR(TIMER0_COMP_vect)
{	
 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	2f 93       	push	r18
 156:	3f 93       	push	r19
 158:	4f 93       	push	r20
 15a:	5f 93       	push	r21
 15c:	6f 93       	push	r22
 15e:	7f 93       	push	r23
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	PORTC = 0x00;
 170:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 172:	1b ba       	out	0x1b, r1	; 27
	
	PORTC = DecToDigit(arr[j]);
 174:	c0 91 64 00 	lds	r28, 0x0064
 178:	d0 91 65 00 	lds	r29, 0x0065
 17c:	fe 01       	movw	r30, r28
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	ea 59       	subi	r30, 0x9A	; 154
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	80 81       	ld	r24, Z
 188:	0e 94 43 00 	call	0x86	; 0x86 <DecToDigit>
 18c:	85 bb       	out	0x15, r24	; 21
	
	PORTA = (1 << (7 - j));
 18e:	87 e0       	ldi	r24, 0x07	; 7
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	8c 1b       	sub	r24, r28
 194:	9d 0b       	sbc	r25, r29
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	a9 01       	movw	r20, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <__vector_19+0x58>
 19e:	44 0f       	add	r20, r20
 1a0:	55 1f       	adc	r21, r21
 1a2:	8a 95       	dec	r24
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <__vector_19+0x54>
 1a6:	4b bb       	out	0x1b, r20	; 27
	j++;
 1a8:	ce 01       	movw	r24, r28
 1aa:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 1ac:	64 e0       	ldi	r22, 0x04	; 4
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	0e 94 86 01 	call	0x30c	; 0x30c <__divmodhi4>
 1b4:	90 93 65 00 	sts	0x0065, r25
 1b8:	80 93 64 00 	sts	0x0064, r24
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_1>:

ISR(INT0_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
	num++;	
 1f0:	80 91 60 00 	lds	r24, 0x0060
 1f4:	90 91 61 00 	lds	r25, 0x0061
 1f8:	01 96       	adiw	r24, 0x01	; 1
 1fa:	90 93 61 00 	sts	0x0061, r25
 1fe:	80 93 60 00 	sts	0x0060, r24
}
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <__vector_2>:

ISR(INT1_vect)
{
 210:	1f 92       	push	r1
 212:	0f 92       	push	r0
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	0f 92       	push	r0
 218:	11 24       	eor	r1, r1
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
	if (num != 0)
 21e:	80 91 60 00 	lds	r24, 0x0060
 222:	90 91 61 00 	lds	r25, 0x0061
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	29 f0       	breq	.+10     	; 0x234 <__vector_2+0x24>
	{
		num--;
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	90 93 61 00 	sts	0x0061, r25
 230:	80 93 60 00 	sts	0x0060, r24
	}
}
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <NumToArr>:

void NumToArr(int num)
{
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	e6 e6       	ldi	r30, 0x66	; 102
 248:	f0 e0       	ldi	r31, 0x00	; 0
	{
		num--;
	}
}

void NumToArr(int num)
 24a:	ef 01       	movw	r28, r30
 24c:	28 96       	adiw	r28, 0x08	; 8
{
	int k = 0;
	for (k = 0; k < DIGITS; k++)
	{
		arr[k] = num % 10;
 24e:	2a e0       	ldi	r18, 0x0A	; 10
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	b9 01       	movw	r22, r18
 254:	0e 94 86 01 	call	0x30c	; 0x30c <__divmodhi4>
 258:	81 93       	st	Z+, r24
 25a:	91 93       	st	Z+, r25
		num /= 10;
 25c:	86 2f       	mov	r24, r22
 25e:	97 2f       	mov	r25, r23
}

void NumToArr(int num)
{
	int k = 0;
	for (k = 0; k < DIGITS; k++)
 260:	ec 17       	cp	r30, r28
 262:	fd 07       	cpc	r31, r29
 264:	b1 f7       	brne	.-20     	; 0x252 <NumToArr+0x10>
	{
		arr[k] = num % 10;
		num /= 10;

	}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <task4>:
}


void task4()
{
	DDRA = 0xF0;
 26c:	80 ef       	ldi	r24, 0xF0	; 240
 26e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2;
 274:	81 b3       	in	r24, 0x11	; 17
 276:	8c 60       	ori	r24, 0x0C	; 12
 278:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 27e:	80 ec       	ldi	r24, 0xC0	; 192
 280:	8b bf       	out	0x3b, r24	; 59
		
	PORTA = 0x00;
 282:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 284:	15 ba       	out	0x15, r1	; 21
	
	TCCR0 |= (1 << WGM01) | (1 << CS01) | (1 << CS00);
 286:	83 b7       	in	r24, 0x33	; 51
 288:	8b 60       	ori	r24, 0x0B	; 11
 28a:	83 bf       	out	0x33, r24	; 51
	OCR0 = 20;
 28c:	84 e1       	ldi	r24, 0x14	; 20
 28e:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0);
 290:	89 b7       	in	r24, 0x39	; 57
 292:	82 60       	ori	r24, 0x02	; 2
 294:	89 bf       	out	0x39, r24	; 57
	PORTD = 0x0;
 296:	12 ba       	out	0x12, r1	; 18
	sei();	
 298:	78 94       	sei
	
	
	while(1)
	{
		NumToArr(num);
 29a:	80 91 60 00 	lds	r24, 0x0060
 29e:	90 91 61 00 	lds	r25, 0x0061
 2a2:	0e 94 21 01 	call	0x242	; 0x242 <NumToArr>
		
		if ((PIND & BTN1) || (PIND & BTN2))
 2a6:	82 99       	sbic	0x10, 2	; 16
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <task4+0x42>
 2aa:	83 9b       	sbis	0x10, 3	; 16
 2ac:	0e c0       	rjmp	.+28     	; 0x2ca <task4+0x5e>
		{
			wait++;
 2ae:	80 91 62 00 	lds	r24, 0x0062
 2b2:	90 91 63 00 	lds	r25, 0x0063
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	90 93 63 00 	sts	0x0063, r25
 2bc:	80 93 62 00 	sts	0x0062, r24
		else
		{
			wait = 0;
		}
		
		if (wait >= 500)
 2c0:	21 e0       	ldi	r18, 0x01	; 1
 2c2:	84 3f       	cpi	r24, 0xF4	; 244
 2c4:	92 07       	cpc	r25, r18
 2c6:	4c f3       	brlt	.-46     	; 0x29a <task4+0x2e>
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <task4+0x68>
		{
			wait++;
		}
		else
		{
			wait = 0;
 2ca:	10 92 63 00 	sts	0x0063, r1
 2ce:	10 92 62 00 	sts	0x0062, r1
 2d2:	e3 cf       	rjmp	.-58     	; 0x29a <task4+0x2e>
		}
		
		if (wait >= 500)
		{
			num = 0;
 2d4:	10 92 61 00 	sts	0x0061, r1
 2d8:	10 92 60 00 	sts	0x0060, r1
 2dc:	de cf       	rjmp	.-68     	; 0x29a <task4+0x2e>

000002de <task3>:
    }
}

void task3()
{
	DDRA = 0xF0;
 2de:	80 ef       	ldi	r24, 0xF0	; 240
 2e0:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;
 2e6:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 2e8:	15 ba       	out	0x15, r1	; 21
	
	
	TCCR0 |= (1 << WGM01) | (1 << CS01) | (1 << CS00);
 2ea:	83 b7       	in	r24, 0x33	; 51
 2ec:	8b 60       	ori	r24, 0x0B	; 11
 2ee:	83 bf       	out	0x33, r24	; 51
	OCR0 = 20;
 2f0:	84 e1       	ldi	r24, 0x14	; 20
 2f2:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0);
 2f4:	89 b7       	in	r24, 0x39	; 57
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	89 bf       	out	0x39, r24	; 57
	DDRD = 0xB0;
 2fa:	80 eb       	ldi	r24, 0xB0	; 176
 2fc:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x0;
 2fe:	12 ba       	out	0x12, r1	; 18
	sei();	
 300:	78 94       	sei
	
	NumToArr(1024);
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	94 e0       	ldi	r25, 0x04	; 4
 306:	0e 94 21 01 	call	0x242	; 0x242 <NumToArr>
 30a:	ff cf       	rjmp	.-2      	; 0x30a <task3+0x2c>

0000030c <__divmodhi4>:
 30c:	97 fb       	bst	r25, 7
 30e:	09 2e       	mov	r0, r25
 310:	07 26       	eor	r0, r23
 312:	0a d0       	rcall	.+20     	; 0x328 <__divmodhi4_neg1>
 314:	77 fd       	sbrc	r23, 7
 316:	04 d0       	rcall	.+8      	; 0x320 <__divmodhi4_neg2>
 318:	0c d0       	rcall	.+24     	; 0x332 <__udivmodhi4>
 31a:	06 d0       	rcall	.+12     	; 0x328 <__divmodhi4_neg1>
 31c:	00 20       	and	r0, r0
 31e:	1a f4       	brpl	.+6      	; 0x326 <__divmodhi4_exit>

00000320 <__divmodhi4_neg2>:
 320:	70 95       	com	r23
 322:	61 95       	neg	r22
 324:	7f 4f       	sbci	r23, 0xFF	; 255

00000326 <__divmodhi4_exit>:
 326:	08 95       	ret

00000328 <__divmodhi4_neg1>:
 328:	f6 f7       	brtc	.-4      	; 0x326 <__divmodhi4_exit>
 32a:	90 95       	com	r25
 32c:	81 95       	neg	r24
 32e:	9f 4f       	sbci	r25, 0xFF	; 255
 330:	08 95       	ret

00000332 <__udivmodhi4>:
 332:	aa 1b       	sub	r26, r26
 334:	bb 1b       	sub	r27, r27
 336:	51 e1       	ldi	r21, 0x11	; 17
 338:	07 c0       	rjmp	.+14     	; 0x348 <__udivmodhi4_ep>

0000033a <__udivmodhi4_loop>:
 33a:	aa 1f       	adc	r26, r26
 33c:	bb 1f       	adc	r27, r27
 33e:	a6 17       	cp	r26, r22
 340:	b7 07       	cpc	r27, r23
 342:	10 f0       	brcs	.+4      	; 0x348 <__udivmodhi4_ep>
 344:	a6 1b       	sub	r26, r22
 346:	b7 0b       	sbc	r27, r23

00000348 <__udivmodhi4_ep>:
 348:	88 1f       	adc	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	5a 95       	dec	r21
 34e:	a9 f7       	brne	.-22     	; 0x33a <__udivmodhi4_loop>
 350:	80 95       	com	r24
 352:	90 95       	com	r25
 354:	bc 01       	movw	r22, r24
 356:	cd 01       	movw	r24, r26
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
