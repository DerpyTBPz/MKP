
AVRGCC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000450  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800060  00800060  000004c4  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000d3  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003bd  00000000  00000000  00000d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000023b  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000536  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000015e  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f6  00000000  00000000  00001a52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_1>
   8:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 37       	cpi	r26, 0x76	; 118
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <main>
  74:	0c 94 26 02 	jmp	0x44c	; 0x44c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	f9 f0       	breq	.+62     	; 0xbe <DecToDigit+0x42>
  80:	85 30       	cpi	r24, 0x05	; 5
  82:	48 f4       	brcc	.+18     	; 0x96 <DecToDigit+0x1a>
  84:	81 30       	cpi	r24, 0x01	; 1
  86:	49 f1       	breq	.+82     	; 0xda <DecToDigit+0x5e>
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	98 f0       	brcs	.+38     	; 0xb2 <DecToDigit+0x36>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	99 f0       	breq	.+38     	; 0xb6 <DecToDigit+0x3a>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	09 f5       	brne	.+66     	; 0xd6 <DecToDigit+0x5a>
  94:	12 c0       	rjmp	.+36     	; 0xba <DecToDigit+0x3e>
  96:	87 30       	cpi	r24, 0x07	; 7
  98:	c1 f0       	breq	.+48     	; 0xca <DecToDigit+0x4e>
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	28 f4       	brcc	.+10     	; 0xa8 <DecToDigit+0x2c>
  9e:	85 30       	cpi	r24, 0x05	; 5
  a0:	81 f0       	breq	.+32     	; 0xc2 <DecToDigit+0x46>
  a2:	86 30       	cpi	r24, 0x06	; 6
  a4:	c1 f4       	brne	.+48     	; 0xd6 <DecToDigit+0x5a>
  a6:	0f c0       	rjmp	.+30     	; 0xc6 <DecToDigit+0x4a>
  a8:	88 30       	cpi	r24, 0x08	; 8
  aa:	89 f0       	breq	.+34     	; 0xce <DecToDigit+0x52>
  ac:	89 30       	cpi	r24, 0x09	; 9
  ae:	99 f4       	brne	.+38     	; 0xd6 <DecToDigit+0x5a>
  b0:	10 c0       	rjmp	.+32     	; 0xd2 <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b00111111;				
  b2:	8f e3       	ldi	r24, 0x3F	; 63
  b4:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b01011011;					
  b6:	8b e5       	ldi	r24, 0x5B	; 91
			break;
  b8:	08 95       	ret
		case 3:
			Digit = 0b01001111;
  ba:	8f e4       	ldi	r24, 0x4F	; 79
			break;
  bc:	08 95       	ret
		case 4:
			Digit = 0b01100110;
  be:	86 e6       	ldi	r24, 0x66	; 102
			break;
  c0:	08 95       	ret
		case 5:
			Digit = 0b01101101;
  c2:	8d e6       	ldi	r24, 0x6D	; 109
			break;
  c4:	08 95       	ret
		case 6:
			Digit = 0b01111101;
  c6:	8d e7       	ldi	r24, 0x7D	; 125
			break;
  c8:	08 95       	ret
		case 7:
			Digit = 0b00000111;
  ca:	87 e0       	ldi	r24, 0x07	; 7
			break;
  cc:	08 95       	ret
		case 8:
			Digit = 0b01111111;
  ce:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
  d0:	08 95       	ret
		case 9:
			Digit = 0b01101111;
  d2:	8f e6       	ldi	r24, 0x6F	; 111
			break;
  d4:	08 95       	ret
		default:
			Digit = 0b00000000;
  d6:	80 e0       	ldi	r24, 0x00	; 0
			break;			
  d8:	08 95       	ret
	{
		case 0:
			Digit = 0b00111111;				
			break;
		case 1:
			Digit = 0b00000110;					
  da:	86 e0       	ldi	r24, 0x06	; 6
// 			break;			
//  	}	


	return Digit;
}
  dc:	08 95       	ret

000000de <task2>:

void task2()
{
  de:	1f 93       	push	r17
	DDRA = 0xF0;
  e0:	80 ef       	ldi	r24, 0xF0	; 240
  e2:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2;
  e8:	81 b3       	in	r24, 0x11	; 17
  ea:	8c 60       	ori	r24, 0x0C	; 12
  ec:	81 bb       	out	0x11, r24	; 17
	PORTA = 0x80;	
  ee:	80 e8       	ldi	r24, 0x80	; 128
  f0:	8b bb       	out	0x1b, r24	; 27
	
	unsigned char i = 0;
	
	PORTC = DecToDigit(0);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
  f8:	85 bb       	out	0x15, r24	; 21
	DDRA = 0xF0;
	DDRC = 0xFF;
	DDRD |= BTN1 | BTN2;
	PORTA = 0x80;	
	
	unsigned char i = 0;
  fa:	10 e0       	ldi	r17, 0x00	; 0
	
	while(1)
    {
		char d = DecToDigit(i);		
		 
		 if (PIND & BTN1)
  fc:	82 9b       	sbis	0x10, 2	; 16
  fe:	0f c0       	rjmp	.+30     	; 0x11e <task2+0x40>
		 {
			 i++;
 100:	1f 5f       	subi	r17, 0xFF	; 255
			 d = DecToDigit(i);
 102:	81 2f       	mov	r24, r17
 104:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
			 PORTC = d;
 108:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f e5       	ldi	r24, 0x5F	; 95
 10c:	9a ee       	ldi	r25, 0xEA	; 234
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	81 50       	subi	r24, 0x01	; 1
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	a0 40       	sbci	r26, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <task2+0x32>
 118:	00 c0       	rjmp	.+0      	; 0x11a <task2+0x3c>
 11a:	00 00       	nop
 11c:	ef cf       	rjmp	.-34     	; 0xfc <task2+0x1e>
			 _delay_ms(300);
		 }
		 else if (PIND & BTN2)
 11e:	83 9b       	sbis	0x10, 3	; 16
 120:	ed cf       	rjmp	.-38     	; 0xfc <task2+0x1e>
		 {
			 i--;
 122:	11 50       	subi	r17, 0x01	; 1
			 d = DecToDigit(i);
 124:	81 2f       	mov	r24, r17
 126:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
			 PORTC = d;
 12a:	85 bb       	out	0x15, r24	; 21
 12c:	8f e5       	ldi	r24, 0x5F	; 95
 12e:	9a ee       	ldi	r25, 0xEA	; 234
 130:	a0 e0       	ldi	r26, 0x00	; 0
 132:	81 50       	subi	r24, 0x01	; 1
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	a0 40       	sbci	r26, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <task2+0x54>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <task2+0x5e>
 13c:	00 00       	nop
 13e:	de cf       	rjmp	.-68     	; 0xfc <task2+0x1e>

00000140 <__vector_19>:
	}	
	
}

ISR(TIMER0_COMP_vect)
{	
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	3f 93       	push	r19
 14e:	4f 93       	push	r20
 150:	5f 93       	push	r21
 152:	6f 93       	push	r22
 154:	7f 93       	push	r23
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	af 93       	push	r26
 15c:	bf 93       	push	r27
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31
	PORTC = 0x00;
 166:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 168:	1b ba       	out	0x1b, r1	; 27
	
	PORTC = DecToDigit(arr[j]);
 16a:	c0 91 6a 00 	lds	r28, 0x006A
 16e:	d0 91 6b 00 	lds	r29, 0x006B
 172:	fe 01       	movw	r30, r28
 174:	ee 0f       	add	r30, r30
 176:	ff 1f       	adc	r31, r31
 178:	e2 59       	subi	r30, 0x92	; 146
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
 182:	85 bb       	out	0x15, r24	; 21
	
	PORTA = (1 << (7 - j));
 184:	87 e0       	ldi	r24, 0x07	; 7
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	8c 1b       	sub	r24, r28
 18a:	9d 0b       	sbc	r25, r29
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	a9 01       	movw	r20, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <__vector_19+0x58>
 194:	44 0f       	add	r20, r20
 196:	55 1f       	adc	r21, r21
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <__vector_19+0x54>
 19c:	4b bb       	out	0x1b, r20	; 27
	j++;
 19e:	ce 01       	movw	r24, r28
 1a0:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 1a2:	64 e0       	ldi	r22, 0x04	; 4
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divmodhi4>
 1aa:	90 93 6b 00 	sts	0x006B, r25
 1ae:	80 93 6a 00 	sts	0x006A, r24
}
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{	
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	PORTC = 0x00;
 1fe:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 200:	1b ba       	out	0x1b, r1	; 27
	
	PORTC = DecToDigit(arr[j]);	
 202:	c0 91 6a 00 	lds	r28, 0x006A
 206:	d0 91 6b 00 	lds	r29, 0x006B
 20a:	fe 01       	movw	r30, r28
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	e2 59       	subi	r30, 0x92	; 146
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	80 81       	ld	r24, Z
 216:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
 21a:	85 bb       	out	0x15, r24	; 21
	
	PORTA = (1 << (7 - j));
 21c:	87 e0       	ldi	r24, 0x07	; 7
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	8c 1b       	sub	r24, r28
 222:	9d 0b       	sbc	r25, r29
 224:	21 e0       	ldi	r18, 0x01	; 1
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	a9 01       	movw	r20, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <__vector_6+0x58>
 22c:	44 0f       	add	r20, r20
 22e:	55 1f       	adc	r21, r21
 230:	8a 95       	dec	r24
 232:	e2 f7       	brpl	.-8      	; 0x22c <__vector_6+0x54>
 234:	4b bb       	out	0x1b, r20	; 27
	j++;
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 23a:	64 e0       	ldi	r22, 0x04	; 4
 23c:	70 e0       	ldi	r23, 0x00	; 0
 23e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divmodhi4>
 242:	90 93 6b 00 	sts	0x006B, r25
 246:	80 93 6a 00 	sts	0x006A, r24
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <__vector_1>:

ISR(INT0_vect)
{	
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	2f 93       	push	r18
 27c:	3f 93       	push	r19
 27e:	8f 93       	push	r24
 280:	9f 93       	push	r25
	if (flag0 > 0)
 282:	80 91 64 00 	lds	r24, 0x0064
 286:	90 91 65 00 	lds	r25, 0x0065
 28a:	18 16       	cp	r1, r24
 28c:	19 06       	cpc	r1, r25
 28e:	54 f0       	brlt	.+20     	; 0x2a4 <__vector_1+0x34>
	{
		
	}
	else 
	{
		num++;		
 290:	20 91 60 00 	lds	r18, 0x0060
 294:	30 91 61 00 	lds	r19, 0x0061
 298:	2f 5f       	subi	r18, 0xFF	; 255
 29a:	3f 4f       	sbci	r19, 0xFF	; 255
 29c:	30 93 61 00 	sts	0x0061, r19
 2a0:	20 93 60 00 	sts	0x0060, r18
	}
	flag0++;	
 2a4:	01 96       	adiw	r24, 0x01	; 1
 2a6:	90 93 65 00 	sts	0x0065, r25
 2aa:	80 93 64 00 	sts	0x0064, r24
}
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	3f 91       	pop	r19
 2b4:	2f 91       	pop	r18
 2b6:	0f 90       	pop	r0
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	0f 90       	pop	r0
 2bc:	1f 90       	pop	r1
 2be:	18 95       	reti

000002c0 <__vector_2>:

ISR(INT1_vect)
{	
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
	if (flag1 > 0)
 2ce:	80 91 66 00 	lds	r24, 0x0066
 2d2:	90 91 67 00 	lds	r25, 0x0067
 2d6:	18 16       	cp	r1, r24
 2d8:	19 06       	cpc	r1, r25
 2da:	5c f0       	brlt	.+22     	; 0x2f2 <__vector_2+0x32>
	{
		
	}
	else 
	{
		if (num != 0)
 2dc:	80 91 60 00 	lds	r24, 0x0060
 2e0:	90 91 61 00 	lds	r25, 0x0061
 2e4:	00 97       	sbiw	r24, 0x00	; 0
 2e6:	29 f0       	breq	.+10     	; 0x2f2 <__vector_2+0x32>
		{
			num--;
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	90 93 61 00 	sts	0x0061, r25
 2ee:	80 93 60 00 	sts	0x0060, r24
		}
	}
	
	flag1++;		
 2f2:	80 91 66 00 	lds	r24, 0x0066
 2f6:	90 91 67 00 	lds	r25, 0x0067
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	90 93 67 00 	sts	0x0067, r25
 300:	80 93 66 00 	sts	0x0066, r24
}
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	0f 90       	pop	r0
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	0f 90       	pop	r0
 30e:	1f 90       	pop	r1
 310:	18 95       	reti

00000312 <NumToArr>:

void NumToArr(int num)
{	
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ee e6       	ldi	r30, 0x6E	; 110
 318:	f0 e0       	ldi	r31, 0x00	; 0
	}
	
	flag1++;		
}

void NumToArr(int num)
 31a:	ef 01       	movw	r28, r30
 31c:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = num % 10;
 31e:	2a e0       	ldi	r18, 0x0A	; 10
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	b9 01       	movw	r22, r18
 324:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__divmodhi4>
 328:	81 93       	st	Z+, r24
 32a:	91 93       	st	Z+, r25
		num /= 10;
 32c:	86 2f       	mov	r24, r22
 32e:	97 2f       	mov	r25, r23
	flag1++;		
}

void NumToArr(int num)
{	
	for (int k = 0; k < DIGITS; k++)
 330:	ec 17       	cp	r30, r28
 332:	fd 07       	cpc	r31, r29
 334:	b1 f7       	brne	.-20     	; 0x322 <NumToArr+0x10>
	{		
		arr[k] = num % 10;
		num /= 10;
	}
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <task4>:
}


void task4()
{
	DDRA = 0xF0;
 33c:	80 ef       	ldi	r24, 0xF0	; 240
 33e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 340:	8f ef       	ldi	r24, 0xFF	; 255
 342:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2;
 344:	81 b3       	in	r24, 0x11	; 17
 346:	8c 60       	ori	r24, 0x0C	; 12
 348:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
 34a:	8f e0       	ldi	r24, 0x0F	; 15
 34c:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 34e:	80 ec       	ldi	r24, 0xC0	; 192
 350:	8b bf       	out	0x3b, r24	; 59
		
	PORTA = 0x00;
 352:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 354:	15 ba       	out	0x15, r1	; 21
	
	//TIMER1
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
 356:	8f b5       	in	r24, 0x2f	; 47
 358:	81 6a       	ori	r24, 0xA1	; 161
 35a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<CS10);
 35c:	8e b5       	in	r24, 0x2e	; 46
 35e:	89 60       	ori	r24, 0x09	; 9
 360:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 10;
 362:	8a e0       	ldi	r24, 0x0A	; 10
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	9b bd       	out	0x2b, r25	; 43
 368:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= (1 << OCIE1A);	
 36a:	89 b7       	in	r24, 0x39	; 57
 36c:	80 61       	ori	r24, 0x10	; 16
 36e:	89 bf       	out	0x39, r24	; 57
	
	PORTD = 0x0;
 370:	12 ba       	out	0x12, r1	; 18
	sei();
 372:	78 94       	sei
	
	
	
	while(1)
	{
		NumToArr(num);	
 374:	80 91 60 00 	lds	r24, 0x0060
 378:	90 91 61 00 	lds	r25, 0x0061
 37c:	0e 94 89 01 	call	0x312	; 0x312 <NumToArr>
		
		if ((PIND & BTN1) || (PIND & BTN2))
 380:	82 99       	sbic	0x10, 2	; 16
 382:	02 c0       	rjmp	.+4      	; 0x388 <task4+0x4c>
 384:	83 9b       	sbis	0x10, 3	; 16
 386:	0d c0       	rjmp	.+26     	; 0x3a2 <task4+0x66>
		{			
			wait++;
 388:	80 91 62 00 	lds	r24, 0x0062
 38c:	90 91 63 00 	lds	r25, 0x0063
 390:	01 96       	adiw	r24, 0x01	; 1
 392:	90 93 63 00 	sts	0x0063, r25
 396:	80 93 62 00 	sts	0x0062, r24
		else
		{			
			wait = 0;
		}
		
		if (wait >= 25)
 39a:	89 31       	cpi	r24, 0x19	; 25
 39c:	91 05       	cpc	r25, r1
 39e:	34 f4       	brge	.+12     	; 0x3ac <task4+0x70>
 3a0:	09 c0       	rjmp	.+18     	; 0x3b4 <task4+0x78>
		{			
			wait++;
		}
		else
		{			
			wait = 0;
 3a2:	10 92 63 00 	sts	0x0063, r1
 3a6:	10 92 62 00 	sts	0x0062, r1
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <task4+0x78>
		}
		
		if (wait >= 25)
		{
			num = 0;
 3ac:	10 92 61 00 	sts	0x0061, r1
 3b0:	10 92 60 00 	sts	0x0060, r1
		}		
		
		flag0 = 0;
 3b4:	10 92 65 00 	sts	0x0065, r1
 3b8:	10 92 64 00 	sts	0x0064, r1
		flag1 = 0;
 3bc:	10 92 67 00 	sts	0x0067, r1
 3c0:	10 92 66 00 	sts	0x0066, r1
	}	
 3c4:	d7 cf       	rjmp	.-82     	; 0x374 <task4+0x38>

000003c6 <main>:
int main(void)
{
	
//	task2();
// 	task3();
	task4();
 3c6:	0e 94 9e 01 	call	0x33c	; 0x33c <task4>
}
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	08 95       	ret

000003d0 <task3>:
    }
}

void task3()
{
	DDRA = 0xF0;
 3d0:	80 ef       	ldi	r24, 0xF0	; 240
 3d2:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 3d4:	8f ef       	ldi	r24, 0xFF	; 255
 3d6:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;
 3d8:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 3da:	15 ba       	out	0x15, r1	; 21
	
	
	TCCR0 |= (1 << WGM01) | (1 << CS01) | (1 << CS00);
 3dc:	83 b7       	in	r24, 0x33	; 51
 3de:	8b 60       	ori	r24, 0x0B	; 11
 3e0:	83 bf       	out	0x33, r24	; 51
	OCR0 = 20;
 3e2:	84 e1       	ldi	r24, 0x14	; 20
 3e4:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0);
 3e6:	89 b7       	in	r24, 0x39	; 57
 3e8:	82 60       	ori	r24, 0x02	; 2
 3ea:	89 bf       	out	0x39, r24	; 57
	DDRD = 0xB0;
 3ec:	80 eb       	ldi	r24, 0xB0	; 176
 3ee:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x0;
 3f0:	12 ba       	out	0x12, r1	; 18
	sei();	
 3f2:	78 94       	sei
	
	NumToArr(1024);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	94 e0       	ldi	r25, 0x04	; 4
 3f8:	0e 94 89 01 	call	0x312	; 0x312 <NumToArr>
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <task3+0x2c>

000003fe <__divmodhi4>:
 3fe:	97 fb       	bst	r25, 7
 400:	09 2e       	mov	r0, r25
 402:	07 26       	eor	r0, r23
 404:	0a d0       	rcall	.+20     	; 0x41a <__divmodhi4_neg1>
 406:	77 fd       	sbrc	r23, 7
 408:	04 d0       	rcall	.+8      	; 0x412 <__divmodhi4_neg2>
 40a:	0c d0       	rcall	.+24     	; 0x424 <__udivmodhi4>
 40c:	06 d0       	rcall	.+12     	; 0x41a <__divmodhi4_neg1>
 40e:	00 20       	and	r0, r0
 410:	1a f4       	brpl	.+6      	; 0x418 <__divmodhi4_exit>

00000412 <__divmodhi4_neg2>:
 412:	70 95       	com	r23
 414:	61 95       	neg	r22
 416:	7f 4f       	sbci	r23, 0xFF	; 255

00000418 <__divmodhi4_exit>:
 418:	08 95       	ret

0000041a <__divmodhi4_neg1>:
 41a:	f6 f7       	brtc	.-4      	; 0x418 <__divmodhi4_exit>
 41c:	90 95       	com	r25
 41e:	81 95       	neg	r24
 420:	9f 4f       	sbci	r25, 0xFF	; 255
 422:	08 95       	ret

00000424 <__udivmodhi4>:
 424:	aa 1b       	sub	r26, r26
 426:	bb 1b       	sub	r27, r27
 428:	51 e1       	ldi	r21, 0x11	; 17
 42a:	07 c0       	rjmp	.+14     	; 0x43a <__udivmodhi4_ep>

0000042c <__udivmodhi4_loop>:
 42c:	aa 1f       	adc	r26, r26
 42e:	bb 1f       	adc	r27, r27
 430:	a6 17       	cp	r26, r22
 432:	b7 07       	cpc	r27, r23
 434:	10 f0       	brcs	.+4      	; 0x43a <__udivmodhi4_ep>
 436:	a6 1b       	sub	r26, r22
 438:	b7 0b       	sbc	r27, r23

0000043a <__udivmodhi4_ep>:
 43a:	88 1f       	adc	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	5a 95       	dec	r21
 440:	a9 f7       	brne	.-22     	; 0x42c <__udivmodhi4_loop>
 442:	80 95       	com	r24
 444:	90 95       	com	r25
 446:	bc 01       	movw	r22, r24
 448:	cd 01       	movw	r24, r26
 44a:	08 95       	ret

0000044c <_exit>:
 44c:	f8 94       	cli

0000044e <__stop_program>:
 44e:	ff cf       	rjmp	.-2      	; 0x44e <__stop_program>
