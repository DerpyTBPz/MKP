
AVRGCC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000084  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000002a  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000c2  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000085  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000011c  00000000  00000000  000009c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000096  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000013  00000000  00000000  00000baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000bbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 40 00 	jmp	0x80	; 0x80 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>

int main(void)
{
	DDRA = 0xF0;
  6c:	80 ef       	ldi	r24, 0xF0	; 240
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x10;
  74:	80 e1       	ldi	r24, 0x10	; 16
  76:	8b bb       	out	0x1b, r24	; 27
	PORTC = 0x06;
  78:	86 e0       	ldi	r24, 0x06	; 6
  7a:	85 bb       	out	0x15, r24	; 21
  7c:	ff cf       	rjmp	.-2      	; 0x7c <main+0x10>

0000007e <DecToDigit>:
			Digit = 0x01101111;
			break;
			
	}		
	
  7e:	08 95       	ret

00000080 <_exit>:
  80:	f8 94       	cli

00000082 <__stop_program>:
  82:	ff cf       	rjmp	.-2      	; 0x82 <__stop_program>
