
AVRGCC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  000002f4  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000009c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000069  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002bc  00000000  00000000  00000ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e6  00000000  00000000  00000d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d9  00000000  00000000  00000f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000011d  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f6  00000000  00000000  000014e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 9a 00 	jmp	0x134	; 0x134 <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 12 01 	call	0x224	; 0x224 <main>
  74:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	f9 f0       	breq	.+62     	; 0xbe <DecToDigit+0x42>
  80:	85 30       	cpi	r24, 0x05	; 5
  82:	48 f4       	brcc	.+18     	; 0x96 <DecToDigit+0x1a>
  84:	81 30       	cpi	r24, 0x01	; 1
  86:	49 f1       	breq	.+82     	; 0xda <DecToDigit+0x5e>
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	98 f0       	brcs	.+38     	; 0xb2 <DecToDigit+0x36>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	99 f0       	breq	.+38     	; 0xb6 <DecToDigit+0x3a>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	09 f5       	brne	.+66     	; 0xd6 <DecToDigit+0x5a>
  94:	12 c0       	rjmp	.+36     	; 0xba <DecToDigit+0x3e>
  96:	87 30       	cpi	r24, 0x07	; 7
  98:	c1 f0       	breq	.+48     	; 0xca <DecToDigit+0x4e>
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	28 f4       	brcc	.+10     	; 0xa8 <DecToDigit+0x2c>
  9e:	85 30       	cpi	r24, 0x05	; 5
  a0:	81 f0       	breq	.+32     	; 0xc2 <DecToDigit+0x46>
  a2:	86 30       	cpi	r24, 0x06	; 6
  a4:	c1 f4       	brne	.+48     	; 0xd6 <DecToDigit+0x5a>
  a6:	0f c0       	rjmp	.+30     	; 0xc6 <DecToDigit+0x4a>
  a8:	88 30       	cpi	r24, 0x08	; 8
  aa:	89 f0       	breq	.+34     	; 0xce <DecToDigit+0x52>
  ac:	89 30       	cpi	r24, 0x09	; 9
  ae:	99 f4       	brne	.+38     	; 0xd6 <DecToDigit+0x5a>
  b0:	10 c0       	rjmp	.+32     	; 0xd2 <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
  b2:	8f e5       	ldi	r24, 0x5F	; 95
  b4:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
  b6:	8b e3       	ldi	r24, 0x3B	; 59
			break;
  b8:	08 95       	ret
		case 3:
			Digit = 0b00101111;
  ba:	8f e2       	ldi	r24, 0x2F	; 47
			break;
  bc:	08 95       	ret
		case 4:
			Digit = 0b01100110;
  be:	86 e6       	ldi	r24, 0x66	; 102
			break;
  c0:	08 95       	ret
		case 5:
			Digit = 0b01101101;
  c2:	8d e6       	ldi	r24, 0x6D	; 109
			break;
  c4:	08 95       	ret
		case 6:
			Digit = 0b01111101;
  c6:	8d e7       	ldi	r24, 0x7D	; 125
			break;
  c8:	08 95       	ret
		case 7:
			Digit = 0b00000111;
  ca:	87 e0       	ldi	r24, 0x07	; 7
			break;
  cc:	08 95       	ret
		case 8:
			Digit = 0b01111111;
  ce:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
  d0:	08 95       	ret
		case 9:
			Digit = 0b01101111;
  d2:	8f e6       	ldi	r24, 0x6F	; 111
			break;
  d4:	08 95       	ret
		default:
			Digit = 0b00000000;
  d6:	80 e0       	ldi	r24, 0x00	; 0
			break;			
  d8:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
  da:	86 e0       	ldi	r24, 0x06	; 6
		default:
			Digit = 0b00000000;
			break;			
	}		
	return Digit;
}
  dc:	08 95       	ret

000000de <task2>:
 	_delay_ms(500);
}
*/

void task2()
{
  de:	1f 93       	push	r17
	DDRA = 0xF0;
  e0:	80 ef       	ldi	r24, 0xF0	; 240
  e2:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2;
  e8:	81 b3       	in	r24, 0x11	; 17
  ea:	8c 60       	ori	r24, 0x0C	; 12
  ec:	81 bb       	out	0x11, r24	; 17
	PORTA = 0x40;	
  ee:	80 e4       	ldi	r24, 0x40	; 64
  f0:	8b bb       	out	0x1b, r24	; 27
	
	unsigned char i = 0;
	
	PORTC = DecToDigit(0);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
  f8:	85 bb       	out	0x15, r24	; 21
	DDRA = 0xF0;
	DDRC = 0xFF;
	DDRD |= BTN1 | BTN2;
	PORTA = 0x40;	
	
	unsigned char i = 0;
  fa:	10 e0       	ldi	r17, 0x00	; 0
//		PORTC= 0b01100110;	
//		PORTC= 0b11111111;	
  		
		 // task1();
		 
		 if (PIND & BTN1)
  fc:	82 9b       	sbis	0x10, 2	; 16
  fe:	0c c0       	rjmp	.+24     	; 0x118 <task2+0x3a>
		 {
			 i++;
 100:	1f 5f       	subi	r17, 0xFF	; 255
			 d = DecToDigit(i);
 102:	81 2f       	mov	r24, r17
 104:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
			 PORTC = d;
 108:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	87 ea       	ldi	r24, 0xA7	; 167
 10c:	91 e6       	ldi	r25, 0x61	; 97
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <task2+0x30>
 112:	00 c0       	rjmp	.+0      	; 0x114 <task2+0x36>
 114:	00 00       	nop
 116:	f2 cf       	rjmp	.-28     	; 0xfc <task2+0x1e>
			 _delay_ms(100);
		 }
		 else if (PIND & BTN2)
 118:	83 9b       	sbis	0x10, 3	; 16
 11a:	f0 cf       	rjmp	.-32     	; 0xfc <task2+0x1e>
		 {
			 i--;
 11c:	11 50       	subi	r17, 0x01	; 1
			 d = DecToDigit(i);
 11e:	81 2f       	mov	r24, r17
 120:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
			 PORTC = d;
 124:	85 bb       	out	0x15, r24	; 21
 126:	87 ea       	ldi	r24, 0xA7	; 167
 128:	91 e6       	ldi	r25, 0x61	; 97
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <task2+0x4c>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <task2+0x52>
 130:	00 00       	nop
 132:	e4 cf       	rjmp	.-56     	; 0xfc <task2+0x1e>

00000134 <__vector_19>:
		
	}	
}

ISR(TIMER0_COMP_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
// 	{
// 		PORTD ^= 0x80;
// 		cnt = 0; 
// 	}
	
	PORTC = 0x00;
 15a:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 15c:	1b ba       	out	0x1b, r1	; 27
	
	PORTC = DecToDigit(arr[j]);
 15e:	c0 91 60 00 	lds	r28, 0x0060
 162:	d0 91 61 00 	lds	r29, 0x0061
 166:	fe 01       	movw	r30, r28
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	ee 59       	subi	r30, 0x9E	; 158
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	80 81       	ld	r24, Z
 172:	0e 94 3e 00 	call	0x7c	; 0x7c <DecToDigit>
 176:	85 bb       	out	0x15, r24	; 21
	
	PORTA = (1 << (7 - j));
 178:	87 e0       	ldi	r24, 0x07	; 7
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	8c 1b       	sub	r24, r28
 17e:	9d 0b       	sbc	r25, r29
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	a9 01       	movw	r20, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <__vector_19+0x58>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <__vector_19+0x54>
 190:	4b bb       	out	0x1b, r20	; 27
	j++;
 192:	ce 01       	movw	r24, r28
 194:	01 96       	adiw	r24, 0x01	; 1
	j = j % 4;
 196:	64 e0       	ldi	r22, 0x04	; 4
 198:	70 e0       	ldi	r23, 0x00	; 0
 19a:	0e 94 17 01 	call	0x22e	; 0x22e <__divmodhi4>
 19e:	90 93 61 00 	sts	0x0061, r25
 1a2:	80 93 60 00 	sts	0x0060, r24
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	7f 91       	pop	r23
 1b8:	6f 91       	pop	r22
 1ba:	5f 91       	pop	r21
 1bc:	4f 91       	pop	r20
 1be:	3f 91       	pop	r19
 1c0:	2f 91       	pop	r18
 1c2:	0f 90       	pop	r0
 1c4:	0f be       	out	0x3f, r0	; 63
 1c6:	0f 90       	pop	r0
 1c8:	1f 90       	pop	r1
 1ca:	18 95       	reti

000001cc <NumToArr>:

void NumToArr(int num)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	e2 e6       	ldi	r30, 0x62	; 98
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
	PORTA = (1 << (7 - j));
	j++;
	j = j % 4;
}

void NumToArr(int num)
 1d4:	ef 01       	movw	r28, r30
 1d6:	28 96       	adiw	r28, 0x08	; 8
{
	int k = 0;
	for (k = 0; k < DIGITS; k++)
	{
		arr[k] = num % 10;
 1d8:	2a e0       	ldi	r18, 0x0A	; 10
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	0e 94 17 01 	call	0x22e	; 0x22e <__divmodhi4>
 1e2:	81 93       	st	Z+, r24
 1e4:	91 93       	st	Z+, r25
		num /= 10;
 1e6:	86 2f       	mov	r24, r22
 1e8:	97 2f       	mov	r25, r23
}

void NumToArr(int num)
{
	int k = 0;
	for (k = 0; k < DIGITS; k++)
 1ea:	ec 17       	cp	r30, r28
 1ec:	fd 07       	cpc	r31, r29
 1ee:	b1 f7       	brne	.-20     	; 0x1dc <NumToArr+0x10>
	{
		arr[k] = num % 10;
		num /= 10;

	}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <task3>:
    }
}

void task3()
{
	DDRA = 0xF0;
 1f6:	80 ef       	ldi	r24, 0xF0	; 240
 1f8:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 1fa:	8f ef       	ldi	r24, 0xFF	; 255
 1fc:	84 bb       	out	0x14, r24	; 20
	PORTA = 0x00;
 1fe:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 200:	15 ba       	out	0x15, r1	; 21
	
	
	TCCR0 |= (1 << WGM01) | (1 << CS01) | (1 << CS00);
 202:	83 b7       	in	r24, 0x33	; 51
 204:	8b 60       	ori	r24, 0x0B	; 11
 206:	83 bf       	out	0x33, r24	; 51
	OCR0 = 20;
 208:	84 e1       	ldi	r24, 0x14	; 20
 20a:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1 << OCIE0);
 20c:	89 b7       	in	r24, 0x39	; 57
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	89 bf       	out	0x39, r24	; 57
	DDRD = 0xB0;
 212:	80 eb       	ldi	r24, 0xB0	; 176
 214:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x0;
 216:	12 ba       	out	0x12, r1	; 18
	sei();
 218:	78 94       	sei
	
	NumToArr(1024);
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	94 e0       	ldi	r25, 0x04	; 4
 21e:	0e 94 e6 00 	call	0x1cc	; 0x1cc <NumToArr>
 222:	ff cf       	rjmp	.-2      	; 0x222 <task3+0x2c>

00000224 <main>:
int arr[DIGITS];

int main(void)
{
	
 	task3();
 224:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <task3>
//  		 	
//   		
//         //TODO:: Please write your application code 
// 		
//     }
}
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	08 95       	ret

0000022e <__divmodhi4>:
 22e:	97 fb       	bst	r25, 7
 230:	09 2e       	mov	r0, r25
 232:	07 26       	eor	r0, r23
 234:	0a d0       	rcall	.+20     	; 0x24a <__divmodhi4_neg1>
 236:	77 fd       	sbrc	r23, 7
 238:	04 d0       	rcall	.+8      	; 0x242 <__divmodhi4_neg2>
 23a:	0c d0       	rcall	.+24     	; 0x254 <__udivmodhi4>
 23c:	06 d0       	rcall	.+12     	; 0x24a <__divmodhi4_neg1>
 23e:	00 20       	and	r0, r0
 240:	1a f4       	brpl	.+6      	; 0x248 <__divmodhi4_exit>

00000242 <__divmodhi4_neg2>:
 242:	70 95       	com	r23
 244:	61 95       	neg	r22
 246:	7f 4f       	sbci	r23, 0xFF	; 255

00000248 <__divmodhi4_exit>:
 248:	08 95       	ret

0000024a <__divmodhi4_neg1>:
 24a:	f6 f7       	brtc	.-4      	; 0x248 <__divmodhi4_exit>
 24c:	90 95       	com	r25
 24e:	81 95       	neg	r24
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	08 95       	ret

00000254 <__udivmodhi4>:
 254:	aa 1b       	sub	r26, r26
 256:	bb 1b       	sub	r27, r27
 258:	51 e1       	ldi	r21, 0x11	; 17
 25a:	07 c0       	rjmp	.+14     	; 0x26a <__udivmodhi4_ep>

0000025c <__udivmodhi4_loop>:
 25c:	aa 1f       	adc	r26, r26
 25e:	bb 1f       	adc	r27, r27
 260:	a6 17       	cp	r26, r22
 262:	b7 07       	cpc	r27, r23
 264:	10 f0       	brcs	.+4      	; 0x26a <__udivmodhi4_ep>
 266:	a6 1b       	sub	r26, r22
 268:	b7 0b       	sbc	r27, r23

0000026a <__udivmodhi4_ep>:
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	5a 95       	dec	r21
 270:	a9 f7       	brne	.-22     	; 0x25c <__udivmodhi4_loop>
 272:	80 95       	com	r24
 274:	90 95       	com	r25
 276:	bc 01       	movw	r22, r24
 278:	cd 01       	movw	r24, r26
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
