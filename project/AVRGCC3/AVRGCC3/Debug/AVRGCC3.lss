
AVRGCC3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000002a2  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000082  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000001ae  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000111  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000274  00000000  00000000  00000d61  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00000fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000107  00000000  00000000  00001058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000088  00000000  00000000  0000115f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  000011e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_1>
   8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 57 00 	call	0xae	; 0xae <main>
  74:	0c 94 15 01 	jmp	0x22a	; 0x22a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <colorRGB>:
{
// 	OCR2 = R; //RED 		
// 	OCR1AL = G; //GREEN
// 	OCR1BL = B; //BLUE

	OCR2 = G; //RED 		
  7c:	63 bd       	out	0x23, r22	; 35
	OCR1AL = R; //GREEN
  7e:	8a bd       	out	0x2a, r24	; 42
	OCR1BL = B; //BLUE
  80:	48 bd       	out	0x28, r20	; 40

}
  82:	08 95       	ret

00000084 <smGradient>:
    }
}

void smGradient()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2; 
  84:	81 b3       	in	r24, 0x11	; 17
  86:	8c 6b       	ori	r24, 0xBC	; 188
  88:	81 bb       	out	0x11, r24	; 17
	TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<CS20);	
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	89 66       	ori	r24, 0x69	; 105
  8e:	85 bd       	out	0x25, r24	; 37
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
  90:	8f b5       	in	r24, 0x2f	; 47
  92:	81 6a       	ori	r24, 0xA1	; 161
  94:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<CS10);
  96:	8e b5       	in	r24, 0x2e	; 46
  98:	89 60       	ori	r24, 0x09	; 9
  9a:	8e bd       	out	0x2e, r24	; 46
	
	while (1)
	{
		colorRGB(88, 0, 77);
  9c:	88 e5       	ldi	r24, 0x58	; 88
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	4d e4       	ldi	r20, 0x4D	; 77
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	0e 94 3e 00 	call	0x7c	; 0x7c <colorRGB>
  ac:	f7 cf       	rjmp	.-18     	; 0x9c <smGradient+0x18>

000000ae <main>:
// 	int flag_R = 1, flag_G = 1, flag_B = 0;
// 	int red = 254, green = 0, blue = 0;	
//	int color1 = 255, color2 = 0, flag_C = 0;

//---------------------
	smGradient();
  ae:	0e 94 42 00 	call	0x84	; 0x84 <smGradient>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0x4>

000000b4 <rainbowColor>:

}

void rainbowColor(int number)
{
	switch (number)
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	91 05       	cpc	r25, r1
  b8:	91 f1       	breq	.+100    	; 0x11e <rainbowColor+0x6a>
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	91 05       	cpc	r25, r1
  be:	4c f4       	brge	.+18     	; 0xd2 <rainbowColor+0x1e>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	91 05       	cpc	r25, r1
  c4:	d1 f0       	breq	.+52     	; 0xfa <rainbowColor+0x46>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	91 05       	cpc	r25, r1
  ca:	04 f5       	brge	.+64     	; 0x10c <rainbowColor+0x58>
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	61 f0       	breq	.+24     	; 0xe8 <rainbowColor+0x34>
  d0:	4a c0       	rjmp	.+148    	; 0x166 <rainbowColor+0xb2>
  d2:	85 30       	cpi	r24, 0x05	; 5
  d4:	91 05       	cpc	r25, r1
  d6:	a9 f1       	breq	.+106    	; 0x142 <rainbowColor+0x8e>
  d8:	85 30       	cpi	r24, 0x05	; 5
  da:	91 05       	cpc	r25, r1
  dc:	4c f1       	brlt	.+82     	; 0x130 <rainbowColor+0x7c>
  de:	86 30       	cpi	r24, 0x06	; 6
  e0:	91 05       	cpc	r25, r1
  e2:	09 f0       	breq	.+2      	; 0xe6 <rainbowColor+0x32>
  e4:	40 c0       	rjmp	.+128    	; 0x166 <rainbowColor+0xb2>
  e6:	36 c0       	rjmp	.+108    	; 0x154 <rainbowColor+0xa0>
	{
		case 0:
			colorRGB(255,0,0);
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	0e 94 3e 00 	call	0x7c	; 0x7c <colorRGB>
			break;
  f8:	08 95       	ret
		case 1:
			colorRGB(255,165,0);
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	65 ea       	ldi	r22, 0xA5	; 165
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	0e 94 3e 00 	call	0x7c	; 0x7c <colorRGB>
			break;
 10a:	08 95       	ret
		case 2:
			colorRGB(255,255,0);
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	6f ef       	ldi	r22, 0xFF	; 255
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	0e 94 3e 00 	call	0x7c	; 0x7c <colorRGB>
			break;
 11c:	08 95       	ret
		case 3:
			colorRGB(0,255,0);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	6f ef       	ldi	r22, 0xFF	; 255
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	0e 94 3e 00 	call	0x7c	; 0x7c <colorRGB>
			break;
 12e:	08 95       	ret
		case 4:
			colorRGB(0,255,255);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	6f ef       	ldi	r22, 0xFF	; 255
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	4f ef       	ldi	r20, 0xFF	; 255
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	0e 94 3e 00 	call	0x7c	; 0x7c <colorRGB>
			break;
 140:	08 95       	ret
		case 5:
			colorRGB(0,0,255);
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	4f ef       	ldi	r20, 0xFF	; 255
 14c:	50 e0       	ldi	r21, 0x00	; 0
 14e:	0e 94 3e 00 	call	0x7c	; 0x7c <colorRGB>
			break;			
 152:	08 95       	ret
		case 6:
			colorRGB(128,0,128);
 154:	80 e8       	ldi	r24, 0x80	; 128
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	40 e8       	ldi	r20, 0x80	; 128
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	0e 94 3e 00 	call	0x7c	; 0x7c <colorRGB>
			break;
 164:	08 95       	ret
		default:
			colorRGB(0,0,0);
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	0e 94 3e 00 	call	0x7c	; 0x7c <colorRGB>
 176:	08 95       	ret

00000178 <buttonRainbow>:
}


void buttonRainbow()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2; 
 178:	81 b3       	in	r24, 0x11	; 17
 17a:	8c 6b       	ori	r24, 0xBC	; 188
 17c:	81 bb       	out	0x11, r24	; 17
	TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<CS20);	
 17e:	85 b5       	in	r24, 0x25	; 37
 180:	89 66       	ori	r24, 0x69	; 105
 182:	85 bd       	out	0x25, r24	; 37
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
 184:	8f b5       	in	r24, 0x2f	; 47
 186:	81 6a       	ori	r24, 0xA1	; 161
 188:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<CS10);
 18a:	8e b5       	in	r24, 0x2e	; 46
 18c:	89 60       	ori	r24, 0x09	; 9
 18e:	8e bd       	out	0x2e, r24	; 46
	
	MCUCR = 0x0F; //0x0F 0x03
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0; //0xC0 0x40
 194:	80 ec       	ldi	r24, 0xC0	; 192
 196:	8b bf       	out	0x3b, r24	; 59
	sei();
 198:	78 94       	sei
		
	while(1)
	{	
		rainbowColor(count);
 19a:	80 91 60 00 	lds	r24, 0x0060
 19e:	90 91 61 00 	lds	r25, 0x0061
 1a2:	0e 94 5a 00 	call	0xb4	; 0xb4 <rainbowColor>
 1a6:	f9 cf       	rjmp	.-14     	; 0x19a <buttonRainbow+0x22>

000001a8 <__vector_1>:
			break;
	}
}

ISR(INT0_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
	count++;
 1b6:	80 91 60 00 	lds	r24, 0x0060
 1ba:	90 91 61 00 	lds	r25, 0x0061
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	90 93 61 00 	sts	0x0061, r25
 1c4:	80 93 60 00 	sts	0x0060, r24
	if (count == 7)
 1c8:	87 30       	cpi	r24, 0x07	; 7
 1ca:	91 05       	cpc	r25, r1
 1cc:	21 f4       	brne	.+8      	; 0x1d6 <__vector_1+0x2e>
	{
		count = 0;
 1ce:	10 92 61 00 	sts	0x0061, r1
 1d2:	10 92 60 00 	sts	0x0060, r1
	}
}
 1d6:	9f 91       	pop	r25
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_2>:

ISR(INT1_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	2f 93       	push	r18
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
	count--;
 1f4:	80 91 60 00 	lds	r24, 0x0060
 1f8:	90 91 61 00 	lds	r25, 0x0061
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	90 93 61 00 	sts	0x0061, r25
 202:	80 93 60 00 	sts	0x0060, r24
	if (count == -1)
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	8f 3f       	cpi	r24, 0xFF	; 255
 20a:	92 07       	cpc	r25, r18
 20c:	31 f4       	brne	.+12     	; 0x21a <__vector_2+0x36>
	{
		count = 6;
 20e:	86 e0       	ldi	r24, 0x06	; 6
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	90 93 61 00 	sts	0x0061, r25
 216:	80 93 60 00 	sts	0x0060, r24
	}
}
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <_exit>:
 22a:	f8 94       	cli

0000022c <__stop_program>:
 22c:	ff cf       	rjmp	.-2      	; 0x22c <__stop_program>
