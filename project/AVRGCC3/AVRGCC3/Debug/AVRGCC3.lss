
AVRGCC3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001d2  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000119  00000000  00000000  00000add  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ac  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012a  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024d  00000000  00000000  00000fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  0000123b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define		BLUE	0x10 
#define		BUT1	0x04
#define		BUT2	0x08

int main(void)
{
  6c:	ef 92       	push	r14
  6e:	ff 92       	push	r15
  70:	0f 93       	push	r16
  72:	1f 93       	push	r17
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2; 
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	8c 6b       	ori	r24, 0xBC	; 188
  7c:	81 bb       	out	0x11, r24	; 17
	TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<CS20);	
  7e:	85 b5       	in	r24, 0x25	; 37
  80:	89 66       	ori	r24, 0x69	; 105
  82:	85 bd       	out	0x25, r24	; 37
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
  84:	8f b5       	in	r24, 0x2f	; 47
  86:	81 6a       	ori	r24, 0xA1	; 161
  88:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<CS10);
  8a:	8e b5       	in	r24, 0x2e	; 46
  8c:	89 60       	ori	r24, 0x09	; 9
  8e:	8e bd       	out	0x2e, r24	; 46
	
	int flag_R = 1, flag_G = 1, flag_B = 0;
	int red = 254, green = 0, blue = 0;
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	2e ef       	ldi	r18, 0xFE	; 254
  9a:	30 e0       	ldi	r19, 0x00	; 0
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2; 
	TCCR2 |= (1<<WGM21) | (1<<WGM20) | (1<<COM21) | (1<<CS20);	
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
	TCCR1B |= (1<<WGM12) | (1<<CS10);
	
	int flag_R = 1, flag_G = 1, flag_B = 0;
  9c:	a0 e0       	ldi	r26, 0x00	; 0
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	e1 e0       	ldi	r30, 0x01	; 1
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	70 e0       	ldi	r23, 0x00	; 0
			red--;
			green++;
			if (red == 0)
			{
				flag_R = 0;
				flag_B = 1;
  a8:	ee 24       	eor	r14, r14
  aa:	ff 24       	eor	r15, r15
  ac:	e3 94       	inc	r14
		{
			red--;
			green++;
			if (red == 0)
			{
				flag_R = 0;
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	10 e0       	ldi	r17, 0x00	; 0
  b2:	08 c0       	rjmp	.+16     	; 0xc4 <main+0x58>
				flag_B = 1;
  b4:	d7 01       	movw	r26, r14
		{
			red--;
			green++;
			if (red == 0)
			{
				flag_R = 0;
  b6:	b8 01       	movw	r22, r16
  b8:	05 c0       	rjmp	.+10     	; 0xc4 <main+0x58>
		{
			green--;
			blue++;
			if (green == 0)
			{
				flag_G = 0;
  ba:	f8 01       	movw	r30, r16
				flag_R = 1;
  bc:	b7 01       	movw	r22, r14
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x58>
		{			
			blue--;
			red++;
			if (blue == 0)
			{
				flag_B = 0;
  c0:	d8 01       	movw	r26, r16
				flag_G = 1;
  c2:	f7 01       	movw	r30, r14
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	c1 ee       	ldi	r28, 0xE1	; 225
  c6:	d4 e0       	ldi	r29, 0x04	; 4
  c8:	21 97       	sbiw	r28, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x5c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
	int color1 = 255, color2 = 0, flag_C = 0;
	
    while(1)
    {
		_delay_ms(5);
		OCR2 = red; //RED 		
  d0:	23 bd       	out	0x23, r18	; 35
		OCR1AL = green; //GREEN
  d2:	8a bd       	out	0x2a, r24	; 42
		OCR1BL = blue; //BLUE
  d4:	48 bd       	out	0x28, r20	; 40
// 			{
// 				flag_B = 0;				
// 			}
// 		}
		
		if (flag_R && flag_G)
  d6:	61 15       	cp	r22, r1
  d8:	71 05       	cpc	r23, r1
  da:	49 f0       	breq	.+18     	; 0xee <main+0x82>
  dc:	30 97       	sbiw	r30, 0x00	; 0
  de:	89 f0       	breq	.+34     	; 0x102 <main+0x96>
		{
			red--;
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	30 40       	sbci	r19, 0x00	; 0
			green++;
  e4:	01 96       	adiw	r24, 0x01	; 1
			if (red == 0)
  e6:	21 15       	cp	r18, r1
  e8:	31 05       	cpc	r19, r1
  ea:	21 f3       	breq	.-56     	; 0xb4 <main+0x48>
  ec:	eb cf       	rjmp	.-42     	; 0xc4 <main+0x58>
			{
				flag_R = 0;
				flag_B = 1;
			}
		}
		else if (flag_G && flag_B)
  ee:	30 97       	sbiw	r30, 0x00	; 0
  f0:	41 f0       	breq	.+16     	; 0x102 <main+0x96>
  f2:	10 97       	sbiw	r26, 0x00	; 0
  f4:	39 f3       	breq	.-50     	; 0xc4 <main+0x58>
		{
			green--;
  f6:	01 97       	sbiw	r24, 0x01	; 1
			blue++;
  f8:	4f 5f       	subi	r20, 0xFF	; 255
  fa:	5f 4f       	sbci	r21, 0xFF	; 255
			if (green == 0)
  fc:	00 97       	sbiw	r24, 0x00	; 0
  fe:	e9 f2       	breq	.-70     	; 0xba <main+0x4e>
 100:	e1 cf       	rjmp	.-62     	; 0xc4 <main+0x58>
			{
				flag_G = 0;
				flag_R = 1;
			}
		}
		else if (flag_B && flag_R)
 102:	10 97       	sbiw	r26, 0x00	; 0
 104:	f9 f2       	breq	.-66     	; 0xc4 <main+0x58>
 106:	61 15       	cp	r22, r1
 108:	71 05       	cpc	r23, r1
 10a:	e1 f2       	breq	.-72     	; 0xc4 <main+0x58>
		{			
			blue--;
 10c:	41 50       	subi	r20, 0x01	; 1
 10e:	50 40       	sbci	r21, 0x00	; 0
			red++;
 110:	2f 5f       	subi	r18, 0xFF	; 255
 112:	3f 4f       	sbci	r19, 0xFF	; 255
			if (blue == 0)
 114:	41 15       	cp	r20, r1
 116:	51 05       	cpc	r21, r1
 118:	99 f2       	breq	.-90     	; 0xc0 <main+0x54>
 11a:	d4 cf       	rjmp	.-88     	; 0xc4 <main+0x58>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
