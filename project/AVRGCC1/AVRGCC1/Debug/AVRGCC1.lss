
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000005c  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000267  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015b  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030a  00000000  00000000  00000d26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000117  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <task5>:
	sei();	
}

void task5()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8c 6b       	ori	r24, 0xBC	; 188
  70:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		if (PIND & BUT1)
		{
			PORTD = BLUE;
  72:	80 e1       	ldi	r24, 0x10	; 16
		{
			PORTD = GREEN;		
		}
		else if (PIND & (BUT1 | BUT2) == 0x0C)
		{
			PORTD = RED;
  74:	20 e8       	ldi	r18, 0x80	; 128
		{
			PORTD = BLUE;
		}
		else if (PIND & BUT2)
		{
			PORTD = GREEN;		
  76:	90 e2       	ldi	r25, 0x20	; 32
void task5()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
	while(1)
	{
		if (PIND & BUT1)
  78:	82 9b       	sbis	0x10, 2	; 16
  7a:	02 c0       	rjmp	.+4      	; 0x80 <task5+0x14>
		{
			PORTD = BLUE;
  7c:	82 bb       	out	0x12, r24	; 18
  7e:	fc cf       	rjmp	.-8      	; 0x78 <task5+0xc>
		}
		else if (PIND & BUT2)
  80:	83 9b       	sbis	0x10, 3	; 16
  82:	02 c0       	rjmp	.+4      	; 0x88 <task5+0x1c>
		{
			PORTD = GREEN;		
  84:	92 bb       	out	0x12, r25	; 18
  86:	f8 cf       	rjmp	.-16     	; 0x78 <task5+0xc>
		}
		else if (PIND & (BUT1 | BUT2) == 0x0C)
  88:	80 9b       	sbis	0x10, 0	; 16
  8a:	02 c0       	rjmp	.+4      	; 0x90 <task5+0x24>
		{
			PORTD = RED;
  8c:	22 bb       	out	0x12, r18	; 18
  8e:	f4 cf       	rjmp	.-24     	; 0x78 <task5+0xc>
		}
		else
		{
			PORTD = 0x0;
  90:	12 ba       	out	0x12, r1	; 18
  92:	f2 cf       	rjmp	.-28     	; 0x78 <task5+0xc>

00000094 <__vector_1>:
void task2();
void task3();
void task4();

ISR(INT0_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	PORTD ^= BLUE;	
  a2:	92 b3       	in	r25, 0x12	; 18
  a4:	80 e1       	ldi	r24, 0x10	; 16
  a6:	89 27       	eor	r24, r25
  a8:	82 bb       	out	0x12, r24	; 18
}
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <main>:
	
// 	task1();
// 	task2();
// 	task3();
// 	task4();
 	task5();
  b8:	0e 94 36 00 	call	0x6c	; 0x6c <task5>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x4>

000000be <task1>:
	}
}

void task1()
{
	DDRD |= RED;
  be:	8f 9a       	sbi	0x11, 7	; 17
	while(1)
	{
		PORTD = RED;
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <task1+0x4>

000000c6 <task2>:
	}
}

void task2()
{
	DDRD |= RED | GREEN | BLUE;
  c6:	81 b3       	in	r24, 0x11	; 17
  c8:	80 6b       	ori	r24, 0xB0	; 176
  ca:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		PORTD = RED;
  cc:	20 e8       	ldi	r18, 0x80	; 128
		_delay_ms(1000);
		PORTD = GREEN;		
  ce:	90 e2       	ldi	r25, 0x20	; 32
		_delay_ms(1000);	
		PORTD = BLUE;		
  d0:	80 e1       	ldi	r24, 0x10	; 16
void task2()
{
	DDRD |= RED | GREEN | BLUE;
	while(1)
	{
		PORTD = RED;
  d2:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	4f e3       	ldi	r20, 0x3F	; 63
  d6:	5d e0       	ldi	r21, 0x0D	; 13
  d8:	63 e0       	ldi	r22, 0x03	; 3
  da:	41 50       	subi	r20, 0x01	; 1
  dc:	50 40       	sbci	r21, 0x00	; 0
  de:	60 40       	sbci	r22, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <task2+0x14>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <task2+0x1e>
  e4:	00 00       	nop
		_delay_ms(1000);
		PORTD = GREEN;		
  e6:	92 bb       	out	0x12, r25	; 18
  e8:	4f e3       	ldi	r20, 0x3F	; 63
  ea:	5d e0       	ldi	r21, 0x0D	; 13
  ec:	63 e0       	ldi	r22, 0x03	; 3
  ee:	41 50       	subi	r20, 0x01	; 1
  f0:	50 40       	sbci	r21, 0x00	; 0
  f2:	60 40       	sbci	r22, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <task2+0x28>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <task2+0x32>
  f8:	00 00       	nop
		_delay_ms(1000);	
		PORTD = BLUE;		
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	4f e3       	ldi	r20, 0x3F	; 63
  fe:	5d e0       	ldi	r21, 0x0D	; 13
 100:	63 e0       	ldi	r22, 0x03	; 3
 102:	41 50       	subi	r20, 0x01	; 1
 104:	50 40       	sbci	r21, 0x00	; 0
 106:	60 40       	sbci	r22, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <task2+0x3c>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <task2+0x46>
 10c:	00 00       	nop
 10e:	e1 cf       	rjmp	.-62     	; 0xd2 <task2+0xc>

00000110 <task3>:
	}		
}

void task3()
{
	DDRD |= RED | GREEN | BLUE | BUT1;
 110:	81 b3       	in	r24, 0x11	; 17
 112:	84 6b       	ori	r24, 0xB4	; 180
 114:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		if (PIND & BUT1)
		{
			PORTD = BLUE;
 116:	80 e1       	ldi	r24, 0x10	; 16
void task3()
{
	DDRD |= RED | GREEN | BLUE | BUT1;
	while(1)
	{
		if (PIND & BUT1)
 118:	82 9b       	sbis	0x10, 2	; 16
 11a:	02 c0       	rjmp	.+4      	; 0x120 <task3+0x10>
		{
			PORTD = BLUE;
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	fc cf       	rjmp	.-8      	; 0x118 <task3+0x8>
		}
		else
		{
			PORTD = 0x0;		
 120:	12 ba       	out	0x12, r1	; 18
 122:	fa cf       	rjmp	.-12     	; 0x118 <task3+0x8>

00000124 <task4>:
// 	}		
// }

void task4()
{
	DDRD = 0xB0;
 124:	80 eb       	ldi	r24, 0xB0	; 176
 126:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x03;
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	85 bf       	out	0x35, r24	; 53
	GICR = 0x40;
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	8b bf       	out	0x3b, r24	; 59
	sei();	
 130:	78 94       	sei
}
 132:	08 95       	ret

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
