
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  0000029e  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000092  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003f2  00000000  00000000  00000aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000166  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000450  00000000  00000000  00001006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001458  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000146  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000090  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  000016de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
  74:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:



// BUT1 INT
ISR(INT0_vect)
{	
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
// 	{
// 		PORTD ^= BLUE; 		
// 	}		
// 	flag1 = 0;
	
	if ((PIND & BUT1) && (PIND & BUT2))
  8a:	82 9b       	sbis	0x10, 2	; 16
  8c:	07 c0       	rjmp	.+14     	; 0x9c <__vector_1+0x20>
  8e:	83 9b       	sbis	0x10, 3	; 16
  90:	05 c0       	rjmp	.+10     	; 0x9c <__vector_1+0x20>
	{
//		PORTD ^= 0x20;
		PORTD ^= GREEN;
  92:	92 b3       	in	r25, 0x12	; 18
  94:	80 e2       	ldi	r24, 0x20	; 32
  96:	89 27       	eor	r24, r25
  98:	82 bb       	out	0x12, r24	; 18
  9a:	04 c0       	rjmp	.+8      	; 0xa4 <__vector_1+0x28>
	}
	else 
	{
		PORTD ^= BLUE; 		
  9c:	92 b3       	in	r25, 0x12	; 18
  9e:	80 e1       	ldi	r24, 0x10	; 16
  a0:	89 27       	eor	r24, r25
  a2:	82 bb       	out	0x12, r24	; 18
	}
//	PORTD ^= BLUE;	
}
  a4:	9f 91       	pop	r25
  a6:	8f 91       	pop	r24
  a8:	0f 90       	pop	r0
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	0f 90       	pop	r0
  ae:	1f 90       	pop	r1
  b0:	18 95       	reti

000000b2 <__vector_2>:

// BUT2 INT
ISR(INT1_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
	if ((PIND & BUT1) && (PIND & BUT2))
  be:	82 9b       	sbis	0x10, 2	; 16
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__vector_2+0x14>
  c2:	83 99       	sbic	0x10, 3	; 16
  c4:	03 c0       	rjmp	.+6      	; 0xcc <__vector_2+0x1a>
	{
		
	}
	else 
	{
		PORTD ^= RED; 		
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	80 58       	subi	r24, 0x80	; 128
  ca:	82 bb       	out	0x12, r24	; 18
	}
//	PORTD ^= RED;
}
  cc:	8f 91       	pop	r24
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <task1>:



void task1()
{
	DDRD |= GREEN;
  d8:	8d 9a       	sbi	0x11, 5	; 17
	while(1)
	{
		_delay_ms(1000);
		PORTD = GREEN;
  da:	80 e2       	ldi	r24, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f e3       	ldi	r18, 0x3F	; 63
  de:	3d e0       	ldi	r19, 0x0D	; 13
  e0:	43 e0       	ldi	r20, 0x03	; 3
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	40 40       	sbci	r20, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <task1+0xa>
  ea:	00 c0       	rjmp	.+0      	; 0xec <task1+0x14>
  ec:	00 00       	nop
  ee:	82 bb       	out	0x12, r24	; 18
  f0:	2f e3       	ldi	r18, 0x3F	; 63
  f2:	3d e0       	ldi	r19, 0x0D	; 13
  f4:	43 e0       	ldi	r20, 0x03	; 3
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	30 40       	sbci	r19, 0x00	; 0
  fa:	40 40       	sbci	r20, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <task1+0x1e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <task1+0x28>
 100:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0x00;
 102:	12 ba       	out	0x12, r1	; 18
 104:	eb cf       	rjmp	.-42     	; 0xdc <task1+0x4>

00000106 <task2>:
	}
}

void task2()
{
	DDRD |= RED | GREEN | BLUE;
 106:	81 b3       	in	r24, 0x11	; 17
 108:	80 6b       	ori	r24, 0xB0	; 176
 10a:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		PORTD = RED;
 10c:	20 e8       	ldi	r18, 0x80	; 128
		_delay_ms(1000);
		PORTD = GREEN;		
 10e:	90 e2       	ldi	r25, 0x20	; 32
		_delay_ms(1000);	
		PORTD = BLUE;		
 110:	80 e1       	ldi	r24, 0x10	; 16
void task2()
{
	DDRD |= RED | GREEN | BLUE;
	while(1)
	{
		PORTD = RED;
 112:	22 bb       	out	0x12, r18	; 18
 114:	4f e3       	ldi	r20, 0x3F	; 63
 116:	5d e0       	ldi	r21, 0x0D	; 13
 118:	63 e0       	ldi	r22, 0x03	; 3
 11a:	41 50       	subi	r20, 0x01	; 1
 11c:	50 40       	sbci	r21, 0x00	; 0
 11e:	60 40       	sbci	r22, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <task2+0x14>
 122:	00 c0       	rjmp	.+0      	; 0x124 <task2+0x1e>
 124:	00 00       	nop
		_delay_ms(1000);
		PORTD = GREEN;		
 126:	92 bb       	out	0x12, r25	; 18
 128:	4f e3       	ldi	r20, 0x3F	; 63
 12a:	5d e0       	ldi	r21, 0x0D	; 13
 12c:	63 e0       	ldi	r22, 0x03	; 3
 12e:	41 50       	subi	r20, 0x01	; 1
 130:	50 40       	sbci	r21, 0x00	; 0
 132:	60 40       	sbci	r22, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <task2+0x28>
 136:	00 c0       	rjmp	.+0      	; 0x138 <task2+0x32>
 138:	00 00       	nop
		_delay_ms(1000);	
		PORTD = BLUE;		
 13a:	82 bb       	out	0x12, r24	; 18
 13c:	4f e3       	ldi	r20, 0x3F	; 63
 13e:	5d e0       	ldi	r21, 0x0D	; 13
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	41 50       	subi	r20, 0x01	; 1
 144:	50 40       	sbci	r21, 0x00	; 0
 146:	60 40       	sbci	r22, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <task2+0x3c>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <task2+0x46>
 14c:	00 00       	nop
 14e:	e1 cf       	rjmp	.-62     	; 0x112 <task2+0xc>

00000150 <task3>:
	}		
}

void task3()
{
	DDRD |= RED | GREEN | BLUE | BUT1;
 150:	81 b3       	in	r24, 0x11	; 17
 152:	84 6b       	ori	r24, 0xB4	; 180
 154:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~BUT1;
 156:	8a 98       	cbi	0x11, 2	; 17

	while(1)
	{
		if (PIND & BUT1)
		{
			PORTD = BLUE;
 158:	80 e1       	ldi	r24, 0x10	; 16
	DDRD |= RED | GREEN | BLUE | BUT1;
	DDRD &= ~BUT1;

	while(1)
	{
		if (PIND & BUT1)
 15a:	82 9b       	sbis	0x10, 2	; 16
 15c:	02 c0       	rjmp	.+4      	; 0x162 <task3+0x12>
		{
			PORTD = BLUE;
 15e:	82 bb       	out	0x12, r24	; 18
 160:	fc cf       	rjmp	.-8      	; 0x15a <task3+0xa>
		}
		else
		{
			PORTD = 0x0;		
 162:	12 ba       	out	0x12, r1	; 18
 164:	fa cf       	rjmp	.-12     	; 0x15a <task3+0xa>

00000166 <task4>:
// 	}		
// }

void task4()
{
	DDRD = 0xB0;
 166:	80 eb       	ldi	r24, 0xB0	; 176
 168:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x03; //0x0F 0x03
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	85 bf       	out	0x35, r24	; 53
	GICR = 0x40; //0xC0 0x40
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	8b bf       	out	0x3b, r24	; 59
	sei();	
 172:	78 94       	sei
}
 174:	08 95       	ret

00000176 <task5>:

void task5()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
 176:	81 b3       	in	r24, 0x11	; 17
 178:	8c 6b       	ori	r24, 0xBC	; 188
 17a:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		if (PIND & BUT1)
		{
			PORTD = BLUE;
 17c:	80 e1       	ldi	r24, 0x10	; 16
		{
			PORTD = GREEN;
		}
		else if ((PIND & BUT1) && (PIND & BUT2))
		{
			PORTD = RED;
 17e:	20 e8       	ldi	r18, 0x80	; 128
		{
			PORTD = BLUE;
		}
		else if (PIND & BUT2)
		{
			PORTD = GREEN;
 180:	90 e2       	ldi	r25, 0x20	; 32
void task5()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
	while(1)
	{
		if (PIND & BUT1)
 182:	82 9b       	sbis	0x10, 2	; 16
 184:	02 c0       	rjmp	.+4      	; 0x18a <task5+0x14>
		{
			PORTD = BLUE;
 186:	82 bb       	out	0x12, r24	; 18
 188:	fc cf       	rjmp	.-8      	; 0x182 <task5+0xc>
		}
		else if (PIND & BUT2)
 18a:	83 9b       	sbis	0x10, 3	; 16
 18c:	02 c0       	rjmp	.+4      	; 0x192 <task5+0x1c>
		{
			PORTD = GREEN;
 18e:	92 bb       	out	0x12, r25	; 18
 190:	f8 cf       	rjmp	.-16     	; 0x182 <task5+0xc>
		}
		else if ((PIND & BUT1) && (PIND & BUT2))
 192:	82 9b       	sbis	0x10, 2	; 16
 194:	04 c0       	rjmp	.+8      	; 0x19e <task5+0x28>
 196:	83 9b       	sbis	0x10, 3	; 16
 198:	02 c0       	rjmp	.+4      	; 0x19e <task5+0x28>
		{
			PORTD = RED;
 19a:	22 bb       	out	0x12, r18	; 18
 19c:	f2 cf       	rjmp	.-28     	; 0x182 <task5+0xc>
		}
		else
		{
			PORTD = 0x0;
 19e:	12 ba       	out	0x12, r1	; 18
 1a0:	f0 cf       	rjmp	.-32     	; 0x182 <task5+0xc>

000001a2 <task6>:
	}	
}

void task6()
{
	DDRD = 0xB0;
 1a2:	80 eb       	ldi	r24, 0xB0	; 176
 1a4:	81 bb       	out	0x11, r24	; 17
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
 1a6:	81 b3       	in	r24, 0x11	; 17
 1a8:	8c 6b       	ori	r24, 0xBC	; 188
 1aa:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F; //0x0F 0x03
 1ac:	8f e0       	ldi	r24, 0x0F	; 15
 1ae:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0; //0xC0 0x40
 1b0:	80 ec       	ldi	r24, 0xC0	; 192
 1b2:	8b bf       	out	0x3b, r24	; 59
	sei();	
 1b4:	78 94       	sei
}
 1b6:	08 95       	ret

000001b8 <main>:
// 	task1();
// 	task2();
// 	task3();
// 	task4();
// 	task5();
	task6();
 1b8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <task6>
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <main+0x4>

000001be <test>:
	sei();	
}

void test()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
 1be:	81 b3       	in	r24, 0x11	; 17
 1c0:	8c 6b       	ori	r24, 0xBC	; 188
 1c2:	81 bb       	out	0x11, r24	; 17
				PORTD ^= BLUE;
			}		
			else if ((PIND & BUT2) && (PIND & ~BUT1))
			{
				_delay_ms(70);
				PORTD ^= GREEN;
 1c4:	20 e2       	ldi	r18, 0x20	; 32
		if (PIND != 0x0)
		{	
			if ((PIND & BUT1) && (PIND & ~BUT2))
			{
				_delay_ms(70);
				PORTD ^= BLUE;
 1c6:	90 e1       	ldi	r25, 0x10	; 16
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
//	PIND |= BUT1 | BUT2;
	while(1)
	{
		if (PIND != 0x0)
 1c8:	80 b3       	in	r24, 0x10	; 16
 1ca:	88 23       	and	r24, r24
 1cc:	e9 f3       	breq	.-6      	; 0x1c8 <test+0xa>
		{	
			if ((PIND & BUT1) && (PIND & ~BUT2))
 1ce:	82 9b       	sbis	0x10, 2	; 16
 1d0:	0d c0       	rjmp	.+26     	; 0x1ec <test+0x2e>
 1d2:	80 b3       	in	r24, 0x10	; 16
 1d4:	87 7f       	andi	r24, 0xF7	; 247
 1d6:	51 f0       	breq	.+20     	; 0x1ec <test+0x2e>
 1d8:	eb e5       	ldi	r30, 0x5B	; 91
 1da:	f4 e4       	ldi	r31, 0x44	; 68
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <test+0x1e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <test+0x24>
 1e2:	00 00       	nop
			{
				_delay_ms(70);
				PORTD ^= BLUE;
 1e4:	82 b3       	in	r24, 0x12	; 18
 1e6:	89 27       	eor	r24, r25
 1e8:	82 bb       	out	0x12, r24	; 18
 1ea:	ee cf       	rjmp	.-36     	; 0x1c8 <test+0xa>
			}		
			else if ((PIND & BUT2) && (PIND & ~BUT1))
 1ec:	83 9b       	sbis	0x10, 3	; 16
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <test+0x4c>
 1f0:	80 b3       	in	r24, 0x10	; 16
 1f2:	8b 7f       	andi	r24, 0xFB	; 251
 1f4:	51 f0       	breq	.+20     	; 0x20a <test+0x4c>
 1f6:	eb e5       	ldi	r30, 0x5B	; 91
 1f8:	f4 e4       	ldi	r31, 0x44	; 68
 1fa:	31 97       	sbiw	r30, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <test+0x3c>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <test+0x42>
 200:	00 00       	nop
			{
				_delay_ms(70);
				PORTD ^= GREEN;
 202:	82 b3       	in	r24, 0x12	; 18
 204:	82 27       	eor	r24, r18
 206:	82 bb       	out	0x12, r24	; 18
 208:	df cf       	rjmp	.-66     	; 0x1c8 <test+0xa>
			}						
			else if ((PIND & BUT1) && (PIND & BUT2))
 20a:	82 9b       	sbis	0x10, 2	; 16
 20c:	dd cf       	rjmp	.-70     	; 0x1c8 <test+0xa>
 20e:	83 9b       	sbis	0x10, 3	; 16
 210:	db cf       	rjmp	.-74     	; 0x1c8 <test+0xa>
 212:	eb e5       	ldi	r30, 0x5B	; 91
 214:	f4 e4       	ldi	r31, 0x44	; 68
 216:	31 97       	sbiw	r30, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <test+0x58>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <test+0x5e>
 21c:	00 00       	nop
			{
				_delay_ms(70);
				PORTD ^= RED;
 21e:	82 b3       	in	r24, 0x12	; 18
 220:	80 58       	subi	r24, 0x80	; 128
 222:	82 bb       	out	0x12, r24	; 18
 224:	d1 cf       	rjmp	.-94     	; 0x1c8 <test+0xa>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
