
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000021e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  00000292  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000092  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000034f  00000000  00000000  00000aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000165  00000000  00000000  00000df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000413  00000000  00000000  00000f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  0000136c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000013d  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  00001559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 0a 01 	call	0x214	; 0x214 <main>
  74:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
int flag1 = 0;
int flag2 = 0;

// BUT1 INT
ISR(INT0_vect)
{	
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	flag1 = 1;	
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	90 93 61 00 	sts	0x0061, r25
  92:	80 93 60 00 	sts	0x0060, r24
	if (flag1 == flag2)
  96:	80 91 62 00 	lds	r24, 0x0062
  9a:	90 91 63 00 	lds	r25, 0x0063
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 05       	cpc	r25, r1
  a2:	29 f4       	brne	.+10     	; 0xae <__vector_1+0x32>
	{
		PORTD ^= GREEN;	
  a4:	92 b3       	in	r25, 0x12	; 18
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	89 27       	eor	r24, r25
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	04 c0       	rjmp	.+8      	; 0xb6 <__vector_1+0x3a>
//		flag2 = 0; 		
	}
	else 
	{
		PORTD ^= BLUE; 		
  ae:	92 b3       	in	r25, 0x12	; 18
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	89 27       	eor	r24, r25
  b4:	82 bb       	out	0x12, r24	; 18
	}		
	flag1 = 0;	
  b6:	10 92 61 00 	sts	0x0061, r1
  ba:	10 92 60 00 	sts	0x0060, r1
		
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <__vector_2>:

// BUT2 INT
ISR(INT1_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	flag2 = 1;	
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 63 00 	sts	0x0063, r25
  e2:	80 93 62 00 	sts	0x0062, r24
// 	else 
// 	{
// 		PORTD ^= RED;
// 		flag2 = 0;		
// 	}	
	PORTD ^= RED;	
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	80 58       	subi	r24, 0x80	; 128
  ea:	82 bb       	out	0x12, r24	; 18
	flag2 = 0;
  ec:	10 92 63 00 	sts	0x0063, r1
  f0:	10 92 62 00 	sts	0x0062, r1
	
}
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <task1>:
	}
}

void task1()
{
	DDRD |= GREEN;
 102:	8d 9a       	sbi	0x11, 5	; 17
	while(1)
	{
		_delay_ms(1000);
		PORTD = GREEN;
 104:	80 e2       	ldi	r24, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f e3       	ldi	r18, 0x3F	; 63
 108:	3d e0       	ldi	r19, 0x0D	; 13
 10a:	43 e0       	ldi	r20, 0x03	; 3
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	40 40       	sbci	r20, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <task1+0xa>
 114:	00 c0       	rjmp	.+0      	; 0x116 <task1+0x14>
 116:	00 00       	nop
 118:	82 bb       	out	0x12, r24	; 18
 11a:	2f e3       	ldi	r18, 0x3F	; 63
 11c:	3d e0       	ldi	r19, 0x0D	; 13
 11e:	43 e0       	ldi	r20, 0x03	; 3
 120:	21 50       	subi	r18, 0x01	; 1
 122:	30 40       	sbci	r19, 0x00	; 0
 124:	40 40       	sbci	r20, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <task1+0x1e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <task1+0x28>
 12a:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0x00;
 12c:	12 ba       	out	0x12, r1	; 18
 12e:	eb cf       	rjmp	.-42     	; 0x106 <task1+0x4>

00000130 <task2>:
	}
}

void task2()
{
	DDRD |= RED | GREEN | BLUE;
 130:	81 b3       	in	r24, 0x11	; 17
 132:	80 6b       	ori	r24, 0xB0	; 176
 134:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		PORTD = RED;
 136:	20 e8       	ldi	r18, 0x80	; 128
		_delay_ms(1000);
		PORTD = GREEN;		
 138:	90 e2       	ldi	r25, 0x20	; 32
		_delay_ms(1000);	
		PORTD = BLUE;		
 13a:	80 e1       	ldi	r24, 0x10	; 16
void task2()
{
	DDRD |= RED | GREEN | BLUE;
	while(1)
	{
		PORTD = RED;
 13c:	22 bb       	out	0x12, r18	; 18
 13e:	4f e3       	ldi	r20, 0x3F	; 63
 140:	5d e0       	ldi	r21, 0x0D	; 13
 142:	63 e0       	ldi	r22, 0x03	; 3
 144:	41 50       	subi	r20, 0x01	; 1
 146:	50 40       	sbci	r21, 0x00	; 0
 148:	60 40       	sbci	r22, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <task2+0x14>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <task2+0x1e>
 14e:	00 00       	nop
		_delay_ms(1000);
		PORTD = GREEN;		
 150:	92 bb       	out	0x12, r25	; 18
 152:	4f e3       	ldi	r20, 0x3F	; 63
 154:	5d e0       	ldi	r21, 0x0D	; 13
 156:	63 e0       	ldi	r22, 0x03	; 3
 158:	41 50       	subi	r20, 0x01	; 1
 15a:	50 40       	sbci	r21, 0x00	; 0
 15c:	60 40       	sbci	r22, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <task2+0x28>
 160:	00 c0       	rjmp	.+0      	; 0x162 <task2+0x32>
 162:	00 00       	nop
		_delay_ms(1000);	
		PORTD = BLUE;		
 164:	82 bb       	out	0x12, r24	; 18
 166:	4f e3       	ldi	r20, 0x3F	; 63
 168:	5d e0       	ldi	r21, 0x0D	; 13
 16a:	63 e0       	ldi	r22, 0x03	; 3
 16c:	41 50       	subi	r20, 0x01	; 1
 16e:	50 40       	sbci	r21, 0x00	; 0
 170:	60 40       	sbci	r22, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <task2+0x3c>
 174:	00 c0       	rjmp	.+0      	; 0x176 <task2+0x46>
 176:	00 00       	nop
 178:	e1 cf       	rjmp	.-62     	; 0x13c <task2+0xc>

0000017a <task3>:
	}		
}

void task3()
{
	DDRD |= RED | GREEN | BLUE | BUT1;
 17a:	81 b3       	in	r24, 0x11	; 17
 17c:	84 6b       	ori	r24, 0xB4	; 180
 17e:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~BUT1;
 180:	8a 98       	cbi	0x11, 2	; 17

	while(1)
	{
		if (PIND & BUT1)
		{
			PORTD = BLUE;
 182:	80 e1       	ldi	r24, 0x10	; 16
	DDRD |= RED | GREEN | BLUE | BUT1;
	DDRD &= ~BUT1;

	while(1)
	{
		if (PIND & BUT1)
 184:	82 9b       	sbis	0x10, 2	; 16
 186:	02 c0       	rjmp	.+4      	; 0x18c <task3+0x12>
		{
			PORTD = BLUE;
 188:	82 bb       	out	0x12, r24	; 18
 18a:	fc cf       	rjmp	.-8      	; 0x184 <task3+0xa>
		}
		else
		{
			PORTD = 0x0;		
 18c:	12 ba       	out	0x12, r1	; 18
 18e:	fa cf       	rjmp	.-12     	; 0x184 <task3+0xa>

00000190 <task4>:
// 	}		
// }

void task4()
{
	DDRD = 0xB0;
 190:	80 eb       	ldi	r24, 0xB0	; 176
 192:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x03; //0x0F 0x03
 194:	83 e0       	ldi	r24, 0x03	; 3
 196:	85 bf       	out	0x35, r24	; 53
	GICR = 0x40; //0xC0 0x40
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	8b bf       	out	0x3b, r24	; 59
	sei();	
 19c:	78 94       	sei
}
 19e:	08 95       	ret

000001a0 <task5>:

void task5()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
 1a0:	81 b3       	in	r24, 0x11	; 17
 1a2:	8c 6b       	ori	r24, 0xBC	; 188
 1a4:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		if (PIND & BUT1)
		{
			PORTD = BLUE;
 1a6:	80 e1       	ldi	r24, 0x10	; 16
		{
			PORTD = GREEN;
		}
		else if ((PIND & BUT1) && (PIND & BUT2))
		{
			PORTD = RED;
 1a8:	20 e8       	ldi	r18, 0x80	; 128
		{
			PORTD = BLUE;
		}
		else if (PIND & BUT2)
		{
			PORTD = GREEN;
 1aa:	90 e2       	ldi	r25, 0x20	; 32
void task5()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
	while(1)
	{
		if (PIND & BUT1)
 1ac:	82 9b       	sbis	0x10, 2	; 16
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <task5+0x14>
		{
			PORTD = BLUE;
 1b0:	82 bb       	out	0x12, r24	; 18
 1b2:	fc cf       	rjmp	.-8      	; 0x1ac <task5+0xc>
		}
		else if (PIND & BUT2)
 1b4:	83 9b       	sbis	0x10, 3	; 16
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <task5+0x1c>
		{
			PORTD = GREEN;
 1b8:	92 bb       	out	0x12, r25	; 18
 1ba:	f8 cf       	rjmp	.-16     	; 0x1ac <task5+0xc>
		}
		else if ((PIND & BUT1) && (PIND & BUT2))
 1bc:	82 9b       	sbis	0x10, 2	; 16
 1be:	04 c0       	rjmp	.+8      	; 0x1c8 <task5+0x28>
 1c0:	83 9b       	sbis	0x10, 3	; 16
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <task5+0x28>
		{
			PORTD = RED;
 1c4:	22 bb       	out	0x12, r18	; 18
 1c6:	f2 cf       	rjmp	.-28     	; 0x1ac <task5+0xc>
		}
		else
		{
			PORTD = 0x0;
 1c8:	12 ba       	out	0x12, r1	; 18
 1ca:	f0 cf       	rjmp	.-32     	; 0x1ac <task5+0xc>

000001cc <task6>:
	}	
}

void task6()
{
	DDRD = 0xB0;
 1cc:	80 eb       	ldi	r24, 0xB0	; 176
 1ce:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F; //0x0F 0x03
 1d0:	8f e0       	ldi	r24, 0x0F	; 15
 1d2:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0; //0xC0 0x40
 1d4:	80 ec       	ldi	r24, 0xC0	; 192
 1d6:	8b bf       	out	0x3b, r24	; 59
	sei();	
 1d8:	78 94       	sei
}
 1da:	08 95       	ret

000001dc <test>:

void test()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
 1dc:	81 b3       	in	r24, 0x11	; 17
 1de:	8c 6b       	ori	r24, 0xBC	; 188
 1e0:	81 bb       	out	0x11, r24	; 17
	PIND |= BUT1 | BUT2;
 1e2:	80 b3       	in	r24, 0x10	; 16
 1e4:	8c 60       	ori	r24, 0x0C	; 12
 1e6:	80 bb       	out	0x10, r24	; 16
	while(1)
	{		
		if (PIND & BUT1)
		{
			PORTD ^= BLUE;
 1e8:	90 e1       	ldi	r25, 0x10	; 16
		}		
		else if (PIND & BUT2)
		{
			PORTD ^= GREEN;
 1ea:	20 e2       	ldi	r18, 0x20	; 32
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
	PIND |= BUT1 | BUT2;
	while(1)
	{		
		if (PIND & BUT1)
 1ec:	82 9b       	sbis	0x10, 2	; 16
 1ee:	04 c0       	rjmp	.+8      	; 0x1f8 <test+0x1c>
		{
			PORTD ^= BLUE;
 1f0:	82 b3       	in	r24, 0x12	; 18
 1f2:	89 27       	eor	r24, r25
 1f4:	82 bb       	out	0x12, r24	; 18
 1f6:	fa cf       	rjmp	.-12     	; 0x1ec <test+0x10>
		}		
		else if (PIND & BUT2)
 1f8:	83 9b       	sbis	0x10, 3	; 16
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <test+0x28>
		{
			PORTD ^= GREEN;
 1fc:	82 b3       	in	r24, 0x12	; 18
 1fe:	82 27       	eor	r24, r18
 200:	82 bb       	out	0x12, r24	; 18
 202:	f4 cf       	rjmp	.-24     	; 0x1ec <test+0x10>
		}						
		else if ((PIND & BUT1) && (PIND & BUT2))
 204:	82 9b       	sbis	0x10, 2	; 16
 206:	f2 cf       	rjmp	.-28     	; 0x1ec <test+0x10>
 208:	83 9b       	sbis	0x10, 3	; 16
 20a:	f0 cf       	rjmp	.-32     	; 0x1ec <test+0x10>
		{
			PORTD ^= RED;
 20c:	82 b3       	in	r24, 0x12	; 18
 20e:	80 58       	subi	r24, 0x80	; 128
 210:	82 bb       	out	0x12, r24	; 18
 212:	ec cf       	rjmp	.-40     	; 0x1ec <test+0x10>

00000214 <main>:
// 	task3();
// 	task4();
// 	task5();
//	task6();
	 
	test();
 214:	0e 94 ee 00 	call	0x1dc	; 0x1dc <test>
 218:	ff cf       	rjmp	.-2      	; 0x218 <main+0x4>

0000021a <_exit>:
 21a:	f8 94       	cli

0000021c <__stop_program>:
 21c:	ff cf       	rjmp	.-2      	; 0x21c <__stop_program>
