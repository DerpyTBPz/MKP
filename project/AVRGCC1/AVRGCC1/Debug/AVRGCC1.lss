
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007e  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000311  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000143  00000000  00000000  00000d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e6  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00001248  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013a  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  00001432  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  64:	0c 94 de 00 	jmp	0x1bc	; 0x1bc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
void task6();

void test();

ISR(INT0_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
  78:	9f 93       	push	r25
	PORTD ^= BLUE;	
  7a:	92 b3       	in	r25, 0x12	; 18
  7c:	80 e1       	ldi	r24, 0x10	; 16
  7e:	89 27       	eor	r24, r25
  80:	82 bb       	out	0x12, r24	; 18
}
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

00000090 <__vector_2>:

ISR(INT1_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	PORTD ^= RED;
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	80 58       	subi	r24, 0x80	; 128
  a0:	82 bb       	out	0x12, r24	; 18
}
  a2:	8f 91       	pop	r24
  a4:	0f 90       	pop	r0
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	0f 90       	pop	r0
  aa:	1f 90       	pop	r1
  ac:	18 95       	reti

000000ae <task1>:
	}
}

void task1()
{
	DDRD |= GREEN;
  ae:	8d 9a       	sbi	0x11, 5	; 17
	while(1)
	{
		_delay_ms(1000);
		PORTD = GREEN;
  b0:	80 e2       	ldi	r24, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f e3       	ldi	r18, 0x3F	; 63
  b4:	3d e0       	ldi	r19, 0x0D	; 13
  b6:	43 e0       	ldi	r20, 0x03	; 3
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	30 40       	sbci	r19, 0x00	; 0
  bc:	40 40       	sbci	r20, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <task1+0xa>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <task1+0x14>
  c2:	00 00       	nop
  c4:	82 bb       	out	0x12, r24	; 18
  c6:	2f e3       	ldi	r18, 0x3F	; 63
  c8:	3d e0       	ldi	r19, 0x0D	; 13
  ca:	43 e0       	ldi	r20, 0x03	; 3
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	30 40       	sbci	r19, 0x00	; 0
  d0:	40 40       	sbci	r20, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <task1+0x1e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <task1+0x28>
  d6:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0x00;
  d8:	12 ba       	out	0x12, r1	; 18
  da:	eb cf       	rjmp	.-42     	; 0xb2 <task1+0x4>

000000dc <task2>:
	}
}

void task2()
{
	DDRD |= RED | GREEN | BLUE;
  dc:	81 b3       	in	r24, 0x11	; 17
  de:	80 6b       	ori	r24, 0xB0	; 176
  e0:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		PORTD = RED;
  e2:	20 e8       	ldi	r18, 0x80	; 128
		_delay_ms(1000);
		PORTD = GREEN;		
  e4:	90 e2       	ldi	r25, 0x20	; 32
		_delay_ms(1000);	
		PORTD = BLUE;		
  e6:	80 e1       	ldi	r24, 0x10	; 16
void task2()
{
	DDRD |= RED | GREEN | BLUE;
	while(1)
	{
		PORTD = RED;
  e8:	22 bb       	out	0x12, r18	; 18
  ea:	4f e3       	ldi	r20, 0x3F	; 63
  ec:	5d e0       	ldi	r21, 0x0D	; 13
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	41 50       	subi	r20, 0x01	; 1
  f2:	50 40       	sbci	r21, 0x00	; 0
  f4:	60 40       	sbci	r22, 0x00	; 0
  f6:	e1 f7       	brne	.-8      	; 0xf0 <task2+0x14>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <task2+0x1e>
  fa:	00 00       	nop
		_delay_ms(1000);
		PORTD = GREEN;		
  fc:	92 bb       	out	0x12, r25	; 18
  fe:	4f e3       	ldi	r20, 0x3F	; 63
 100:	5d e0       	ldi	r21, 0x0D	; 13
 102:	63 e0       	ldi	r22, 0x03	; 3
 104:	41 50       	subi	r20, 0x01	; 1
 106:	50 40       	sbci	r21, 0x00	; 0
 108:	60 40       	sbci	r22, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <task2+0x28>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <task2+0x32>
 10e:	00 00       	nop
		_delay_ms(1000);	
		PORTD = BLUE;		
 110:	82 bb       	out	0x12, r24	; 18
 112:	4f e3       	ldi	r20, 0x3F	; 63
 114:	5d e0       	ldi	r21, 0x0D	; 13
 116:	63 e0       	ldi	r22, 0x03	; 3
 118:	41 50       	subi	r20, 0x01	; 1
 11a:	50 40       	sbci	r21, 0x00	; 0
 11c:	60 40       	sbci	r22, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <task2+0x3c>
 120:	00 c0       	rjmp	.+0      	; 0x122 <task2+0x46>
 122:	00 00       	nop
 124:	e1 cf       	rjmp	.-62     	; 0xe8 <task2+0xc>

00000126 <task3>:
	}		
}

void task3()
{
	DDRD |= RED | GREEN | BLUE | BUT1;
 126:	81 b3       	in	r24, 0x11	; 17
 128:	84 6b       	ori	r24, 0xB4	; 180
 12a:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~BUT1;
 12c:	8a 98       	cbi	0x11, 2	; 17

	while(1)
	{
		if (PIND & BUT1)
		{
			PORTD = BLUE;
 12e:	80 e1       	ldi	r24, 0x10	; 16
	DDRD |= RED | GREEN | BLUE | BUT1;
	DDRD &= ~BUT1;

	while(1)
	{
		if (PIND & BUT1)
 130:	82 9b       	sbis	0x10, 2	; 16
 132:	02 c0       	rjmp	.+4      	; 0x138 <task3+0x12>
		{
			PORTD = BLUE;
 134:	82 bb       	out	0x12, r24	; 18
 136:	fc cf       	rjmp	.-8      	; 0x130 <task3+0xa>
		}
		else
		{
			PORTD = 0x0;		
 138:	12 ba       	out	0x12, r1	; 18
 13a:	fa cf       	rjmp	.-12     	; 0x130 <task3+0xa>

0000013c <task4>:
// 	}		
// }

void task4()
{
	DDRD = 0xB0;
 13c:	80 eb       	ldi	r24, 0xB0	; 176
 13e:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x03; //0x0F 0x03
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	85 bf       	out	0x35, r24	; 53
	GICR = 0x40; //0xC0 0x40
 144:	80 e4       	ldi	r24, 0x40	; 64
 146:	8b bf       	out	0x3b, r24	; 59
	sei();	
 148:	78 94       	sei
}
 14a:	08 95       	ret

0000014c <task5>:

void task5()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
 14c:	81 b3       	in	r24, 0x11	; 17
 14e:	8c 6b       	ori	r24, 0xBC	; 188
 150:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		if (PIND & BUT1)
		{
			PORTD = BLUE;
 152:	80 e1       	ldi	r24, 0x10	; 16
		{
			PORTD = GREEN;		
		}
		else if (PIND & (BUT1 | BUT2))
		{
			PORTD = RED;
 154:	30 e8       	ldi	r19, 0x80	; 128
		{
			PORTD = BLUE;
		}
		else if (PIND & BUT2)
		{
			PORTD = GREEN;		
 156:	20 e2       	ldi	r18, 0x20	; 32
void task5()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
	while(1)
	{
		if (PIND & BUT1)
 158:	82 9b       	sbis	0x10, 2	; 16
 15a:	02 c0       	rjmp	.+4      	; 0x160 <task5+0x14>
		{
			PORTD = BLUE;
 15c:	82 bb       	out	0x12, r24	; 18
 15e:	fc cf       	rjmp	.-8      	; 0x158 <task5+0xc>
		}
		else if (PIND & BUT2)
 160:	83 9b       	sbis	0x10, 3	; 16
 162:	02 c0       	rjmp	.+4      	; 0x168 <task5+0x1c>
		{
			PORTD = GREEN;		
 164:	22 bb       	out	0x12, r18	; 18
 166:	f8 cf       	rjmp	.-16     	; 0x158 <task5+0xc>
		}
		else if (PIND & (BUT1 | BUT2))
 168:	90 b3       	in	r25, 0x10	; 16
 16a:	9c 70       	andi	r25, 0x0C	; 12
 16c:	11 f0       	breq	.+4      	; 0x172 <task5+0x26>
		{
			PORTD = RED;
 16e:	32 bb       	out	0x12, r19	; 18
 170:	f3 cf       	rjmp	.-26     	; 0x158 <task5+0xc>
		}
		else
		{
			PORTD = 0x0;
 172:	12 ba       	out	0x12, r1	; 18
 174:	f1 cf       	rjmp	.-30     	; 0x158 <task5+0xc>

00000176 <task6>:
	}	
}

void task6()
{
	DDRD = 0xB0;
 176:	80 eb       	ldi	r24, 0xB0	; 176
 178:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F; //0x0F 0x03
 17a:	8f e0       	ldi	r24, 0x0F	; 15
 17c:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0; //0xC0 0x40
 17e:	80 ec       	ldi	r24, 0xC0	; 192
 180:	8b bf       	out	0x3b, r24	; 59
	sei();	
 182:	78 94       	sei
}
 184:	08 95       	ret

00000186 <main>:
// 	task1();
// 	task2();
// 	task3();
// 	task4();
// 	task5();
	task6();
 186:	0e 94 bb 00 	call	0x176	; 0x176 <task6>
 18a:	ff cf       	rjmp	.-2      	; 0x18a <main+0x4>

0000018c <test>:
	sei();	
}

void test()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
 18c:	81 b3       	in	r24, 0x11	; 17
 18e:	8c 6b       	ori	r24, 0xBC	; 188
 190:	81 bb       	out	0x11, r24	; 17
	PIND |= BUT1 | BUT2;
 192:	80 b3       	in	r24, 0x10	; 16
 194:	8c 60       	ori	r24, 0x0C	; 12
 196:	80 bb       	out	0x10, r24	; 16
	while(1)
	{
		if (PIND & BUT1)
		{
			PORTD = BLUE;
 198:	80 e1       	ldi	r24, 0x10	; 16
		{
			PORTD = GREEN;		
		}
		else if (PIND & (BUT1 | BUT2))
		{
			PORTD = RED;
 19a:	30 e8       	ldi	r19, 0x80	; 128
		{
			PORTD = BLUE;
		}
		else if (PIND & BUT2)
		{
			PORTD = GREEN;		
 19c:	20 e2       	ldi	r18, 0x20	; 32
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
	PIND |= BUT1 | BUT2;
	while(1)
	{
		if (PIND & BUT1)
 19e:	82 9b       	sbis	0x10, 2	; 16
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <test+0x1a>
		{
			PORTD = BLUE;
 1a2:	82 bb       	out	0x12, r24	; 18
 1a4:	fc cf       	rjmp	.-8      	; 0x19e <test+0x12>
		}
		else if (PIND & BUT2)
 1a6:	83 9b       	sbis	0x10, 3	; 16
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <test+0x22>
		{
			PORTD = GREEN;		
 1aa:	22 bb       	out	0x12, r18	; 18
 1ac:	f8 cf       	rjmp	.-16     	; 0x19e <test+0x12>
		}
		else if (PIND & (BUT1 | BUT2))
 1ae:	90 b3       	in	r25, 0x10	; 16
 1b0:	9c 70       	andi	r25, 0x0C	; 12
 1b2:	11 f0       	breq	.+4      	; 0x1b8 <test+0x2c>
		{
			PORTD = RED;
 1b4:	32 bb       	out	0x12, r19	; 18
 1b6:	f3 cf       	rjmp	.-26     	; 0x19e <test+0x12>
		}
		else
		{
			PORTD = 0x0;
 1b8:	12 ba       	out	0x12, r1	; 18
 1ba:	f1 cf       	rjmp	.-30     	; 0x19e <test+0x12>

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
