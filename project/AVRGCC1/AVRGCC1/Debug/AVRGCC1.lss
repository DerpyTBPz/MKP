
AVRGCC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000002ea  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000092  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004af  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000166  00000000  00000000  00000fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000472  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001584  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000146  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_2>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 02 01 	call	0x204	; 0x204 <main>
  74:	0c 94 39 01 	jmp	0x272	; 0x272 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:



// BUT1 INT
ISR(INT0_vect)
{	
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
// 	{
// 		PORTD ^= BLUE; 		
// 	}		
// 	flag1 = 0;
	
	if ((PIND & BUT1) && (PIND & BUT2))
  8a:	82 9b       	sbis	0x10, 2	; 16
  8c:	07 c0       	rjmp	.+14     	; 0x9c <__vector_1+0x20>
  8e:	83 9b       	sbis	0x10, 3	; 16
  90:	05 c0       	rjmp	.+10     	; 0x9c <__vector_1+0x20>
	{
//		PORTD ^= 0x20;
		PORTD ^= RED;
  92:	92 b3       	in	r25, 0x12	; 18
  94:	80 e1       	ldi	r24, 0x10	; 16
  96:	89 27       	eor	r24, r25
  98:	82 bb       	out	0x12, r24	; 18
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <__vector_1+0x26>
	}
	else 
	{
		PORTD ^= BLUE; 		
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	80 58       	subi	r24, 0x80	; 128
  a0:	82 bb       	out	0x12, r24	; 18
	}
//	PORTD ^= BLUE;	
}
  a2:	9f 91       	pop	r25
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <__vector_2>:

// BUT2 INT
ISR(INT1_vect)
{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
	if ((PIND & BUT1) && (PIND & BUT2))
  be:	82 9b       	sbis	0x10, 2	; 16
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <__vector_2+0x16>
  c2:	83 99       	sbic	0x10, 3	; 16
  c4:	04 c0       	rjmp	.+8      	; 0xce <__vector_2+0x1e>
	{
		
	}
	else 
	{
		PORTD ^= GREEN; 		
  c6:	92 b3       	in	r25, 0x12	; 18
  c8:	80 e2       	ldi	r24, 0x20	; 32
  ca:	89 27       	eor	r24, r25
  cc:	82 bb       	out	0x12, r24	; 18
	}
//	PORTD ^= RED;
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <task1>:



void task1()
{
	DDRD |= GREEN;
  dc:	8d 9a       	sbi	0x11, 5	; 17
	while(1)
	{
		_delay_ms(1000);
		PORTD = GREEN;
  de:	80 e2       	ldi	r24, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f e3       	ldi	r18, 0x3F	; 63
  e2:	3d e0       	ldi	r19, 0x0D	; 13
  e4:	43 e0       	ldi	r20, 0x03	; 3
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	40 40       	sbci	r20, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <task1+0xa>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <task1+0x14>
  f0:	00 00       	nop
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	2f e3       	ldi	r18, 0x3F	; 63
  f6:	3d e0       	ldi	r19, 0x0D	; 13
  f8:	43 e0       	ldi	r20, 0x03	; 3
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	30 40       	sbci	r19, 0x00	; 0
  fe:	40 40       	sbci	r20, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <task1+0x1e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <task1+0x28>
 104:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0x00;
 106:	12 ba       	out	0x12, r1	; 18
 108:	eb cf       	rjmp	.-42     	; 0xe0 <task1+0x4>

0000010a <task2>:
	}
}

void task2()
{
	DDRD |= RED | GREEN | BLUE;
 10a:	81 b3       	in	r24, 0x11	; 17
 10c:	80 6b       	ori	r24, 0xB0	; 176
 10e:	81 bb       	out	0x11, r24	; 17
	while(1)
	{
		PORTD = RED;
 110:	20 e1       	ldi	r18, 0x10	; 16
		_delay_ms(1000);
		PORTD = GREEN;		
 112:	90 e2       	ldi	r25, 0x20	; 32
		_delay_ms(1000);	
		PORTD = BLUE;		
 114:	80 e8       	ldi	r24, 0x80	; 128
void task2()
{
	DDRD |= RED | GREEN | BLUE;
	while(1)
	{
		PORTD = RED;
 116:	22 bb       	out	0x12, r18	; 18
 118:	4f e3       	ldi	r20, 0x3F	; 63
 11a:	5d e0       	ldi	r21, 0x0D	; 13
 11c:	63 e0       	ldi	r22, 0x03	; 3
 11e:	41 50       	subi	r20, 0x01	; 1
 120:	50 40       	sbci	r21, 0x00	; 0
 122:	60 40       	sbci	r22, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <task2+0x14>
 126:	00 c0       	rjmp	.+0      	; 0x128 <task2+0x1e>
 128:	00 00       	nop
		_delay_ms(1000);
		PORTD = GREEN;		
 12a:	92 bb       	out	0x12, r25	; 18
 12c:	4f e3       	ldi	r20, 0x3F	; 63
 12e:	5d e0       	ldi	r21, 0x0D	; 13
 130:	63 e0       	ldi	r22, 0x03	; 3
 132:	41 50       	subi	r20, 0x01	; 1
 134:	50 40       	sbci	r21, 0x00	; 0
 136:	60 40       	sbci	r22, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <task2+0x28>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <task2+0x32>
 13c:	00 00       	nop
		_delay_ms(1000);	
		PORTD = BLUE;		
 13e:	82 bb       	out	0x12, r24	; 18
 140:	4f e3       	ldi	r20, 0x3F	; 63
 142:	5d e0       	ldi	r21, 0x0D	; 13
 144:	63 e0       	ldi	r22, 0x03	; 3
 146:	41 50       	subi	r20, 0x01	; 1
 148:	50 40       	sbci	r21, 0x00	; 0
 14a:	60 40       	sbci	r22, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <task2+0x3c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <task2+0x46>
 150:	00 00       	nop
 152:	e1 cf       	rjmp	.-62     	; 0x116 <task2+0xc>

00000154 <task3>:
	}		
}

void task3()
{
	DDRD |= RED | GREEN | BLUE | BUT1;	
 154:	81 b3       	in	r24, 0x11	; 17
 156:	84 6b       	ori	r24, 0xB4	; 180
 158:	81 bb       	out	0x11, r24	; 17

	while(1)
	{
		if (PIND & BUT1)
		{
			PORTD = BLUE;
 15a:	80 e8       	ldi	r24, 0x80	; 128
{
	DDRD |= RED | GREEN | BLUE | BUT1;	

	while(1)
	{
		if (PIND & BUT1)
 15c:	82 9b       	sbis	0x10, 2	; 16
 15e:	02 c0       	rjmp	.+4      	; 0x164 <task3+0x10>
		{
			PORTD = BLUE;
 160:	82 bb       	out	0x12, r24	; 18
 162:	fc cf       	rjmp	.-8      	; 0x15c <task3+0x8>
		}
		else
		{
			PORTD = 0x0;		
 164:	12 ba       	out	0x12, r1	; 18
 166:	fa cf       	rjmp	.-12     	; 0x15c <task3+0x8>

00000168 <task4>:
}

void task4()
{
	//DDRD = 0xB0;
	DDRD |= BLUE;
 168:	8f 9a       	sbi	0x11, 7	; 17
	MCUCR = 0x03; //0x0F 0x03
 16a:	83 e0       	ldi	r24, 0x03	; 3
 16c:	85 bf       	out	0x35, r24	; 53
	GICR = 0x40; //0xC0 0x40
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	8b bf       	out	0x3b, r24	; 59
	sei();	
 172:	78 94       	sei
}
 174:	08 95       	ret

00000176 <task5>:

void task5()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;	
 176:	81 b3       	in	r24, 0x11	; 17
 178:	8c 6b       	ori	r24, 0xBC	; 188
 17a:	81 bb       	out	0x11, r24	; 17
				PORTD ^= RED;
				_delay_ms(300);			
			}
			else if ((PIND & BUT2))
			{
				PORTD ^= GREEN;
 17c:	90 e2       	ldi	r25, 0x20	; 32
	{		
		if ((PIND & BUT1) || (PIND & BUT2) || ((PIND & BUT1) && (PIND & BUT2)))
 		{
			if ((PIND & BUT1) && (PIND & BUT2)) 
			{
				PORTD ^= RED;
 17e:	20 e1       	ldi	r18, 0x10	; 16
void task5()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;	
	while(1)
	{		
		if ((PIND & BUT1) || (PIND & BUT2) || ((PIND & BUT1) && (PIND & BUT2)))
 180:	82 99       	sbic	0x10, 2	; 16
 182:	06 c0       	rjmp	.+12     	; 0x190 <task5+0x1a>
 184:	83 99       	sbic	0x10, 3	; 16
 186:	04 c0       	rjmp	.+8      	; 0x190 <task5+0x1a>
 188:	82 9b       	sbis	0x10, 2	; 16
 18a:	fa cf       	rjmp	.-12     	; 0x180 <task5+0xa>
 18c:	83 9b       	sbis	0x10, 3	; 16
 18e:	f8 cf       	rjmp	.-16     	; 0x180 <task5+0xa>
 		{
			if ((PIND & BUT1) && (PIND & BUT2)) 
 190:	82 9b       	sbis	0x10, 2	; 16
 192:	0f c0       	rjmp	.+30     	; 0x1b2 <task5+0x3c>
 194:	83 9b       	sbis	0x10, 3	; 16
 196:	0d c0       	rjmp	.+26     	; 0x1b2 <task5+0x3c>
			{
				PORTD ^= RED;
 198:	82 b3       	in	r24, 0x12	; 18
 19a:	82 27       	eor	r24, r18
 19c:	82 bb       	out	0x12, r24	; 18
 19e:	4f e5       	ldi	r20, 0x5F	; 95
 1a0:	5a ee       	ldi	r21, 0xEA	; 234
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	41 50       	subi	r20, 0x01	; 1
 1a6:	50 40       	sbci	r21, 0x00	; 0
 1a8:	60 40       	sbci	r22, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <task5+0x2e>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <task5+0x38>
 1ae:	00 00       	nop
 1b0:	e7 cf       	rjmp	.-50     	; 0x180 <task5+0xa>
				_delay_ms(300);			
			}
			else if ((PIND & BUT2))
 1b2:	83 9b       	sbis	0x10, 3	; 16
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <task5+0x5a>
			{
				PORTD ^= GREEN;
 1b6:	82 b3       	in	r24, 0x12	; 18
 1b8:	89 27       	eor	r24, r25
 1ba:	82 bb       	out	0x12, r24	; 18
 1bc:	4f e5       	ldi	r20, 0x5F	; 95
 1be:	5a ee       	ldi	r21, 0xEA	; 234
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	41 50       	subi	r20, 0x01	; 1
 1c4:	50 40       	sbci	r21, 0x00	; 0
 1c6:	60 40       	sbci	r22, 0x00	; 0
 1c8:	e1 f7       	brne	.-8      	; 0x1c2 <task5+0x4c>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <task5+0x56>
 1cc:	00 00       	nop
 1ce:	d8 cf       	rjmp	.-80     	; 0x180 <task5+0xa>
				_delay_ms(300);			
			}
			else if ((PIND & BUT1))
 1d0:	82 9b       	sbis	0x10, 2	; 16
 1d2:	d6 cf       	rjmp	.-84     	; 0x180 <task5+0xa>
			{
				PORTD ^= BLUE;
 1d4:	82 b3       	in	r24, 0x12	; 18
 1d6:	80 58       	subi	r24, 0x80	; 128
 1d8:	82 bb       	out	0x12, r24	; 18
 1da:	4f e5       	ldi	r20, 0x5F	; 95
 1dc:	5a ee       	ldi	r21, 0xEA	; 234
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	41 50       	subi	r20, 0x01	; 1
 1e2:	50 40       	sbci	r21, 0x00	; 0
 1e4:	60 40       	sbci	r22, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <task5+0x6a>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <task5+0x74>
 1ea:	00 00       	nop
 1ec:	c9 cf       	rjmp	.-110    	; 0x180 <task5+0xa>

000001ee <task6>:
	}	
}

void task6()
{
	DDRD = 0xB0;
 1ee:	80 eb       	ldi	r24, 0xB0	; 176
 1f0:	81 bb       	out	0x11, r24	; 17
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
 1f2:	81 b3       	in	r24, 0x11	; 17
 1f4:	8c 6b       	ori	r24, 0xBC	; 188
 1f6:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F; //0x0F 0x03
 1f8:	8f e0       	ldi	r24, 0x0F	; 15
 1fa:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0; //0xC0 0x40
 1fc:	80 ec       	ldi	r24, 0xC0	; 192
 1fe:	8b bf       	out	0x3b, r24	; 59
	sei();	
 200:	78 94       	sei
}
 202:	08 95       	ret

00000204 <main>:
// 	task1();
// 	task2();
// 	task3();
// 	task4();
// 	task5();
	task6();
 204:	0e 94 f7 00 	call	0x1ee	; 0x1ee <task6>
 208:	ff cf       	rjmp	.-2      	; 0x208 <main+0x4>

0000020a <test>:



void test()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
 20a:	81 b3       	in	r24, 0x11	; 17
 20c:	8c 6b       	ori	r24, 0xBC	; 188
 20e:	81 bb       	out	0x11, r24	; 17
				PORTD ^= GREEN;
			}						
			else if ((PIND & BUT1) && (PIND & BUT2))
			{
				_delay_ms(70);
				PORTD ^= RED;
 210:	90 e1       	ldi	r25, 0x10	; 16
				PORTD ^= BLUE;
			}		
			else if ((PIND & BUT2) && (PIND & ~BUT1))
			{
				_delay_ms(70);
				PORTD ^= GREEN;
 212:	20 e2       	ldi	r18, 0x20	; 32
void test()
{
	DDRD |= RED | GREEN | BLUE | BUT1 | BUT2;
	while(1)
	{
		if (PIND != 0x0)
 214:	80 b3       	in	r24, 0x10	; 16
 216:	88 23       	and	r24, r24
 218:	e9 f3       	breq	.-6      	; 0x214 <test+0xa>
		{	
			if ((PIND & BUT1) && (PIND & ~BUT2))
 21a:	82 9b       	sbis	0x10, 2	; 16
 21c:	0d c0       	rjmp	.+26     	; 0x238 <test+0x2e>
 21e:	80 b3       	in	r24, 0x10	; 16
 220:	87 7f       	andi	r24, 0xF7	; 247
 222:	51 f0       	breq	.+20     	; 0x238 <test+0x2e>
 224:	eb e5       	ldi	r30, 0x5B	; 91
 226:	f4 e4       	ldi	r31, 0x44	; 68
 228:	31 97       	sbiw	r30, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <test+0x1e>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <test+0x24>
 22e:	00 00       	nop
			{
				_delay_ms(70);
				PORTD ^= BLUE;
 230:	82 b3       	in	r24, 0x12	; 18
 232:	80 58       	subi	r24, 0x80	; 128
 234:	82 bb       	out	0x12, r24	; 18
 236:	ee cf       	rjmp	.-36     	; 0x214 <test+0xa>
			}		
			else if ((PIND & BUT2) && (PIND & ~BUT1))
 238:	83 9b       	sbis	0x10, 3	; 16
 23a:	0d c0       	rjmp	.+26     	; 0x256 <test+0x4c>
 23c:	80 b3       	in	r24, 0x10	; 16
 23e:	8b 7f       	andi	r24, 0xFB	; 251
 240:	51 f0       	breq	.+20     	; 0x256 <test+0x4c>
 242:	eb e5       	ldi	r30, 0x5B	; 91
 244:	f4 e4       	ldi	r31, 0x44	; 68
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <test+0x3c>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <test+0x42>
 24c:	00 00       	nop
			{
				_delay_ms(70);
				PORTD ^= GREEN;
 24e:	82 b3       	in	r24, 0x12	; 18
 250:	82 27       	eor	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	df cf       	rjmp	.-66     	; 0x214 <test+0xa>
			}						
			else if ((PIND & BUT1) && (PIND & BUT2))
 256:	82 9b       	sbis	0x10, 2	; 16
 258:	dd cf       	rjmp	.-70     	; 0x214 <test+0xa>
 25a:	83 9b       	sbis	0x10, 3	; 16
 25c:	db cf       	rjmp	.-74     	; 0x214 <test+0xa>
 25e:	eb e5       	ldi	r30, 0x5B	; 91
 260:	f4 e4       	ldi	r31, 0x44	; 68
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <test+0x58>
 266:	00 c0       	rjmp	.+0      	; 0x268 <test+0x5e>
 268:	00 00       	nop
			{
				_delay_ms(70);
				PORTD ^= RED;
 26a:	82 b3       	in	r24, 0x12	; 18
 26c:	89 27       	eor	r24, r25
 26e:	82 bb       	out	0x12, r24	; 18
 270:	d1 cf       	rjmp	.-94     	; 0x214 <test+0xa>

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
