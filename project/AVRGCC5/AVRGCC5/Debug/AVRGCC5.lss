
AVRGCC5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  00800070  00800070  00000310  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016e  00000000  00000000  00000c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000081  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000001c3  00000000  00000000  00000e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000116  00000000  00000000  00001036  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000206  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000070  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000e2  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000028  00000000  00000000  000014a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000001e  00000000  00000000  000014ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_1>
   8:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3f       	cpi	r26, 0xF0	; 240
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8a:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UARTSend>:
    }
}

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <UARTSend>
	{
		;
	}		
	UDR = Value;
  96:	8c b9       	out	0x0c, r24	; 12
}
  98:	08 95       	ret

0000009a <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
  9a:	5f 9b       	sbis	0x0b, 7	; 11
  9c:	fe cf       	rjmp	.-4      	; 0x9a <UARTReceive>
	{
		;
	}		
	return UDR; 
  9e:	8c b1       	in	r24, 0x0c	; 12
}
  a0:	08 95       	ret

000000a2 <main>:
char string[128];
int num = 2048;

int main(void)
{
	DDRD |= 0xFF;
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	81 bb       	out	0x11, r24	; 17
	MCUCR = 0x0F;
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
  ac:	80 ec       	ldi	r24, 0xC0	; 192
  ae:	8b bf       	out	0x3b, r24	; 59
	
	UCSRA = 0x00;
  b0:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	88 61       	ori	r24, 0x18	; 24
  b6:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
  b8:	80 b5       	in	r24, 0x20	; 32
  ba:	86 68       	ori	r24, 0x86	; 134
  bc:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;   
  be:	89 e1       	ldi	r24, 0x19	; 25
  c0:	89 b9       	out	0x09, r24	; 9
	
    while(1)
    {
		//PORTD ^= RED;
		
		UARTSend(UARTReceive());
  c2:	0e 94 4d 00 	call	0x9a	; 0x9a <UARTReceive>
  c6:	0e 94 49 00 	call	0x92	; 0x92 <UARTSend>
  ca:	fb cf       	rjmp	.-10     	; 0xc2 <main+0x20>

000000cc <SendString>:
	}		
	return UDR; 
}

void SendString(char* str)
{
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	ec 01       	movw	r28, r24
	while(*str != '\0')
  d2:	88 81       	ld	r24, Y
  d4:	88 23       	and	r24, r24
  d6:	31 f0       	breq	.+12     	; 0xe4 <SendString+0x18>
		;
	}		
	return UDR; 
}

void SendString(char* str)
  d8:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
  da:	0e 94 49 00 	call	0x92	; 0x92 <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
  de:	89 91       	ld	r24, Y+
  e0:	88 23       	and	r24, r24
  e2:	d9 f7       	brne	.-10     	; 0xda <SendString+0xe>
	{
		UARTSend(*str);
		str++;
	}
	//UARTSend(*str);
	UARTSend('\r');
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	0e 94 49 00 	call	0x92	; 0x92 <UARTSend>
	UARTSend('\n');
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	0e 94 49 00 	call	0x92	; 0x92 <UARTSend>
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <__vector_1>:

ISR(INT0_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	4f 93       	push	r20
 106:	5f 93       	push	r21
 108:	6f 93       	push	r22
 10a:	7f 93       	push	r23
 10c:	8f 93       	push	r24
 10e:	9f 93       	push	r25
 110:	af 93       	push	r26
 112:	bf 93       	push	r27
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	num++;
 11c:	80 91 6d 00 	lds	r24, 0x006D
 120:	90 91 6e 00 	lds	r25, 0x006E
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 6e 00 	sts	0x006E, r25
 12a:	80 93 6d 00 	sts	0x006D, r24
	itoa(num, string, 10);	
 12e:	c0 e7       	ldi	r28, 0x70	; 112
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	be 01       	movw	r22, r28
 134:	4a e0       	ldi	r20, 0x0A	; 10
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	0e 94 ef 00 	call	0x1de	; 0x1de <itoa>
	SendString(string);
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 66 00 	call	0xcc	; 0xcc <SendString>
}
 142:	ff 91       	pop	r31
 144:	ef 91       	pop	r30
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_2>:

ISR(INT1_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	2f 93       	push	r18
 174:	3f 93       	push	r19
 176:	4f 93       	push	r20
 178:	5f 93       	push	r21
 17a:	6f 93       	push	r22
 17c:	7f 93       	push	r23
 17e:	8f 93       	push	r24
 180:	9f 93       	push	r25
 182:	af 93       	push	r26
 184:	bf 93       	push	r27
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	if (num != 0)
 18e:	80 91 6d 00 	lds	r24, 0x006D
 192:	90 91 6e 00 	lds	r25, 0x006E
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	79 f0       	breq	.+30     	; 0x1b8 <__vector_2+0x50>
	{
		num--;
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	90 93 6e 00 	sts	0x006E, r25
 1a0:	80 93 6d 00 	sts	0x006D, r24
		itoa(num, string, 10);
 1a4:	c0 e7       	ldi	r28, 0x70	; 112
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	be 01       	movw	r22, r28
 1aa:	4a e0       	ldi	r20, 0x0A	; 10
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	0e 94 ef 00 	call	0x1de	; 0x1de <itoa>
		SendString(string);
 1b2:	ce 01       	movw	r24, r28
 1b4:	0e 94 66 00 	call	0xcc	; 0xcc <SendString>
	}
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <itoa>:
 1de:	fb 01       	movw	r30, r22
 1e0:	9f 01       	movw	r18, r30
 1e2:	e8 94       	clt
 1e4:	42 30       	cpi	r20, 0x02	; 2
 1e6:	c4 f0       	brlt	.+48     	; 0x218 <itoa+0x3a>
 1e8:	45 32       	cpi	r20, 0x25	; 37
 1ea:	b4 f4       	brge	.+44     	; 0x218 <itoa+0x3a>
 1ec:	4a 30       	cpi	r20, 0x0A	; 10
 1ee:	29 f4       	brne	.+10     	; 0x1fa <itoa+0x1c>
 1f0:	97 fb       	bst	r25, 7
 1f2:	1e f4       	brtc	.+6      	; 0x1fa <itoa+0x1c>
 1f4:	90 95       	com	r25
 1f6:	81 95       	neg	r24
 1f8:	9f 4f       	sbci	r25, 0xFF	; 255
 1fa:	64 2f       	mov	r22, r20
 1fc:	77 27       	eor	r23, r23
 1fe:	0e 94 20 01 	call	0x240	; 0x240 <__udivmodhi4>
 202:	80 5d       	subi	r24, 0xD0	; 208
 204:	8a 33       	cpi	r24, 0x3A	; 58
 206:	0c f0       	brlt	.+2      	; 0x20a <itoa+0x2c>
 208:	89 5d       	subi	r24, 0xD9	; 217
 20a:	81 93       	st	Z+, r24
 20c:	cb 01       	movw	r24, r22
 20e:	00 97       	sbiw	r24, 0x00	; 0
 210:	a1 f7       	brne	.-24     	; 0x1fa <itoa+0x1c>
 212:	16 f4       	brtc	.+4      	; 0x218 <itoa+0x3a>
 214:	5d e2       	ldi	r21, 0x2D	; 45
 216:	51 93       	st	Z+, r21
 218:	10 82       	st	Z, r1
 21a:	c9 01       	movw	r24, r18
 21c:	0c 94 10 01 	jmp	0x220	; 0x220 <strrev>

00000220 <strrev>:
 220:	dc 01       	movw	r26, r24
 222:	fc 01       	movw	r30, r24
 224:	67 2f       	mov	r22, r23
 226:	71 91       	ld	r23, Z+
 228:	77 23       	and	r23, r23
 22a:	e1 f7       	brne	.-8      	; 0x224 <strrev+0x4>
 22c:	32 97       	sbiw	r30, 0x02	; 2
 22e:	04 c0       	rjmp	.+8      	; 0x238 <strrev+0x18>
 230:	7c 91       	ld	r23, X
 232:	6d 93       	st	X+, r22
 234:	70 83       	st	Z, r23
 236:	62 91       	ld	r22, -Z
 238:	ae 17       	cp	r26, r30
 23a:	bf 07       	cpc	r27, r31
 23c:	c8 f3       	brcs	.-14     	; 0x230 <strrev+0x10>
 23e:	08 95       	ret

00000240 <__udivmodhi4>:
 240:	aa 1b       	sub	r26, r26
 242:	bb 1b       	sub	r27, r27
 244:	51 e1       	ldi	r21, 0x11	; 17
 246:	07 c0       	rjmp	.+14     	; 0x256 <__udivmodhi4_ep>

00000248 <__udivmodhi4_loop>:
 248:	aa 1f       	adc	r26, r26
 24a:	bb 1f       	adc	r27, r27
 24c:	a6 17       	cp	r26, r22
 24e:	b7 07       	cpc	r27, r23
 250:	10 f0       	brcs	.+4      	; 0x256 <__udivmodhi4_ep>
 252:	a6 1b       	sub	r26, r22
 254:	b7 0b       	sbc	r27, r23

00000256 <__udivmodhi4_ep>:
 256:	88 1f       	adc	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	5a 95       	dec	r21
 25c:	a9 f7       	brne	.-22     	; 0x248 <__udivmodhi4_loop>
 25e:	80 95       	com	r24
 260:	90 95       	com	r25
 262:	bc 01       	movw	r22, r24
 264:	cd 01       	movw	r24, r26
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
