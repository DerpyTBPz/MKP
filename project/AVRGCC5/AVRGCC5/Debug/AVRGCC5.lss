
AVRGCC5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000806  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000806  0000089a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000092  00800064  00800064  0000089e  2**0
                  ALLOC
  3 .stab         00001968  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000068f  00000000  00000000  00002208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00002897  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000123  00000000  00000000  000028b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000383  00000000  00000000  000029da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000184  00000000  00000000  00002d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000052e  00000000  00000000  00002ee1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  00003410  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000016c  00000000  00000000  00003500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001cb  00000000  00000000  0000366c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000002b  00000000  00000000  00003837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_1>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_2>
   c:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3f       	cpi	r26, 0xF6	; 246
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8a:	0c 94 01 04 	jmp	0x802	; 0x802 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerInit>:

}

void TimerInit()
{
	MCUCR = 0x0F;
  92:	8f e0       	ldi	r24, 0x0F	; 15
  94:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	8b bf       	out	0x3b, r24	; 59
// 	TCCR0 |= (1 << WGM01) | (1 << CS01) | (1 << CS00);
// 	OCR0 = 20;
//  TIMSK |= (1 << OCIE0);

	//TIMER1
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
  9a:	8f b5       	in	r24, 0x2f	; 47
  9c:	81 6a       	ori	r24, 0xA1	; 161
  9e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<CS10);
  a0:	8e b5       	in	r24, 0x2e	; 46
  a2:	89 60       	ori	r24, 0x09	; 9
  a4:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 20;
  a6:	84 e1       	ldi	r24, 0x14	; 20
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
//	TIMSK |= (1 << OCIE1A);	
//	TIMSK |= (1 << TOIE1);
	TIFR |= (1 << TOV1);
  ae:	88 b7       	in	r24, 0x38	; 56
  b0:	84 60       	ori	r24, 0x04	; 4
  b2:	88 bf       	out	0x38, r24	; 56
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	8e 60       	ori	r24, 0x0E	; 14
  b8:	85 bd       	out	0x25, r24	; 37
	OCR2 = 10;
  ba:	8a e0       	ldi	r24, 0x0A	; 10
  bc:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
  be:	89 b7       	in	r24, 0x39	; 57
  c0:	80 68       	ori	r24, 0x80	; 128
  c2:	89 bf       	out	0x39, r24	; 57
}
  c4:	08 95       	ret

000000c6 <ACPInit>:

void ACPInit()
{
	ADMUX |= (1<<REFS0) | (1<<MUX1); 
  c6:	87 b1       	in	r24, 0x07	; 7
  c8:	82 64       	ori	r24, 0x42	; 66
  ca:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	88 66       	ori	r24, 0x68	; 104
  d0:	86 b9       	out	0x06, r24	; 6
//	SFIOR |= (1<<ADTS2) | (1<<ADTS1);
	
	//ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
}
  d2:	08 95       	ret

000000d4 <main>:
int arr[DIGITS];
char string[128];

int main(void)
{
	DDRA = 0xF0;
  d4:	80 ef       	ldi	r24, 0xF0	; 240
  d6:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2 | RED | GREEN;
  dc:	91 b3       	in	r25, 0x11	; 17
  de:	9c 6a       	ori	r25, 0xAC	; 172
  e0:	91 bb       	out	0x11, r25	; 17
	
// 	DDRA = 0xF0;
 	DDRD |= 0xFF;
  e2:	91 b3       	in	r25, 0x11	; 17
  e4:	81 bb       	out	0x11, r24	; 17
 	MCUCR = 0x0F;
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	85 bf       	out	0x35, r24	; 53
 	GICR = 0xC0;
  ea:	80 ec       	ldi	r24, 0xC0	; 192
  ec:	8b bf       	out	0x3b, r24	; 59
	
	PORTA = 0x00;
  ee:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
  f0:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
  f2:	12 ba       	out	0x12, r1	; 18
	
	UCSRA = 0x00;
  f4:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
  f6:	8a b1       	in	r24, 0x0a	; 10
  f8:	88 61       	ori	r24, 0x18	; 24
  fa:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
  fc:	80 b5       	in	r24, 0x20	; 32
  fe:	86 68       	ori	r24, 0x86	; 134
 100:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;  
 102:	89 e1       	ldi	r24, 0x19	; 25
 104:	89 b9       	out	0x09, r24	; 9
	
	PORTD = RED;
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	82 bb       	out	0x12, r24	; 18
		
 	TimerInit();
 10a:	0e 94 49 00 	call	0x92	; 0x92 <TimerInit>
 	ACPInit();
 10e:	0e 94 63 00 	call	0xc6	; 0xc6 <ACPInit>
	
// 	ADMUX |= (1<<REFS0) | (1<<MUX1); 
// 	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);

	sei();
 112:	78 94       	sei
 114:	ff cf       	rjmp	.-2      	; 0x114 <main+0x40>

00000116 <__vector_2>:
	
	ToggleACP(enACP);
}

ISR(INT1_vect)
{
 116:	1f 92       	push	r1
 118:	0f 92       	push	r0
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	0f 92       	push	r0
 11e:	11 24       	eor	r1, r1
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	modeACP++;
 124:	80 91 68 00 	lds	r24, 0x0068
 128:	90 91 69 00 	lds	r25, 0x0069
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	90 93 69 00 	sts	0x0069, r25
 132:	80 93 68 00 	sts	0x0068, r24
	if (modeACP >= 3)
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	91 05       	cpc	r25, r1
 13a:	24 f0       	brlt	.+8      	; 0x144 <__vector_2+0x2e>
	{
		modeACP = 0;
 13c:	10 92 69 00 	sts	0x0069, r1
 140:	10 92 68 00 	sts	0x0068, r1
	}
}
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <ToggleACP>:

void ToggleACP(int en)
{
	//ADCSRA ^= (1<<ADEN);
	
	if (en == 0)
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	29 f4       	brne	.+10     	; 0x160 <ToggleACP+0xe>
	{
		PORTD = RED;
 156:	80 e2       	ldi	r24, 0x20	; 32
 158:	82 bb       	out	0x12, r24	; 18
// 		res = 0;
// 		volt = 0;
		ADCSRA = (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
 15a:	88 e6       	ldi	r24, 0x68	; 104
 15c:	86 b9       	out	0x06, r24	; 6
 15e:	08 95       	ret
	}
	else if (en == 1)
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	91 05       	cpc	r25, r1
 164:	21 f4       	brne	.+8      	; 0x16e <ToggleACP+0x1c>
	{
		PORTD = GREEN;	
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	82 bb       	out	0x12, r24	; 18
		ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
 16a:	88 ee       	ldi	r24, 0xE8	; 232
 16c:	86 b9       	out	0x06, r24	; 6
 16e:	08 95       	ret

00000170 <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	enACP++;
 192:	80 91 66 00 	lds	r24, 0x0066
 196:	90 91 67 00 	lds	r25, 0x0067
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 67 00 	sts	0x0067, r25
 1a0:	80 93 66 00 	sts	0x0066, r24
	if (enACP >= 2)
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	91 05       	cpc	r25, r1
 1a8:	24 f0       	brlt	.+8      	; 0x1b2 <__vector_1+0x42>
	{
		enACP = 0;
 1aa:	10 92 67 00 	sts	0x0067, r1
 1ae:	10 92 66 00 	sts	0x0066, r1
	}
	
	ToggleACP(enACP);
 1b2:	80 91 66 00 	lds	r24, 0x0066
 1b6:	90 91 67 00 	lds	r25, 0x0067
 1ba:	0e 94 a9 00 	call	0x152	; 0x152 <ToggleACP>
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	bf 91       	pop	r27
 1c4:	af 91       	pop	r26
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	7f 91       	pop	r23
 1cc:	6f 91       	pop	r22
 1ce:	5f 91       	pop	r21
 1d0:	4f 91       	pop	r20
 1d2:	3f 91       	pop	r19
 1d4:	2f 91       	pop	r18
 1d6:	0f 90       	pop	r0
 1d8:	0f be       	out	0x3f, r0	; 63
 1da:	0f 90       	pop	r0
 1dc:	1f 90       	pop	r1
 1de:	18 95       	reti

000001e0 <NumToArr>:
// 		
// 	}
}

void NumToArr(int numbr)
{	
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ee e6       	ldi	r30, 0x6E	; 110
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
// 	{
// 		
// 	}
}

void NumToArr(int numbr)
 1e8:	ef 01       	movw	r28, r30
 1ea:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
 1ec:	2a e0       	ldi	r18, 0x0A	; 10
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	b9 01       	movw	r22, r18
 1f2:	0e 94 a9 03 	call	0x752	; 0x752 <__divmodhi4>
 1f6:	81 93       	st	Z+, r24
 1f8:	91 93       	st	Z+, r25
		numbr /= 10;
 1fa:	86 2f       	mov	r24, r22
 1fc:	97 2f       	mov	r25, r23
// 	}
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
 1fe:	ec 17       	cp	r30, r28
 200:	fd 07       	cpc	r31, r29
 202:	b1 f7       	brne	.-20     	; 0x1f0 <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <SwitchACPMode>:
}


void SwitchACPMode(int mode)
{
	switch(mode)
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	91 05       	cpc	r25, r1
 20e:	39 f0       	breq	.+14     	; 0x21e <SwitchACPMode+0x14>
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	91 05       	cpc	r25, r1
 214:	69 f0       	breq	.+26     	; 0x230 <SwitchACPMode+0x26>
 216:	00 97       	sbiw	r24, 0x00	; 0
 218:	e1 f5       	brne	.+120    	; 0x292 <SwitchACPMode+0x88>
	{
		case 0: 
			DDRC = 0x0;
 21a:	14 ba       	out	0x14, r1	; 20
			break;
 21c:	08 95       	ret
		case 1:		
			DDRC = 0xFF;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	84 bb       	out	0x14, r24	; 20
			NumToArr(res);	
 222:	80 91 6a 00 	lds	r24, 0x006A
 226:	90 91 6b 00 	lds	r25, 0x006B
 22a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <NumToArr>
			break;			
 22e:	08 95       	ret
		case 2:
			DDRC = 0xFF;
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	84 bb       	out	0x14, r24	; 20
			volt = (float)((0.5 * res) / 1024) * 10000;
 234:	60 91 6a 00 	lds	r22, 0x006A
 238:	70 91 6b 00 	lds	r23, 0x006B
 23c:	88 27       	eor	r24, r24
 23e:	77 fd       	sbrc	r23, 7
 240:	80 95       	com	r24
 242:	98 2f       	mov	r25, r24
 244:	0e 94 ba 02 	call	0x574	; 0x574 <__floatsisf>
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	5f e3       	ldi	r21, 0x3F	; 63
 250:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	30 e0       	ldi	r19, 0x00	; 0
 258:	40 e8       	ldi	r20, 0x80	; 128
 25a:	5a e3       	ldi	r21, 0x3A	; 58
 25c:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e4       	ldi	r19, 0x40	; 64
 264:	4c e1       	ldi	r20, 0x1C	; 28
 266:	56 e4       	ldi	r21, 0x46	; 70
 268:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 26c:	26 2f       	mov	r18, r22
 26e:	37 2f       	mov	r19, r23
 270:	48 2f       	mov	r20, r24
 272:	59 2f       	mov	r21, r25
 274:	20 93 60 00 	sts	0x0060, r18
 278:	30 93 61 00 	sts	0x0061, r19
 27c:	40 93 62 00 	sts	0x0062, r20
 280:	50 93 63 00 	sts	0x0063, r21
 			NumToArr(volt);
 284:	0e 94 87 02 	call	0x50e	; 0x50e <__fixsfsi>
 288:	dc 01       	movw	r26, r24
 28a:	cb 01       	movw	r24, r22
 28c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <NumToArr>
			break;
 290:	08 95       	ret
		default:
			DDRC = 0x0;
 292:	14 ba       	out	0x14, r1	; 20
 294:	08 95       	ret

00000296 <UARTSend>:
	}
}

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
 296:	5d 9b       	sbis	0x0b, 5	; 11
 298:	fe cf       	rjmp	.-4      	; 0x296 <UARTSend>
	{
		;
	}		
	UDR = Value;
 29a:	8c b9       	out	0x0c, r24	; 12
}
 29c:	08 95       	ret

0000029e <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
 29e:	5f 9b       	sbis	0x0b, 7	; 11
 2a0:	fe cf       	rjmp	.-4      	; 0x29e <UARTReceive>
	{
		;
	}		
	return UDR; 
 2a2:	8c b1       	in	r24, 0x0c	; 12
}
 2a4:	08 95       	ret

000002a6 <SendString>:

void SendString(char* str)
{
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	ec 01       	movw	r28, r24
	while(*str != '\0')
 2ac:	88 81       	ld	r24, Y
 2ae:	88 23       	and	r24, r24
 2b0:	31 f0       	breq	.+12     	; 0x2be <SendString+0x18>
		;
	}		
	return UDR; 
}

void SendString(char* str)
 2b2:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
 2b4:	0e 94 4b 01 	call	0x296	; 0x296 <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
 2b8:	89 91       	ld	r24, Y+
 2ba:	88 23       	and	r24, r24
 2bc:	d9 f7       	brne	.-10     	; 0x2b4 <SendString+0xe>
	{
		UARTSend(*str);
		str++;
	}
	//UARTSend(*str);
	UARTSend('\r');
 2be:	8d e0       	ldi	r24, 0x0D	; 13
 2c0:	0e 94 4b 01 	call	0x296	; 0x296 <UARTSend>
	UARTSend('\n');
 2c4:	8a e0       	ldi	r24, 0x0A	; 10
 2c6:	0e 94 4b 01 	call	0x296	; 0x296 <UARTSend>
}
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <__vector_14>:
	
	//ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
}

ISR(ADC_vect)
{	
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ef 93       	push	r30
 2f4:	ff 93       	push	r31
	if (enACP == 0)
 2f6:	80 91 66 00 	lds	r24, 0x0066
 2fa:	90 91 67 00 	lds	r25, 0x0067
 2fe:	00 97       	sbiw	r24, 0x00	; 0
 300:	81 f4       	brne	.+32     	; 0x322 <__vector_14+0x52>
	{
		res = 0;
 302:	10 92 6b 00 	sts	0x006B, r1
 306:	10 92 6a 00 	sts	0x006A, r1
		volt = 0;
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	dc 01       	movw	r26, r24
 310:	80 93 60 00 	sts	0x0060, r24
 314:	90 93 61 00 	sts	0x0061, r25
 318:	a0 93 62 00 	sts	0x0062, r26
 31c:	b0 93 63 00 	sts	0x0063, r27
 320:	0f c0       	rjmp	.+30     	; 0x340 <__vector_14+0x70>
	}
	else 
	{
		res = ADCL;
 322:	24 b1       	in	r18, 0x04	; 4
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	30 93 6b 00 	sts	0x006B, r19
 32a:	20 93 6a 00 	sts	0x006A, r18
		res |= (ADCH << 8);
 32e:	45 b1       	in	r20, 0x05	; 5
 330:	94 2f       	mov	r25, r20
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	82 2b       	or	r24, r18
 336:	93 2b       	or	r25, r19
 338:	90 93 6b 00 	sts	0x006B, r25
 33c:	80 93 6a 00 	sts	0x006A, r24
	}
	itoa(res, string, 10);
 340:	c6 e7       	ldi	r28, 0x76	; 118
 342:	d0 e0       	ldi	r29, 0x00	; 0
 344:	80 91 6a 00 	lds	r24, 0x006A
 348:	90 91 6b 00 	lds	r25, 0x006B
 34c:	be 01       	movw	r22, r28
 34e:	4a e0       	ldi	r20, 0x0A	; 10
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <itoa>
 	SendString(string);	
 356:	ce 01       	movw	r24, r28
 358:	0e 94 53 01 	call	0x2a6	; 0x2a6 <SendString>
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	bf 91       	pop	r27
 366:	af 91       	pop	r26
 368:	9f 91       	pop	r25
 36a:	8f 91       	pop	r24
 36c:	7f 91       	pop	r23
 36e:	6f 91       	pop	r22
 370:	5f 91       	pop	r21
 372:	4f 91       	pop	r20
 374:	3f 91       	pop	r19
 376:	2f 91       	pop	r18
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 382:	84 30       	cpi	r24, 0x04	; 4
 384:	f9 f0       	breq	.+62     	; 0x3c4 <DecToDigit+0x42>
 386:	85 30       	cpi	r24, 0x05	; 5
 388:	48 f4       	brcc	.+18     	; 0x39c <DecToDigit+0x1a>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	49 f1       	breq	.+82     	; 0x3e0 <DecToDigit+0x5e>
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	98 f0       	brcs	.+38     	; 0x3b8 <DecToDigit+0x36>
 392:	82 30       	cpi	r24, 0x02	; 2
 394:	99 f0       	breq	.+38     	; 0x3bc <DecToDigit+0x3a>
 396:	83 30       	cpi	r24, 0x03	; 3
 398:	09 f5       	brne	.+66     	; 0x3dc <DecToDigit+0x5a>
 39a:	12 c0       	rjmp	.+36     	; 0x3c0 <DecToDigit+0x3e>
 39c:	87 30       	cpi	r24, 0x07	; 7
 39e:	c1 f0       	breq	.+48     	; 0x3d0 <DecToDigit+0x4e>
 3a0:	88 30       	cpi	r24, 0x08	; 8
 3a2:	28 f4       	brcc	.+10     	; 0x3ae <DecToDigit+0x2c>
 3a4:	85 30       	cpi	r24, 0x05	; 5
 3a6:	81 f0       	breq	.+32     	; 0x3c8 <DecToDigit+0x46>
 3a8:	86 30       	cpi	r24, 0x06	; 6
 3aa:	c1 f4       	brne	.+48     	; 0x3dc <DecToDigit+0x5a>
 3ac:	0f c0       	rjmp	.+30     	; 0x3cc <DecToDigit+0x4a>
 3ae:	88 30       	cpi	r24, 0x08	; 8
 3b0:	89 f0       	breq	.+34     	; 0x3d4 <DecToDigit+0x52>
 3b2:	89 30       	cpi	r24, 0x09	; 9
 3b4:	99 f4       	brne	.+38     	; 0x3dc <DecToDigit+0x5a>
 3b6:	10 c0       	rjmp	.+32     	; 0x3d8 <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 3b8:	8f e5       	ldi	r24, 0x5F	; 95
 3ba:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 3bc:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 3be:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 3c0:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 3c2:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 3c4:	86 e6       	ldi	r24, 0x66	; 102
			break;
 3c6:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 3c8:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 3ca:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 3cc:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 3ce:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 3d0:	87 e0       	ldi	r24, 0x07	; 7
			break;
 3d2:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 3d4:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 3d6:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 3d8:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 3da:	08 95       	ret
		default:
			Digit = 0b00000000;
 3dc:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 3de:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 3e0:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
 3e2:	08 95       	ret

000003e4 <__vector_3>:
// 		res |= (ADCH << 8);
// 	}
// }

ISR(TIMER2_COMP_vect)
{	
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	2f 93       	push	r18
 3f0:	3f 93       	push	r19
 3f2:	4f 93       	push	r20
 3f4:	5f 93       	push	r21
 3f6:	6f 93       	push	r22
 3f8:	7f 93       	push	r23
 3fa:	8f 93       	push	r24
 3fc:	9f 93       	push	r25
 3fe:	af 93       	push	r26
 400:	bf 93       	push	r27
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	ef 93       	push	r30
 408:	ff 93       	push	r31
	PORTC = 0x00;
 40a:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 40c:	1b ba       	out	0x1b, r1	; 27
	//DDRD = 0xB0;
	
// 	itoa(volt, string, 10);
// 	SendString(string);
	
	if (modeACP != 0)
 40e:	80 91 68 00 	lds	r24, 0x0068
 412:	90 91 69 00 	lds	r25, 0x0069
 416:	00 97       	sbiw	r24, 0x00	; 0
 418:	09 f4       	brne	.+2      	; 0x41c <__vector_3+0x38>
 41a:	66 c0       	rjmp	.+204    	; 0x4e8 <__stack+0x89>
	{
		if (modeACP == 1)
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	91 05       	cpc	r25, r1
 420:	39 f4       	brne	.+14     	; 0x430 <__vector_3+0x4c>
		{
			NumToArr(res);
 422:	80 91 6a 00 	lds	r24, 0x006A
 426:	90 91 6b 00 	lds	r25, 0x006B
 42a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <NumToArr>
 42e:	31 c0       	rjmp	.+98     	; 0x492 <__stack+0x33>
		}
		else if (modeACP == 2)
 430:	82 30       	cpi	r24, 0x02	; 2
 432:	91 05       	cpc	r25, r1
 434:	71 f5       	brne	.+92     	; 0x492 <__stack+0x33>
		{
			volt = (float)((0.5 * res) / 1024) * 10000;
 436:	60 91 6a 00 	lds	r22, 0x006A
 43a:	70 91 6b 00 	lds	r23, 0x006B
 43e:	88 27       	eor	r24, r24
 440:	77 fd       	sbrc	r23, 7
 442:	80 95       	com	r24
 444:	98 2f       	mov	r25, r24
 446:	0e 94 ba 02 	call	0x574	; 0x574 <__floatsisf>
 44a:	20 e0       	ldi	r18, 0x00	; 0
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	5f e3       	ldi	r21, 0x3F	; 63
 452:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 456:	20 e0       	ldi	r18, 0x00	; 0
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	40 e8       	ldi	r20, 0x80	; 128
 45c:	5a e3       	ldi	r21, 0x3A	; 58
 45e:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 462:	20 e0       	ldi	r18, 0x00	; 0
 464:	30 e4       	ldi	r19, 0x40	; 64
 466:	4c e1       	ldi	r20, 0x1C	; 28
 468:	56 e4       	ldi	r21, 0x46	; 70
 46a:	0e 94 1e 03 	call	0x63c	; 0x63c <__mulsf3>
 46e:	26 2f       	mov	r18, r22
 470:	37 2f       	mov	r19, r23
 472:	48 2f       	mov	r20, r24
 474:	59 2f       	mov	r21, r25
 476:	20 93 60 00 	sts	0x0060, r18
 47a:	30 93 61 00 	sts	0x0061, r19
 47e:	40 93 62 00 	sts	0x0062, r20
 482:	50 93 63 00 	sts	0x0063, r21
			NumToArr(volt);
 486:	0e 94 87 02 	call	0x50e	; 0x50e <__fixsfsi>
 48a:	dc 01       	movw	r26, r24
 48c:	cb 01       	movw	r24, r22
 48e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <NumToArr>
		}
		
		PORTC = DecToDigit(arr[j]);
 492:	c0 91 6c 00 	lds	r28, 0x006C
 496:	d0 91 6d 00 	lds	r29, 0x006D
 49a:	fe 01       	movw	r30, r28
 49c:	ee 0f       	add	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	e2 59       	subi	r30, 0x92	; 146
 4a2:	ff 4f       	sbci	r31, 0xFF	; 255
 4a4:	80 81       	ld	r24, Z
 4a6:	0e 94 c1 01 	call	0x382	; 0x382 <DecToDigit>
 4aa:	85 bb       	out	0x15, r24	; 21
		PORTA = (1 << (7 - j));	
 4ac:	87 e0       	ldi	r24, 0x07	; 7
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	8c 1b       	sub	r24, r28
 4b2:	9d 0b       	sbc	r25, r29
 4b4:	21 e0       	ldi	r18, 0x01	; 1
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	a9 01       	movw	r20, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__stack+0x61>
 4bc:	44 0f       	add	r20, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	8a 95       	dec	r24
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__stack+0x5d>
 4c4:	4b bb       	out	0x1b, r20	; 27
	
		if (j == 3)
 4c6:	c3 30       	cpi	r28, 0x03	; 3
 4c8:	d1 05       	cpc	r29, r1
 4ca:	09 f4       	brne	.+2      	; 0x4ce <__stack+0x6f>
		{
			PINC |= 0b10000000;	
 4cc:	9f 9a       	sbi	0x13, 7	; 19
		}	
	
		j++;
 4ce:	80 91 6c 00 	lds	r24, 0x006C
 4d2:	90 91 6d 00 	lds	r25, 0x006D
 4d6:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
 4d8:	64 e0       	ldi	r22, 0x04	; 4
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	0e 94 a9 03 	call	0x752	; 0x752 <__divmodhi4>
 4e0:	90 93 6d 00 	sts	0x006D, r25
 4e4:	80 93 6c 00 	sts	0x006C, r24
	}
	
}
 4e8:	ff 91       	pop	r31
 4ea:	ef 91       	pop	r30
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	bf 91       	pop	r27
 4f2:	af 91       	pop	r26
 4f4:	9f 91       	pop	r25
 4f6:	8f 91       	pop	r24
 4f8:	7f 91       	pop	r23
 4fa:	6f 91       	pop	r22
 4fc:	5f 91       	pop	r21
 4fe:	4f 91       	pop	r20
 500:	3f 91       	pop	r19
 502:	2f 91       	pop	r18
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	1f 90       	pop	r1
 50c:	18 95       	reti

0000050e <__fixsfsi>:
 50e:	04 d0       	rcall	.+8      	; 0x518 <__fixunssfsi>
 510:	68 94       	set
 512:	b1 11       	cpse	r27, r1
 514:	8d c0       	rjmp	.+282    	; 0x630 <__fp_szero>
 516:	08 95       	ret

00000518 <__fixunssfsi>:
 518:	70 d0       	rcall	.+224    	; 0x5fa <__fp_splitA>
 51a:	88 f0       	brcs	.+34     	; 0x53e <__fixunssfsi+0x26>
 51c:	9f 57       	subi	r25, 0x7F	; 127
 51e:	90 f0       	brcs	.+36     	; 0x544 <__fixunssfsi+0x2c>
 520:	b9 2f       	mov	r27, r25
 522:	99 27       	eor	r25, r25
 524:	b7 51       	subi	r27, 0x17	; 23
 526:	a0 f0       	brcs	.+40     	; 0x550 <__fixunssfsi+0x38>
 528:	d1 f0       	breq	.+52     	; 0x55e <__fixunssfsi+0x46>
 52a:	66 0f       	add	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	88 1f       	adc	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	1a f0       	brmi	.+6      	; 0x53a <__fixunssfsi+0x22>
 534:	ba 95       	dec	r27
 536:	c9 f7       	brne	.-14     	; 0x52a <__fixunssfsi+0x12>
 538:	12 c0       	rjmp	.+36     	; 0x55e <__fixunssfsi+0x46>
 53a:	b1 30       	cpi	r27, 0x01	; 1
 53c:	81 f0       	breq	.+32     	; 0x55e <__fixunssfsi+0x46>
 53e:	77 d0       	rcall	.+238    	; 0x62e <__fp_zero>
 540:	b1 e0       	ldi	r27, 0x01	; 1
 542:	08 95       	ret
 544:	74 c0       	rjmp	.+232    	; 0x62e <__fp_zero>
 546:	67 2f       	mov	r22, r23
 548:	78 2f       	mov	r23, r24
 54a:	88 27       	eor	r24, r24
 54c:	b8 5f       	subi	r27, 0xF8	; 248
 54e:	39 f0       	breq	.+14     	; 0x55e <__fixunssfsi+0x46>
 550:	b9 3f       	cpi	r27, 0xF9	; 249
 552:	cc f3       	brlt	.-14     	; 0x546 <__fixunssfsi+0x2e>
 554:	86 95       	lsr	r24
 556:	77 95       	ror	r23
 558:	67 95       	ror	r22
 55a:	b3 95       	inc	r27
 55c:	d9 f7       	brne	.-10     	; 0x554 <__fixunssfsi+0x3c>
 55e:	3e f4       	brtc	.+14     	; 0x56e <__fixunssfsi+0x56>
 560:	90 95       	com	r25
 562:	80 95       	com	r24
 564:	70 95       	com	r23
 566:	61 95       	neg	r22
 568:	7f 4f       	sbci	r23, 0xFF	; 255
 56a:	8f 4f       	sbci	r24, 0xFF	; 255
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	08 95       	ret

00000570 <__floatunsisf>:
 570:	e8 94       	clt
 572:	09 c0       	rjmp	.+18     	; 0x586 <__floatsisf+0x12>

00000574 <__floatsisf>:
 574:	97 fb       	bst	r25, 7
 576:	3e f4       	brtc	.+14     	; 0x586 <__floatsisf+0x12>
 578:	90 95       	com	r25
 57a:	80 95       	com	r24
 57c:	70 95       	com	r23
 57e:	61 95       	neg	r22
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	99 23       	and	r25, r25
 588:	a9 f0       	breq	.+42     	; 0x5b4 <__floatsisf+0x40>
 58a:	f9 2f       	mov	r31, r25
 58c:	96 e9       	ldi	r25, 0x96	; 150
 58e:	bb 27       	eor	r27, r27
 590:	93 95       	inc	r25
 592:	f6 95       	lsr	r31
 594:	87 95       	ror	r24
 596:	77 95       	ror	r23
 598:	67 95       	ror	r22
 59a:	b7 95       	ror	r27
 59c:	f1 11       	cpse	r31, r1
 59e:	f8 cf       	rjmp	.-16     	; 0x590 <__floatsisf+0x1c>
 5a0:	fa f4       	brpl	.+62     	; 0x5e0 <__floatsisf+0x6c>
 5a2:	bb 0f       	add	r27, r27
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__floatsisf+0x36>
 5a6:	60 ff       	sbrs	r22, 0
 5a8:	1b c0       	rjmp	.+54     	; 0x5e0 <__floatsisf+0x6c>
 5aa:	6f 5f       	subi	r22, 0xFF	; 255
 5ac:	7f 4f       	sbci	r23, 0xFF	; 255
 5ae:	8f 4f       	sbci	r24, 0xFF	; 255
 5b0:	9f 4f       	sbci	r25, 0xFF	; 255
 5b2:	16 c0       	rjmp	.+44     	; 0x5e0 <__floatsisf+0x6c>
 5b4:	88 23       	and	r24, r24
 5b6:	11 f0       	breq	.+4      	; 0x5bc <__floatsisf+0x48>
 5b8:	96 e9       	ldi	r25, 0x96	; 150
 5ba:	11 c0       	rjmp	.+34     	; 0x5de <__floatsisf+0x6a>
 5bc:	77 23       	and	r23, r23
 5be:	21 f0       	breq	.+8      	; 0x5c8 <__floatsisf+0x54>
 5c0:	9e e8       	ldi	r25, 0x8E	; 142
 5c2:	87 2f       	mov	r24, r23
 5c4:	76 2f       	mov	r23, r22
 5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <__floatsisf+0x5e>
 5c8:	66 23       	and	r22, r22
 5ca:	71 f0       	breq	.+28     	; 0x5e8 <__floatsisf+0x74>
 5cc:	96 e8       	ldi	r25, 0x86	; 134
 5ce:	86 2f       	mov	r24, r22
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	2a f0       	brmi	.+10     	; 0x5e0 <__floatsisf+0x6c>
 5d6:	9a 95       	dec	r25
 5d8:	66 0f       	add	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	da f7       	brpl	.-10     	; 0x5d6 <__floatsisf+0x62>
 5e0:	88 0f       	add	r24, r24
 5e2:	96 95       	lsr	r25
 5e4:	87 95       	ror	r24
 5e6:	97 f9       	bld	r25, 7
 5e8:	08 95       	ret

000005ea <__fp_split3>:
 5ea:	57 fd       	sbrc	r21, 7
 5ec:	90 58       	subi	r25, 0x80	; 128
 5ee:	44 0f       	add	r20, r20
 5f0:	55 1f       	adc	r21, r21
 5f2:	59 f0       	breq	.+22     	; 0x60a <__fp_splitA+0x10>
 5f4:	5f 3f       	cpi	r21, 0xFF	; 255
 5f6:	71 f0       	breq	.+28     	; 0x614 <__fp_splitA+0x1a>
 5f8:	47 95       	ror	r20

000005fa <__fp_splitA>:
 5fa:	88 0f       	add	r24, r24
 5fc:	97 fb       	bst	r25, 7
 5fe:	99 1f       	adc	r25, r25
 600:	61 f0       	breq	.+24     	; 0x61a <__fp_splitA+0x20>
 602:	9f 3f       	cpi	r25, 0xFF	; 255
 604:	79 f0       	breq	.+30     	; 0x624 <__fp_splitA+0x2a>
 606:	87 95       	ror	r24
 608:	08 95       	ret
 60a:	12 16       	cp	r1, r18
 60c:	13 06       	cpc	r1, r19
 60e:	14 06       	cpc	r1, r20
 610:	55 1f       	adc	r21, r21
 612:	f2 cf       	rjmp	.-28     	; 0x5f8 <__fp_split3+0xe>
 614:	46 95       	lsr	r20
 616:	f1 df       	rcall	.-30     	; 0x5fa <__fp_splitA>
 618:	08 c0       	rjmp	.+16     	; 0x62a <__fp_splitA+0x30>
 61a:	16 16       	cp	r1, r22
 61c:	17 06       	cpc	r1, r23
 61e:	18 06       	cpc	r1, r24
 620:	99 1f       	adc	r25, r25
 622:	f1 cf       	rjmp	.-30     	; 0x606 <__fp_splitA+0xc>
 624:	86 95       	lsr	r24
 626:	71 05       	cpc	r23, r1
 628:	61 05       	cpc	r22, r1
 62a:	08 94       	sec
 62c:	08 95       	ret

0000062e <__fp_zero>:
 62e:	e8 94       	clt

00000630 <__fp_szero>:
 630:	bb 27       	eor	r27, r27
 632:	66 27       	eor	r22, r22
 634:	77 27       	eor	r23, r23
 636:	cb 01       	movw	r24, r22
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__mulsf3>:
 63c:	0b d0       	rcall	.+22     	; 0x654 <__mulsf3x>
 63e:	78 c0       	rjmp	.+240    	; 0x730 <__fp_round>
 640:	69 d0       	rcall	.+210    	; 0x714 <__fp_pscA>
 642:	28 f0       	brcs	.+10     	; 0x64e <__mulsf3+0x12>
 644:	6e d0       	rcall	.+220    	; 0x722 <__fp_pscB>
 646:	18 f0       	brcs	.+6      	; 0x64e <__mulsf3+0x12>
 648:	95 23       	and	r25, r21
 64a:	09 f0       	breq	.+2      	; 0x64e <__mulsf3+0x12>
 64c:	5a c0       	rjmp	.+180    	; 0x702 <__fp_inf>
 64e:	5f c0       	rjmp	.+190    	; 0x70e <__fp_nan>
 650:	11 24       	eor	r1, r1
 652:	ee cf       	rjmp	.-36     	; 0x630 <__fp_szero>

00000654 <__mulsf3x>:
 654:	ca df       	rcall	.-108    	; 0x5ea <__fp_split3>
 656:	a0 f3       	brcs	.-24     	; 0x640 <__mulsf3+0x4>

00000658 <__mulsf3_pse>:
 658:	95 9f       	mul	r25, r21
 65a:	d1 f3       	breq	.-12     	; 0x650 <__mulsf3+0x14>
 65c:	95 0f       	add	r25, r21
 65e:	50 e0       	ldi	r21, 0x00	; 0
 660:	55 1f       	adc	r21, r21
 662:	62 9f       	mul	r22, r18
 664:	f0 01       	movw	r30, r0
 666:	72 9f       	mul	r23, r18
 668:	bb 27       	eor	r27, r27
 66a:	f0 0d       	add	r31, r0
 66c:	b1 1d       	adc	r27, r1
 66e:	63 9f       	mul	r22, r19
 670:	aa 27       	eor	r26, r26
 672:	f0 0d       	add	r31, r0
 674:	b1 1d       	adc	r27, r1
 676:	aa 1f       	adc	r26, r26
 678:	64 9f       	mul	r22, r20
 67a:	66 27       	eor	r22, r22
 67c:	b0 0d       	add	r27, r0
 67e:	a1 1d       	adc	r26, r1
 680:	66 1f       	adc	r22, r22
 682:	82 9f       	mul	r24, r18
 684:	22 27       	eor	r18, r18
 686:	b0 0d       	add	r27, r0
 688:	a1 1d       	adc	r26, r1
 68a:	62 1f       	adc	r22, r18
 68c:	73 9f       	mul	r23, r19
 68e:	b0 0d       	add	r27, r0
 690:	a1 1d       	adc	r26, r1
 692:	62 1f       	adc	r22, r18
 694:	83 9f       	mul	r24, r19
 696:	a0 0d       	add	r26, r0
 698:	61 1d       	adc	r22, r1
 69a:	22 1f       	adc	r18, r18
 69c:	74 9f       	mul	r23, r20
 69e:	33 27       	eor	r19, r19
 6a0:	a0 0d       	add	r26, r0
 6a2:	61 1d       	adc	r22, r1
 6a4:	23 1f       	adc	r18, r19
 6a6:	84 9f       	mul	r24, r20
 6a8:	60 0d       	add	r22, r0
 6aa:	21 1d       	adc	r18, r1
 6ac:	82 2f       	mov	r24, r18
 6ae:	76 2f       	mov	r23, r22
 6b0:	6a 2f       	mov	r22, r26
 6b2:	11 24       	eor	r1, r1
 6b4:	9f 57       	subi	r25, 0x7F	; 127
 6b6:	50 40       	sbci	r21, 0x00	; 0
 6b8:	8a f0       	brmi	.+34     	; 0x6dc <__mulsf3_pse+0x84>
 6ba:	e1 f0       	breq	.+56     	; 0x6f4 <__mulsf3_pse+0x9c>
 6bc:	88 23       	and	r24, r24
 6be:	4a f0       	brmi	.+18     	; 0x6d2 <__mulsf3_pse+0x7a>
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	bb 1f       	adc	r27, r27
 6c6:	66 1f       	adc	r22, r22
 6c8:	77 1f       	adc	r23, r23
 6ca:	88 1f       	adc	r24, r24
 6cc:	91 50       	subi	r25, 0x01	; 1
 6ce:	50 40       	sbci	r21, 0x00	; 0
 6d0:	a9 f7       	brne	.-22     	; 0x6bc <__mulsf3_pse+0x64>
 6d2:	9e 3f       	cpi	r25, 0xFE	; 254
 6d4:	51 05       	cpc	r21, r1
 6d6:	70 f0       	brcs	.+28     	; 0x6f4 <__mulsf3_pse+0x9c>
 6d8:	14 c0       	rjmp	.+40     	; 0x702 <__fp_inf>
 6da:	aa cf       	rjmp	.-172    	; 0x630 <__fp_szero>
 6dc:	5f 3f       	cpi	r21, 0xFF	; 255
 6de:	ec f3       	brlt	.-6      	; 0x6da <__mulsf3_pse+0x82>
 6e0:	98 3e       	cpi	r25, 0xE8	; 232
 6e2:	dc f3       	brlt	.-10     	; 0x6da <__mulsf3_pse+0x82>
 6e4:	86 95       	lsr	r24
 6e6:	77 95       	ror	r23
 6e8:	67 95       	ror	r22
 6ea:	b7 95       	ror	r27
 6ec:	f7 95       	ror	r31
 6ee:	e7 95       	ror	r30
 6f0:	9f 5f       	subi	r25, 0xFF	; 255
 6f2:	c1 f7       	brne	.-16     	; 0x6e4 <__mulsf3_pse+0x8c>
 6f4:	fe 2b       	or	r31, r30
 6f6:	88 0f       	add	r24, r24
 6f8:	91 1d       	adc	r25, r1
 6fa:	96 95       	lsr	r25
 6fc:	87 95       	ror	r24
 6fe:	97 f9       	bld	r25, 7
 700:	08 95       	ret

00000702 <__fp_inf>:
 702:	97 f9       	bld	r25, 7
 704:	9f 67       	ori	r25, 0x7F	; 127
 706:	80 e8       	ldi	r24, 0x80	; 128
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	08 95       	ret

0000070e <__fp_nan>:
 70e:	9f ef       	ldi	r25, 0xFF	; 255
 710:	80 ec       	ldi	r24, 0xC0	; 192
 712:	08 95       	ret

00000714 <__fp_pscA>:
 714:	00 24       	eor	r0, r0
 716:	0a 94       	dec	r0
 718:	16 16       	cp	r1, r22
 71a:	17 06       	cpc	r1, r23
 71c:	18 06       	cpc	r1, r24
 71e:	09 06       	cpc	r0, r25
 720:	08 95       	ret

00000722 <__fp_pscB>:
 722:	00 24       	eor	r0, r0
 724:	0a 94       	dec	r0
 726:	12 16       	cp	r1, r18
 728:	13 06       	cpc	r1, r19
 72a:	14 06       	cpc	r1, r20
 72c:	05 06       	cpc	r0, r21
 72e:	08 95       	ret

00000730 <__fp_round>:
 730:	09 2e       	mov	r0, r25
 732:	03 94       	inc	r0
 734:	00 0c       	add	r0, r0
 736:	11 f4       	brne	.+4      	; 0x73c <__fp_round+0xc>
 738:	88 23       	and	r24, r24
 73a:	52 f0       	brmi	.+20     	; 0x750 <__fp_round+0x20>
 73c:	bb 0f       	add	r27, r27
 73e:	40 f4       	brcc	.+16     	; 0x750 <__fp_round+0x20>
 740:	bf 2b       	or	r27, r31
 742:	11 f4       	brne	.+4      	; 0x748 <__fp_round+0x18>
 744:	60 ff       	sbrs	r22, 0
 746:	04 c0       	rjmp	.+8      	; 0x750 <__fp_round+0x20>
 748:	6f 5f       	subi	r22, 0xFF	; 255
 74a:	7f 4f       	sbci	r23, 0xFF	; 255
 74c:	8f 4f       	sbci	r24, 0xFF	; 255
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	08 95       	ret

00000752 <__divmodhi4>:
 752:	97 fb       	bst	r25, 7
 754:	09 2e       	mov	r0, r25
 756:	07 26       	eor	r0, r23
 758:	0a d0       	rcall	.+20     	; 0x76e <__divmodhi4_neg1>
 75a:	77 fd       	sbrc	r23, 7
 75c:	04 d0       	rcall	.+8      	; 0x766 <__divmodhi4_neg2>
 75e:	0c d0       	rcall	.+24     	; 0x778 <__udivmodhi4>
 760:	06 d0       	rcall	.+12     	; 0x76e <__divmodhi4_neg1>
 762:	00 20       	and	r0, r0
 764:	1a f4       	brpl	.+6      	; 0x76c <__divmodhi4_exit>

00000766 <__divmodhi4_neg2>:
 766:	70 95       	com	r23
 768:	61 95       	neg	r22
 76a:	7f 4f       	sbci	r23, 0xFF	; 255

0000076c <__divmodhi4_exit>:
 76c:	08 95       	ret

0000076e <__divmodhi4_neg1>:
 76e:	f6 f7       	brtc	.-4      	; 0x76c <__divmodhi4_exit>
 770:	90 95       	com	r25
 772:	81 95       	neg	r24
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	08 95       	ret

00000778 <__udivmodhi4>:
 778:	aa 1b       	sub	r26, r26
 77a:	bb 1b       	sub	r27, r27
 77c:	51 e1       	ldi	r21, 0x11	; 17
 77e:	07 c0       	rjmp	.+14     	; 0x78e <__udivmodhi4_ep>

00000780 <__udivmodhi4_loop>:
 780:	aa 1f       	adc	r26, r26
 782:	bb 1f       	adc	r27, r27
 784:	a6 17       	cp	r26, r22
 786:	b7 07       	cpc	r27, r23
 788:	10 f0       	brcs	.+4      	; 0x78e <__udivmodhi4_ep>
 78a:	a6 1b       	sub	r26, r22
 78c:	b7 0b       	sbc	r27, r23

0000078e <__udivmodhi4_ep>:
 78e:	88 1f       	adc	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	5a 95       	dec	r21
 794:	a9 f7       	brne	.-22     	; 0x780 <__udivmodhi4_loop>
 796:	80 95       	com	r24
 798:	90 95       	com	r25
 79a:	bc 01       	movw	r22, r24
 79c:	cd 01       	movw	r24, r26
 79e:	08 95       	ret

000007a0 <itoa>:
 7a0:	fb 01       	movw	r30, r22
 7a2:	9f 01       	movw	r18, r30
 7a4:	e8 94       	clt
 7a6:	42 30       	cpi	r20, 0x02	; 2
 7a8:	c4 f0       	brlt	.+48     	; 0x7da <itoa+0x3a>
 7aa:	45 32       	cpi	r20, 0x25	; 37
 7ac:	b4 f4       	brge	.+44     	; 0x7da <itoa+0x3a>
 7ae:	4a 30       	cpi	r20, 0x0A	; 10
 7b0:	29 f4       	brne	.+10     	; 0x7bc <itoa+0x1c>
 7b2:	97 fb       	bst	r25, 7
 7b4:	1e f4       	brtc	.+6      	; 0x7bc <itoa+0x1c>
 7b6:	90 95       	com	r25
 7b8:	81 95       	neg	r24
 7ba:	9f 4f       	sbci	r25, 0xFF	; 255
 7bc:	64 2f       	mov	r22, r20
 7be:	77 27       	eor	r23, r23
 7c0:	0e 94 bc 03 	call	0x778	; 0x778 <__udivmodhi4>
 7c4:	80 5d       	subi	r24, 0xD0	; 208
 7c6:	8a 33       	cpi	r24, 0x3A	; 58
 7c8:	0c f0       	brlt	.+2      	; 0x7cc <itoa+0x2c>
 7ca:	89 5d       	subi	r24, 0xD9	; 217
 7cc:	81 93       	st	Z+, r24
 7ce:	cb 01       	movw	r24, r22
 7d0:	00 97       	sbiw	r24, 0x00	; 0
 7d2:	a1 f7       	brne	.-24     	; 0x7bc <itoa+0x1c>
 7d4:	16 f4       	brtc	.+4      	; 0x7da <itoa+0x3a>
 7d6:	5d e2       	ldi	r21, 0x2D	; 45
 7d8:	51 93       	st	Z+, r21
 7da:	10 82       	st	Z, r1
 7dc:	c9 01       	movw	r24, r18
 7de:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <strrev>

000007e2 <strrev>:
 7e2:	dc 01       	movw	r26, r24
 7e4:	fc 01       	movw	r30, r24
 7e6:	67 2f       	mov	r22, r23
 7e8:	71 91       	ld	r23, Z+
 7ea:	77 23       	and	r23, r23
 7ec:	e1 f7       	brne	.-8      	; 0x7e6 <strrev+0x4>
 7ee:	32 97       	sbiw	r30, 0x02	; 2
 7f0:	04 c0       	rjmp	.+8      	; 0x7fa <strrev+0x18>
 7f2:	7c 91       	ld	r23, X
 7f4:	6d 93       	st	X+, r22
 7f6:	70 83       	st	Z, r23
 7f8:	62 91       	ld	r22, -Z
 7fa:	ae 17       	cp	r26, r30
 7fc:	bf 07       	cpc	r27, r31
 7fe:	c8 f3       	brcs	.-14     	; 0x7f2 <strrev+0x10>
 800:	08 95       	ret

00000802 <_exit>:
 802:	f8 94       	cli

00000804 <__stop_program>:
 804:	ff cf       	rjmp	.-2      	; 0x804 <__stop_program>
