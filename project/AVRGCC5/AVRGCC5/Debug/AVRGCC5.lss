
AVRGCC5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000778  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000778  0000080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009c  0080006a  0080006a  00000816  2**0
                  ALLOC
  3 .stab         00001b54  00000000  00000000  00000818  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000764  00000000  00000000  0000236c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000182  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000005c2  00000000  00000000  00002c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001ed  00000000  00000000  00003234  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000561  00000000  00000000  00003421  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f0  00000000  00000000  00003984  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000019f  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001cb  00000000  00000000  00003c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000001e  00000000  00000000  00003dde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 30       	cpi	r26, 0x06	; 6
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  8a:	0c 94 ba 03 	jmp	0x774	; 0x774 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerInit>:
	}	
}

void TimerInit()
{
	MCUCR = 0x0F;
  92:	8f e0       	ldi	r24, 0x0F	; 15
  94:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	8b bf       	out	0x3b, r24	; 59

	//TIMER2
// 	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
// 	OCR2 = 10;
// 	TIMSK |= (1 << OCIE2);
}
  9a:	08 95       	ret

0000009c <ACPInit>:

void ACPInit()
{
	ADMUX |= (1<<REFS0) | (1<<MUX1); 
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	82 64       	ori	r24, 0x42	; 66
  a0:	87 b9       	out	0x07, r24	; 7
//	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
	ADCSRA |= (1<<ADEN) | (1<<ADIE);
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	88 68       	ori	r24, 0x88	; 136
  a6:	86 b9       	out	0x06, r24	; 6
}
  a8:	08 95       	ret

000000aa <__vector_1>:
	
	SendString(string);
}

ISR(INT0_vect) // RESET
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
	int numOfSamp = 0;
	int treshold = 0;
	char acpMode = '0';
	char workingMode = '0';
	char command = '0';
}
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <UARTSend>:

void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <UARTSend>
	{
				
	}		
	UDR = Value;
  c2:	8c b9       	out	0x0c, r24	; 12
}
  c4:	08 95       	ret

000000c6 <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <UARTReceive>
	{
		
	}		
	return UDR; 
  ca:	8c b1       	in	r24, 0x0c	; 12
}
  cc:	08 95       	ret

000000ce <Start>:
	}			
}

void Start()
{
	while (UARTReceive() != '3')
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <Start+0x4>
	{
		ADCSRA |= (1<<ADSC);
  d0:	36 9a       	sbi	0x06, 6	; 6
	}			
}

void Start()
{
	while (UARTReceive() != '3')
  d2:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
  d6:	83 33       	cpi	r24, 0x33	; 51
  d8:	d9 f7       	brne	.-10     	; 0xd0 <Start+0x2>
	{
		ADCSRA |= (1<<ADSC);
	}	
}
  da:	08 95       	ret

000000dc <main>:
char workingMode = '0';
char command = '0';


int main(void)
{
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
	DDRA = 0xF0;
  e8:	80 ef       	ldi	r24, 0xF0	; 240
  ea:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2 | RED | GREEN;
  f0:	91 b3       	in	r25, 0x11	; 17
  f2:	9c 6a       	ori	r25, 0xAC	; 172
  f4:	91 bb       	out	0x11, r25	; 17

 	DDRD |= 0xFF;
  f6:	91 b3       	in	r25, 0x11	; 17
  f8:	81 bb       	out	0x11, r24	; 17
 	MCUCR = 0x0F;
  fa:	8f e0       	ldi	r24, 0x0F	; 15
  fc:	85 bf       	out	0x35, r24	; 53
 	GICR = 0xC0;
  fe:	80 ec       	ldi	r24, 0xC0	; 192
 100:	8b bf       	out	0x3b, r24	; 59
	
	PORTA = 0x00;
 102:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 104:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
 106:	12 ba       	out	0x12, r1	; 18
	
	UCSRA = 0x00;
 108:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 10a:	8a b1       	in	r24, 0x0a	; 10
 10c:	88 61       	ori	r24, 0x18	; 24
 10e:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 110:	80 b5       	in	r24, 0x20	; 32
 112:	86 68       	ori	r24, 0x86	; 134
 114:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;  
 116:	89 e1       	ldi	r24, 0x19	; 25
 118:	89 b9       	out	0x09, r24	; 9
		
// 	TimerInit();
 	ACPInit();
 11a:	0e 94 4e 00 	call	0x9c	; 0x9c <ACPInit>

	sei();
 11e:	78 94       	sei
				
			//UARTSend('\0');	
// 			itoa(numOfSamp, string, 10);
// 			SendString(string);
		}
		else if (type == 't') // THESHOLD (1 - 1022)
 120:	0f 2e       	mov	r0, r31
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	ef 2e       	mov	r14, r31
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	ff 2e       	mov	r15, r31
 12a:	f0 2d       	mov	r31, r0
char acpMode = '0';
char workingMode = '0';
char command = '0';


int main(void)
 12c:	87 01       	movw	r16, r14
 12e:	0c 5f       	subi	r16, 0xFC	; 252
 130:	1f 4f       	sbci	r17, 0xFF	; 255
// 		{
// 			command = UARTReceive();
// 		}
// 		else if (command == '0')
// 		{
		type = UARTReceive();
 132:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 136:	80 93 72 00 	sts	0x0072, r24
		if (type == 'n') // NUMBER OF SAMPLES (1 - 9999)
 13a:	8e 36       	cpi	r24, 0x6E	; 110
 13c:	79 f4       	brne	.+30     	; 0x15c <main+0x80>
 13e:	e7 01       	movw	r28, r14
		{								
			for (int i = 0; i < 4; i++)
			{					
				resc[i] = UARTReceive();
 140:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 144:	89 93       	st	Y+, r24
// 		else if (command == '0')
// 		{
		type = UARTReceive();
		if (type == 'n') // NUMBER OF SAMPLES (1 - 9999)
		{								
			for (int i = 0; i < 4; i++)
 146:	c0 17       	cp	r28, r16
 148:	d1 07       	cpc	r29, r17
 14a:	d1 f7       	brne	.-12     	; 0x140 <main+0x64>
			{					
				resc[i] = UARTReceive();
			}
			numOfSamp = atoi(resc);	
 14c:	c7 01       	movw	r24, r14
 14e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <atoi>
 152:	90 93 74 00 	sts	0x0074, r25
 156:	80 93 73 00 	sts	0x0073, r24
 15a:	28 c0       	rjmp	.+80     	; 0x1ac <main+0xd0>
				
			//UARTSend('\0');	
// 			itoa(numOfSamp, string, 10);
// 			SendString(string);
		}
		else if (type == 't') // THESHOLD (1 - 1022)
 15c:	84 37       	cpi	r24, 0x74	; 116
 15e:	79 f4       	brne	.+30     	; 0x17e <main+0xa2>
 160:	e7 01       	movw	r28, r14
		{
			for (int i = 0; i < 4; i++)
			{					
				resc[i] = UARTReceive();
 162:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 166:	89 93       	st	Y+, r24
// 			itoa(numOfSamp, string, 10);
// 			SendString(string);
		}
		else if (type == 't') // THESHOLD (1 - 1022)
		{
			for (int i = 0; i < 4; i++)
 168:	c0 17       	cp	r28, r16
 16a:	d1 07       	cpc	r29, r17
 16c:	d1 f7       	brne	.-12     	; 0x162 <main+0x86>
			{					
				resc[i] = UARTReceive();
			}
			treshold = atoi(resc);
 16e:	c7 01       	movw	r24, r14
 170:	0e 94 63 03 	call	0x6c6	; 0x6c6 <atoi>
 174:	90 93 76 00 	sts	0x0076, r25
 178:	80 93 75 00 	sts	0x0075, r24
 17c:	17 c0       	rjmp	.+46     	; 0x1ac <main+0xd0>
				
			//itoa(treshold, string, 10);
			//SendString(string);
		}
		else if (type == 'a') // ACP MODE (1 - 8BIT; 2 - 10BIT)
 17e:	81 36       	cpi	r24, 0x61	; 97
 180:	29 f4       	brne	.+10     	; 0x18c <main+0xb0>
		{
			acpMode = UARTReceive();
 182:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 186:	80 93 66 00 	sts	0x0066, r24
 18a:	10 c0       	rjmp	.+32     	; 0x1ac <main+0xd0>
			//UARTSend(acpMode);				
		}
		else if (type == 'w') // WORKING MODE (1 - HIGHER THEN TRESHOLD; 2 - ALL; 3 - LOWER THEN TRESHOLD)
 18c:	87 37       	cpi	r24, 0x77	; 119
 18e:	29 f4       	brne	.+10     	; 0x19a <main+0xbe>
		{
			workingMode = UARTReceive();
 190:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 194:	80 93 67 00 	sts	0x0067, r24
 198:	09 c0       	rjmp	.+18     	; 0x1ac <main+0xd0>
			//UARTSend(workingMode);
		}
		else if (type == 'c') // COMMAND (1 - START; 2 - PAUSE; 3 - STOP)
 19a:	83 36       	cpi	r24, 0x63	; 99
 19c:	39 f4       	brne	.+14     	; 0x1ac <main+0xd0>
		{							
			command = UARTReceive();
 19e:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 1a2:	80 93 68 00 	sts	0x0068, r24
			if (command == '1')
 1a6:	81 33       	cpi	r24, 0x31	; 49
 1a8:	09 f4       	brne	.+2      	; 0x1ac <main+0xd0>
			{
				ADCSRA |= (1<<ADSC);
 1aa:	36 9a       	sbi	0x06, 6	; 6
				char workingMode = '0';
				char command = '0';								
			}
		}
			
		type = '\0';
 1ac:	10 92 72 00 	sts	0x0072, r1
		//}		
	}			
 1b0:	c0 cf       	rjmp	.-128    	; 0x132 <main+0x56>

000001b2 <SendString>:
	}		
	return UDR; 
}

void SendString(char* str)
{
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	ec 01       	movw	r28, r24
	while(*str != '\0')
 1b8:	88 81       	ld	r24, Y
 1ba:	88 23       	and	r24, r24
 1bc:	31 f0       	breq	.+12     	; 0x1ca <SendString+0x18>
		
	}		
	return UDR; 
}

void SendString(char* str)
 1be:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
 1c0:	0e 94 5f 00 	call	0xbe	; 0xbe <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
 1c4:	89 91       	ld	r24, Y+
 1c6:	88 23       	and	r24, r24
 1c8:	d9 f7       	brne	.-10     	; 0x1c0 <SendString+0xe>
	{
		UARTSend(*str);
		str++;
	}
	//UARTSend(*str);
	UARTSend('\r');
 1ca:	8d e0       	ldi	r24, 0x0D	; 13
 1cc:	0e 94 5f 00 	call	0xbe	; 0xbe <UARTSend>
	UARTSend('\n');
 1d0:	8a e0       	ldi	r24, 0x0A	; 10
 1d2:	0e 94 5f 00 	call	0xbe	; 0xbe <UARTSend>
}
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <__vector_14>:
//	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
	ADCSRA |= (1<<ADEN) | (1<<ADIE);
}

ISR(ADC_vect)
{	
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	2f 93       	push	r18
 1e8:	3f 93       	push	r19
 1ea:	4f 93       	push	r20
 1ec:	5f 93       	push	r21
 1ee:	6f 93       	push	r22
 1f0:	7f 93       	push	r23
 1f2:	8f 93       	push	r24
 1f4:	9f 93       	push	r25
 1f6:	af 93       	push	r26
 1f8:	bf 93       	push	r27
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	res = ADCL;
 1fe:	24 b1       	in	r18, 0x04	; 4
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	30 93 6d 00 	sts	0x006D, r19
 206:	20 93 6c 00 	sts	0x006C, r18
	res |= (ADCH << 8);
 20a:	45 b1       	in	r20, 0x05	; 5
 20c:	94 2f       	mov	r25, r20
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	82 2b       	or	r24, r18
 212:	93 2b       	or	r25, r19
 214:	90 93 6d 00 	sts	0x006D, r25
 218:	80 93 6c 00 	sts	0x006C, r24
	
	if (acpMode == '1')
 21c:	20 91 66 00 	lds	r18, 0x0066
 220:	21 33       	cpi	r18, 0x31	; 49
 222:	69 f4       	brne	.+26     	; 0x23e <__vector_14+0x62>
	{
		res /= 4;
 224:	9c 01       	movw	r18, r24
 226:	99 23       	and	r25, r25
 228:	14 f4       	brge	.+4      	; 0x22e <__vector_14+0x52>
 22a:	2d 5f       	subi	r18, 0xFD	; 253
 22c:	3f 4f       	sbci	r19, 0xFF	; 255
 22e:	35 95       	asr	r19
 230:	27 95       	ror	r18
 232:	35 95       	asr	r19
 234:	27 95       	ror	r18
 236:	30 93 6d 00 	sts	0x006D, r19
 23a:	20 93 6c 00 	sts	0x006C, r18
// 	else if (acpMode == '2')
// 	{
// 		itoa(res, string, 10);
// 	}
	
	if ((workingMode == '1') && (res < treshold))
 23e:	80 91 67 00 	lds	r24, 0x0067
 242:	81 33       	cpi	r24, 0x31	; 49
 244:	e9 f4       	brne	.+58     	; 0x280 <__vector_14+0xa4>
 246:	20 91 6c 00 	lds	r18, 0x006C
 24a:	30 91 6d 00 	lds	r19, 0x006D
 24e:	80 91 75 00 	lds	r24, 0x0075
 252:	90 91 76 00 	lds	r25, 0x0076
 256:	28 17       	cp	r18, r24
 258:	39 07       	cpc	r19, r25
 25a:	3c f4       	brge	.+14     	; 0x26a <__vector_14+0x8e>
	{
		itoa(treshold, string, 10);
 25c:	6f e7       	ldi	r22, 0x7F	; 127
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	50 e0       	ldi	r21, 0x00	; 0
 264:	0e 94 81 03 	call	0x702	; 0x702 <itoa>
// 	{
// 		itoa(res, string, 10);
// 	}
	
	if ((workingMode == '1') && (res < treshold))
	{
 268:	34 c0       	rjmp	.+104    	; 0x2d2 <__vector_14+0xf6>
		itoa(treshold, string, 10);
	}
	else if ((workingMode == '1') && (res > treshold))
 26a:	82 17       	cp	r24, r18
 26c:	93 07       	cpc	r25, r19
 26e:	3c f5       	brge	.+78     	; 0x2be <__vector_14+0xe2>
	{
		itoa(res, string, 10);
 270:	c9 01       	movw	r24, r18
 272:	6f e7       	ldi	r22, 0x7F	; 127
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	4a e0       	ldi	r20, 0x0A	; 10
 278:	50 e0       	ldi	r21, 0x00	; 0
 27a:	0e 94 81 03 	call	0x702	; 0x702 <itoa>
	if ((workingMode == '1') && (res < treshold))
	{
		itoa(treshold, string, 10);
	}
	else if ((workingMode == '1') && (res > treshold))
	{
 27e:	29 c0       	rjmp	.+82     	; 0x2d2 <__vector_14+0xf6>
		itoa(res, string, 10);
	}
	else if ((workingMode == '3') && (res < treshold))
 280:	83 33       	cpi	r24, 0x33	; 51
 282:	e9 f4       	brne	.+58     	; 0x2be <__vector_14+0xe2>
 284:	20 91 6c 00 	lds	r18, 0x006C
 288:	30 91 6d 00 	lds	r19, 0x006D
 28c:	80 91 75 00 	lds	r24, 0x0075
 290:	90 91 76 00 	lds	r25, 0x0076
 294:	28 17       	cp	r18, r24
 296:	39 07       	cpc	r19, r25
 298:	44 f4       	brge	.+16     	; 0x2aa <__vector_14+0xce>
	{
		itoa(res, string, 10);
 29a:	c9 01       	movw	r24, r18
 29c:	6f e7       	ldi	r22, 0x7F	; 127
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	4a e0       	ldi	r20, 0x0A	; 10
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	0e 94 81 03 	call	0x702	; 0x702 <itoa>
	else if ((workingMode == '1') && (res > treshold))
	{
		itoa(res, string, 10);
	}
	else if ((workingMode == '3') && (res < treshold))
	{
 2a8:	14 c0       	rjmp	.+40     	; 0x2d2 <__vector_14+0xf6>
		itoa(res, string, 10);
	}
	else if ((workingMode == '3') && (res > treshold))
 2aa:	82 17       	cp	r24, r18
 2ac:	93 07       	cpc	r25, r19
 2ae:	3c f4       	brge	.+14     	; 0x2be <__vector_14+0xe2>
	{
		itoa(treshold, string, 10);
 2b0:	6f e7       	ldi	r22, 0x7F	; 127
 2b2:	70 e0       	ldi	r23, 0x00	; 0
 2b4:	4a e0       	ldi	r20, 0x0A	; 10
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	0e 94 81 03 	call	0x702	; 0x702 <itoa>
	else if ((workingMode == '3') && (res < treshold))
	{
		itoa(res, string, 10);
	}
	else if ((workingMode == '3') && (res > treshold))
	{
 2bc:	0a c0       	rjmp	.+20     	; 0x2d2 <__vector_14+0xf6>
		itoa(treshold, string, 10);
	}
	else 
	{
		itoa(res, string, 10);
 2be:	80 91 6c 00 	lds	r24, 0x006C
 2c2:	90 91 6d 00 	lds	r25, 0x006D
 2c6:	6f e7       	ldi	r22, 0x7F	; 127
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	4a e0       	ldi	r20, 0x0A	; 10
 2cc:	50 e0       	ldi	r21, 0x00	; 0
 2ce:	0e 94 81 03 	call	0x702	; 0x702 <itoa>
	}
	
	SendString(string);
 2d2:	8f e7       	ldi	r24, 0x7F	; 127
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <SendString>
}
 2da:	ff 91       	pop	r31
 2dc:	ef 91       	pop	r30
 2de:	bf 91       	pop	r27
 2e0:	af 91       	pop	r26
 2e2:	9f 91       	pop	r25
 2e4:	8f 91       	pop	r24
 2e6:	7f 91       	pop	r23
 2e8:	6f 91       	pop	r22
 2ea:	5f 91       	pop	r21
 2ec:	4f 91       	pop	r20
 2ee:	3f 91       	pop	r19
 2f0:	2f 91       	pop	r18
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <NumToArr>:
	UARTSend('\r');
	UARTSend('\n');
}

void NumToArr(int numbr)
{	
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	e7 e7       	ldi	r30, 0x77	; 119
 302:	f0 e0       	ldi	r31, 0x00	; 0
	//UARTSend(*str);
	UARTSend('\r');
	UARTSend('\n');
}

void NumToArr(int numbr)
 304:	ef 01       	movw	r28, r30
 306:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
 308:	2a e0       	ldi	r18, 0x0A	; 10
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	b9 01       	movw	r22, r18
 30e:	0e 94 3c 03 	call	0x678	; 0x678 <__divmodhi4>
 312:	81 93       	st	Z+, r24
 314:	91 93       	st	Z+, r25
		numbr /= 10;
 316:	86 2f       	mov	r24, r22
 318:	97 2f       	mov	r25, r23
	UARTSend('\n');
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
 31a:	ec 17       	cp	r30, r28
 31c:	fd 07       	cpc	r31, r29
 31e:	b1 f7       	brne	.-20     	; 0x30c <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <ReceiveString>:
{
	char ret[64];
	int i = 0;
	while(1)
	{
		char tmp = UARTReceive();
 326:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
		if (tmp != '\0')
 32a:	88 23       	and	r24, r24
 32c:	e1 f7       	brne	.-8      	; 0x326 <ReceiveString>
		{
			break;
		}
	}
	str = *ret;
}
 32e:	08 95       	ret

00000330 <ToggleACP>:

void ToggleACP(int en)
{
	if (en == 0)
 330:	00 97       	sbiw	r24, 0x00	; 0
 332:	19 f4       	brne	.+6      	; 0x33a <ToggleACP+0xa>
	{
		PORTD = RED;
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	82 bb       	out	0x12, r24	; 18
 338:	08 95       	ret
	}
	else if (en == 1)
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	91 05       	cpc	r25, r1
 33e:	11 f4       	brne	.+4      	; 0x344 <ToggleACP+0x14>
	{
		PORTD = GREEN;	
 340:	80 e2       	ldi	r24, 0x20	; 32
 342:	82 bb       	out	0x12, r24	; 18
 344:	08 95       	ret

00000346 <SwitchACPMode>:
	} 
}

void SwitchACPMode(int mode)
{
	switch(mode)
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	91 05       	cpc	r25, r1
 34a:	39 f0       	breq	.+14     	; 0x35a <SwitchACPMode+0x14>
 34c:	82 30       	cpi	r24, 0x02	; 2
 34e:	91 05       	cpc	r25, r1
 350:	69 f0       	breq	.+26     	; 0x36c <SwitchACPMode+0x26>
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	e1 f5       	brne	.+120    	; 0x3ce <SwitchACPMode+0x88>
	{
		case 0: 
			DDRC = 0x0;
 356:	14 ba       	out	0x14, r1	; 20
			break;
 358:	08 95       	ret
		case 1:		
			DDRC = 0xFF;
 35a:	8f ef       	ldi	r24, 0xFF	; 255
 35c:	84 bb       	out	0x14, r24	; 20
			NumToArr(res);	
 35e:	80 91 6c 00 	lds	r24, 0x006C
 362:	90 91 6d 00 	lds	r25, 0x006D
 366:	0e 94 7e 01 	call	0x2fc	; 0x2fc <NumToArr>
			break;			
 36a:	08 95       	ret
		case 2:
			DDRC = 0xFF;
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	84 bb       	out	0x14, r24	; 20
			volt = (float)((0.5 * res) / 1024) * 10000;
 370:	60 91 6c 00 	lds	r22, 0x006C
 374:	70 91 6d 00 	lds	r23, 0x006D
 378:	88 27       	eor	r24, r24
 37a:	77 fd       	sbrc	r23, 7
 37c:	80 95       	com	r24
 37e:	98 2f       	mov	r25, r24
 380:	0e 94 4d 02 	call	0x49a	; 0x49a <__floatsisf>
 384:	20 e0       	ldi	r18, 0x00	; 0
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	40 e0       	ldi	r20, 0x00	; 0
 38a:	5f e3       	ldi	r21, 0x3F	; 63
 38c:	0e 94 b1 02 	call	0x562	; 0x562 <__mulsf3>
 390:	20 e0       	ldi	r18, 0x00	; 0
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	40 e8       	ldi	r20, 0x80	; 128
 396:	5a e3       	ldi	r21, 0x3A	; 58
 398:	0e 94 b1 02 	call	0x562	; 0x562 <__mulsf3>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e4       	ldi	r19, 0x40	; 64
 3a0:	4c e1       	ldi	r20, 0x1C	; 28
 3a2:	56 e4       	ldi	r21, 0x46	; 70
 3a4:	0e 94 b1 02 	call	0x562	; 0x562 <__mulsf3>
 3a8:	26 2f       	mov	r18, r22
 3aa:	37 2f       	mov	r19, r23
 3ac:	48 2f       	mov	r20, r24
 3ae:	59 2f       	mov	r21, r25
 3b0:	20 93 62 00 	sts	0x0062, r18
 3b4:	30 93 63 00 	sts	0x0063, r19
 3b8:	40 93 64 00 	sts	0x0064, r20
 3bc:	50 93 65 00 	sts	0x0065, r21
 			NumToArr(volt);
 3c0:	0e 94 1a 02 	call	0x434	; 0x434 <__fixsfsi>
 3c4:	dc 01       	movw	r26, r24
 3c6:	cb 01       	movw	r24, r22
 3c8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <NumToArr>
			break;
 3cc:	08 95       	ret
		default:
			DDRC = 0x0;
 3ce:	14 ba       	out	0x14, r1	; 20
 3d0:	08 95       	ret

000003d2 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 3d2:	84 30       	cpi	r24, 0x04	; 4
 3d4:	f9 f0       	breq	.+62     	; 0x414 <DecToDigit+0x42>
 3d6:	85 30       	cpi	r24, 0x05	; 5
 3d8:	48 f4       	brcc	.+18     	; 0x3ec <DecToDigit+0x1a>
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	49 f1       	breq	.+82     	; 0x430 <DecToDigit+0x5e>
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	98 f0       	brcs	.+38     	; 0x408 <DecToDigit+0x36>
 3e2:	82 30       	cpi	r24, 0x02	; 2
 3e4:	99 f0       	breq	.+38     	; 0x40c <DecToDigit+0x3a>
 3e6:	83 30       	cpi	r24, 0x03	; 3
 3e8:	09 f5       	brne	.+66     	; 0x42c <DecToDigit+0x5a>
 3ea:	12 c0       	rjmp	.+36     	; 0x410 <DecToDigit+0x3e>
 3ec:	87 30       	cpi	r24, 0x07	; 7
 3ee:	c1 f0       	breq	.+48     	; 0x420 <DecToDigit+0x4e>
 3f0:	88 30       	cpi	r24, 0x08	; 8
 3f2:	28 f4       	brcc	.+10     	; 0x3fe <DecToDigit+0x2c>
 3f4:	85 30       	cpi	r24, 0x05	; 5
 3f6:	81 f0       	breq	.+32     	; 0x418 <DecToDigit+0x46>
 3f8:	86 30       	cpi	r24, 0x06	; 6
 3fa:	c1 f4       	brne	.+48     	; 0x42c <DecToDigit+0x5a>
 3fc:	0f c0       	rjmp	.+30     	; 0x41c <DecToDigit+0x4a>
 3fe:	88 30       	cpi	r24, 0x08	; 8
 400:	89 f0       	breq	.+34     	; 0x424 <DecToDigit+0x52>
 402:	89 30       	cpi	r24, 0x09	; 9
 404:	99 f4       	brne	.+38     	; 0x42c <DecToDigit+0x5a>
 406:	10 c0       	rjmp	.+32     	; 0x428 <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 408:	8f e5       	ldi	r24, 0x5F	; 95
 40a:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 40c:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 40e:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 410:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 412:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 414:	86 e6       	ldi	r24, 0x66	; 102
			break;
 416:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 418:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 41a:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 41c:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 41e:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 420:	87 e0       	ldi	r24, 0x07	; 7
			break;
 422:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 424:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 426:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 428:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 42a:	08 95       	ret
		default:
			Digit = 0b00000000;
 42c:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 42e:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 430:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
 432:	08 95       	ret

00000434 <__fixsfsi>:
 434:	04 d0       	rcall	.+8      	; 0x43e <__fixunssfsi>
 436:	68 94       	set
 438:	b1 11       	cpse	r27, r1
 43a:	8d c0       	rjmp	.+282    	; 0x556 <__fp_szero>
 43c:	08 95       	ret

0000043e <__fixunssfsi>:
 43e:	70 d0       	rcall	.+224    	; 0x520 <__fp_splitA>
 440:	88 f0       	brcs	.+34     	; 0x464 <__stack+0x5>
 442:	9f 57       	subi	r25, 0x7F	; 127
 444:	90 f0       	brcs	.+36     	; 0x46a <__stack+0xb>
 446:	b9 2f       	mov	r27, r25
 448:	99 27       	eor	r25, r25
 44a:	b7 51       	subi	r27, 0x17	; 23
 44c:	a0 f0       	brcs	.+40     	; 0x476 <__stack+0x17>
 44e:	d1 f0       	breq	.+52     	; 0x484 <__stack+0x25>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	1a f0       	brmi	.+6      	; 0x460 <__stack+0x1>
 45a:	ba 95       	dec	r27
 45c:	c9 f7       	brne	.-14     	; 0x450 <__fixunssfsi+0x12>
 45e:	12 c0       	rjmp	.+36     	; 0x484 <__stack+0x25>
 460:	b1 30       	cpi	r27, 0x01	; 1
 462:	81 f0       	breq	.+32     	; 0x484 <__stack+0x25>
 464:	77 d0       	rcall	.+238    	; 0x554 <__fp_zero>
 466:	b1 e0       	ldi	r27, 0x01	; 1
 468:	08 95       	ret
 46a:	74 c0       	rjmp	.+232    	; 0x554 <__fp_zero>
 46c:	67 2f       	mov	r22, r23
 46e:	78 2f       	mov	r23, r24
 470:	88 27       	eor	r24, r24
 472:	b8 5f       	subi	r27, 0xF8	; 248
 474:	39 f0       	breq	.+14     	; 0x484 <__stack+0x25>
 476:	b9 3f       	cpi	r27, 0xF9	; 249
 478:	cc f3       	brlt	.-14     	; 0x46c <__stack+0xd>
 47a:	86 95       	lsr	r24
 47c:	77 95       	ror	r23
 47e:	67 95       	ror	r22
 480:	b3 95       	inc	r27
 482:	d9 f7       	brne	.-10     	; 0x47a <__stack+0x1b>
 484:	3e f4       	brtc	.+14     	; 0x494 <__stack+0x35>
 486:	90 95       	com	r25
 488:	80 95       	com	r24
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	08 95       	ret

00000496 <__floatunsisf>:
 496:	e8 94       	clt
 498:	09 c0       	rjmp	.+18     	; 0x4ac <__floatsisf+0x12>

0000049a <__floatsisf>:
 49a:	97 fb       	bst	r25, 7
 49c:	3e f4       	brtc	.+14     	; 0x4ac <__floatsisf+0x12>
 49e:	90 95       	com	r25
 4a0:	80 95       	com	r24
 4a2:	70 95       	com	r23
 4a4:	61 95       	neg	r22
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	99 23       	and	r25, r25
 4ae:	a9 f0       	breq	.+42     	; 0x4da <__floatsisf+0x40>
 4b0:	f9 2f       	mov	r31, r25
 4b2:	96 e9       	ldi	r25, 0x96	; 150
 4b4:	bb 27       	eor	r27, r27
 4b6:	93 95       	inc	r25
 4b8:	f6 95       	lsr	r31
 4ba:	87 95       	ror	r24
 4bc:	77 95       	ror	r23
 4be:	67 95       	ror	r22
 4c0:	b7 95       	ror	r27
 4c2:	f1 11       	cpse	r31, r1
 4c4:	f8 cf       	rjmp	.-16     	; 0x4b6 <__floatsisf+0x1c>
 4c6:	fa f4       	brpl	.+62     	; 0x506 <__floatsisf+0x6c>
 4c8:	bb 0f       	add	r27, r27
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__floatsisf+0x36>
 4cc:	60 ff       	sbrs	r22, 0
 4ce:	1b c0       	rjmp	.+54     	; 0x506 <__floatsisf+0x6c>
 4d0:	6f 5f       	subi	r22, 0xFF	; 255
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	8f 4f       	sbci	r24, 0xFF	; 255
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	16 c0       	rjmp	.+44     	; 0x506 <__floatsisf+0x6c>
 4da:	88 23       	and	r24, r24
 4dc:	11 f0       	breq	.+4      	; 0x4e2 <__floatsisf+0x48>
 4de:	96 e9       	ldi	r25, 0x96	; 150
 4e0:	11 c0       	rjmp	.+34     	; 0x504 <__floatsisf+0x6a>
 4e2:	77 23       	and	r23, r23
 4e4:	21 f0       	breq	.+8      	; 0x4ee <__floatsisf+0x54>
 4e6:	9e e8       	ldi	r25, 0x8E	; 142
 4e8:	87 2f       	mov	r24, r23
 4ea:	76 2f       	mov	r23, r22
 4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <__floatsisf+0x5e>
 4ee:	66 23       	and	r22, r22
 4f0:	71 f0       	breq	.+28     	; 0x50e <__floatsisf+0x74>
 4f2:	96 e8       	ldi	r25, 0x86	; 134
 4f4:	86 2f       	mov	r24, r22
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	2a f0       	brmi	.+10     	; 0x506 <__floatsisf+0x6c>
 4fc:	9a 95       	dec	r25
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	da f7       	brpl	.-10     	; 0x4fc <__floatsisf+0x62>
 506:	88 0f       	add	r24, r24
 508:	96 95       	lsr	r25
 50a:	87 95       	ror	r24
 50c:	97 f9       	bld	r25, 7
 50e:	08 95       	ret

00000510 <__fp_split3>:
 510:	57 fd       	sbrc	r21, 7
 512:	90 58       	subi	r25, 0x80	; 128
 514:	44 0f       	add	r20, r20
 516:	55 1f       	adc	r21, r21
 518:	59 f0       	breq	.+22     	; 0x530 <__fp_splitA+0x10>
 51a:	5f 3f       	cpi	r21, 0xFF	; 255
 51c:	71 f0       	breq	.+28     	; 0x53a <__fp_splitA+0x1a>
 51e:	47 95       	ror	r20

00000520 <__fp_splitA>:
 520:	88 0f       	add	r24, r24
 522:	97 fb       	bst	r25, 7
 524:	99 1f       	adc	r25, r25
 526:	61 f0       	breq	.+24     	; 0x540 <__fp_splitA+0x20>
 528:	9f 3f       	cpi	r25, 0xFF	; 255
 52a:	79 f0       	breq	.+30     	; 0x54a <__fp_splitA+0x2a>
 52c:	87 95       	ror	r24
 52e:	08 95       	ret
 530:	12 16       	cp	r1, r18
 532:	13 06       	cpc	r1, r19
 534:	14 06       	cpc	r1, r20
 536:	55 1f       	adc	r21, r21
 538:	f2 cf       	rjmp	.-28     	; 0x51e <__fp_split3+0xe>
 53a:	46 95       	lsr	r20
 53c:	f1 df       	rcall	.-30     	; 0x520 <__fp_splitA>
 53e:	08 c0       	rjmp	.+16     	; 0x550 <__fp_splitA+0x30>
 540:	16 16       	cp	r1, r22
 542:	17 06       	cpc	r1, r23
 544:	18 06       	cpc	r1, r24
 546:	99 1f       	adc	r25, r25
 548:	f1 cf       	rjmp	.-30     	; 0x52c <__fp_splitA+0xc>
 54a:	86 95       	lsr	r24
 54c:	71 05       	cpc	r23, r1
 54e:	61 05       	cpc	r22, r1
 550:	08 94       	sec
 552:	08 95       	ret

00000554 <__fp_zero>:
 554:	e8 94       	clt

00000556 <__fp_szero>:
 556:	bb 27       	eor	r27, r27
 558:	66 27       	eor	r22, r22
 55a:	77 27       	eor	r23, r23
 55c:	cb 01       	movw	r24, r22
 55e:	97 f9       	bld	r25, 7
 560:	08 95       	ret

00000562 <__mulsf3>:
 562:	0b d0       	rcall	.+22     	; 0x57a <__mulsf3x>
 564:	78 c0       	rjmp	.+240    	; 0x656 <__fp_round>
 566:	69 d0       	rcall	.+210    	; 0x63a <__fp_pscA>
 568:	28 f0       	brcs	.+10     	; 0x574 <__mulsf3+0x12>
 56a:	6e d0       	rcall	.+220    	; 0x648 <__fp_pscB>
 56c:	18 f0       	brcs	.+6      	; 0x574 <__mulsf3+0x12>
 56e:	95 23       	and	r25, r21
 570:	09 f0       	breq	.+2      	; 0x574 <__mulsf3+0x12>
 572:	5a c0       	rjmp	.+180    	; 0x628 <__fp_inf>
 574:	5f c0       	rjmp	.+190    	; 0x634 <__fp_nan>
 576:	11 24       	eor	r1, r1
 578:	ee cf       	rjmp	.-36     	; 0x556 <__fp_szero>

0000057a <__mulsf3x>:
 57a:	ca df       	rcall	.-108    	; 0x510 <__fp_split3>
 57c:	a0 f3       	brcs	.-24     	; 0x566 <__mulsf3+0x4>

0000057e <__mulsf3_pse>:
 57e:	95 9f       	mul	r25, r21
 580:	d1 f3       	breq	.-12     	; 0x576 <__mulsf3+0x14>
 582:	95 0f       	add	r25, r21
 584:	50 e0       	ldi	r21, 0x00	; 0
 586:	55 1f       	adc	r21, r21
 588:	62 9f       	mul	r22, r18
 58a:	f0 01       	movw	r30, r0
 58c:	72 9f       	mul	r23, r18
 58e:	bb 27       	eor	r27, r27
 590:	f0 0d       	add	r31, r0
 592:	b1 1d       	adc	r27, r1
 594:	63 9f       	mul	r22, r19
 596:	aa 27       	eor	r26, r26
 598:	f0 0d       	add	r31, r0
 59a:	b1 1d       	adc	r27, r1
 59c:	aa 1f       	adc	r26, r26
 59e:	64 9f       	mul	r22, r20
 5a0:	66 27       	eor	r22, r22
 5a2:	b0 0d       	add	r27, r0
 5a4:	a1 1d       	adc	r26, r1
 5a6:	66 1f       	adc	r22, r22
 5a8:	82 9f       	mul	r24, r18
 5aa:	22 27       	eor	r18, r18
 5ac:	b0 0d       	add	r27, r0
 5ae:	a1 1d       	adc	r26, r1
 5b0:	62 1f       	adc	r22, r18
 5b2:	73 9f       	mul	r23, r19
 5b4:	b0 0d       	add	r27, r0
 5b6:	a1 1d       	adc	r26, r1
 5b8:	62 1f       	adc	r22, r18
 5ba:	83 9f       	mul	r24, r19
 5bc:	a0 0d       	add	r26, r0
 5be:	61 1d       	adc	r22, r1
 5c0:	22 1f       	adc	r18, r18
 5c2:	74 9f       	mul	r23, r20
 5c4:	33 27       	eor	r19, r19
 5c6:	a0 0d       	add	r26, r0
 5c8:	61 1d       	adc	r22, r1
 5ca:	23 1f       	adc	r18, r19
 5cc:	84 9f       	mul	r24, r20
 5ce:	60 0d       	add	r22, r0
 5d0:	21 1d       	adc	r18, r1
 5d2:	82 2f       	mov	r24, r18
 5d4:	76 2f       	mov	r23, r22
 5d6:	6a 2f       	mov	r22, r26
 5d8:	11 24       	eor	r1, r1
 5da:	9f 57       	subi	r25, 0x7F	; 127
 5dc:	50 40       	sbci	r21, 0x00	; 0
 5de:	8a f0       	brmi	.+34     	; 0x602 <__mulsf3_pse+0x84>
 5e0:	e1 f0       	breq	.+56     	; 0x61a <__mulsf3_pse+0x9c>
 5e2:	88 23       	and	r24, r24
 5e4:	4a f0       	brmi	.+18     	; 0x5f8 <__mulsf3_pse+0x7a>
 5e6:	ee 0f       	add	r30, r30
 5e8:	ff 1f       	adc	r31, r31
 5ea:	bb 1f       	adc	r27, r27
 5ec:	66 1f       	adc	r22, r22
 5ee:	77 1f       	adc	r23, r23
 5f0:	88 1f       	adc	r24, r24
 5f2:	91 50       	subi	r25, 0x01	; 1
 5f4:	50 40       	sbci	r21, 0x00	; 0
 5f6:	a9 f7       	brne	.-22     	; 0x5e2 <__mulsf3_pse+0x64>
 5f8:	9e 3f       	cpi	r25, 0xFE	; 254
 5fa:	51 05       	cpc	r21, r1
 5fc:	70 f0       	brcs	.+28     	; 0x61a <__mulsf3_pse+0x9c>
 5fe:	14 c0       	rjmp	.+40     	; 0x628 <__fp_inf>
 600:	aa cf       	rjmp	.-172    	; 0x556 <__fp_szero>
 602:	5f 3f       	cpi	r21, 0xFF	; 255
 604:	ec f3       	brlt	.-6      	; 0x600 <__mulsf3_pse+0x82>
 606:	98 3e       	cpi	r25, 0xE8	; 232
 608:	dc f3       	brlt	.-10     	; 0x600 <__mulsf3_pse+0x82>
 60a:	86 95       	lsr	r24
 60c:	77 95       	ror	r23
 60e:	67 95       	ror	r22
 610:	b7 95       	ror	r27
 612:	f7 95       	ror	r31
 614:	e7 95       	ror	r30
 616:	9f 5f       	subi	r25, 0xFF	; 255
 618:	c1 f7       	brne	.-16     	; 0x60a <__mulsf3_pse+0x8c>
 61a:	fe 2b       	or	r31, r30
 61c:	88 0f       	add	r24, r24
 61e:	91 1d       	adc	r25, r1
 620:	96 95       	lsr	r25
 622:	87 95       	ror	r24
 624:	97 f9       	bld	r25, 7
 626:	08 95       	ret

00000628 <__fp_inf>:
 628:	97 f9       	bld	r25, 7
 62a:	9f 67       	ori	r25, 0x7F	; 127
 62c:	80 e8       	ldi	r24, 0x80	; 128
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	60 e0       	ldi	r22, 0x00	; 0
 632:	08 95       	ret

00000634 <__fp_nan>:
 634:	9f ef       	ldi	r25, 0xFF	; 255
 636:	80 ec       	ldi	r24, 0xC0	; 192
 638:	08 95       	ret

0000063a <__fp_pscA>:
 63a:	00 24       	eor	r0, r0
 63c:	0a 94       	dec	r0
 63e:	16 16       	cp	r1, r22
 640:	17 06       	cpc	r1, r23
 642:	18 06       	cpc	r1, r24
 644:	09 06       	cpc	r0, r25
 646:	08 95       	ret

00000648 <__fp_pscB>:
 648:	00 24       	eor	r0, r0
 64a:	0a 94       	dec	r0
 64c:	12 16       	cp	r1, r18
 64e:	13 06       	cpc	r1, r19
 650:	14 06       	cpc	r1, r20
 652:	05 06       	cpc	r0, r21
 654:	08 95       	ret

00000656 <__fp_round>:
 656:	09 2e       	mov	r0, r25
 658:	03 94       	inc	r0
 65a:	00 0c       	add	r0, r0
 65c:	11 f4       	brne	.+4      	; 0x662 <__fp_round+0xc>
 65e:	88 23       	and	r24, r24
 660:	52 f0       	brmi	.+20     	; 0x676 <__fp_round+0x20>
 662:	bb 0f       	add	r27, r27
 664:	40 f4       	brcc	.+16     	; 0x676 <__fp_round+0x20>
 666:	bf 2b       	or	r27, r31
 668:	11 f4       	brne	.+4      	; 0x66e <__fp_round+0x18>
 66a:	60 ff       	sbrs	r22, 0
 66c:	04 c0       	rjmp	.+8      	; 0x676 <__fp_round+0x20>
 66e:	6f 5f       	subi	r22, 0xFF	; 255
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	08 95       	ret

00000678 <__divmodhi4>:
 678:	97 fb       	bst	r25, 7
 67a:	09 2e       	mov	r0, r25
 67c:	07 26       	eor	r0, r23
 67e:	0a d0       	rcall	.+20     	; 0x694 <__divmodhi4_neg1>
 680:	77 fd       	sbrc	r23, 7
 682:	04 d0       	rcall	.+8      	; 0x68c <__divmodhi4_neg2>
 684:	0c d0       	rcall	.+24     	; 0x69e <__udivmodhi4>
 686:	06 d0       	rcall	.+12     	; 0x694 <__divmodhi4_neg1>
 688:	00 20       	and	r0, r0
 68a:	1a f4       	brpl	.+6      	; 0x692 <__divmodhi4_exit>

0000068c <__divmodhi4_neg2>:
 68c:	70 95       	com	r23
 68e:	61 95       	neg	r22
 690:	7f 4f       	sbci	r23, 0xFF	; 255

00000692 <__divmodhi4_exit>:
 692:	08 95       	ret

00000694 <__divmodhi4_neg1>:
 694:	f6 f7       	brtc	.-4      	; 0x692 <__divmodhi4_exit>
 696:	90 95       	com	r25
 698:	81 95       	neg	r24
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	08 95       	ret

0000069e <__udivmodhi4>:
 69e:	aa 1b       	sub	r26, r26
 6a0:	bb 1b       	sub	r27, r27
 6a2:	51 e1       	ldi	r21, 0x11	; 17
 6a4:	07 c0       	rjmp	.+14     	; 0x6b4 <__udivmodhi4_ep>

000006a6 <__udivmodhi4_loop>:
 6a6:	aa 1f       	adc	r26, r26
 6a8:	bb 1f       	adc	r27, r27
 6aa:	a6 17       	cp	r26, r22
 6ac:	b7 07       	cpc	r27, r23
 6ae:	10 f0       	brcs	.+4      	; 0x6b4 <__udivmodhi4_ep>
 6b0:	a6 1b       	sub	r26, r22
 6b2:	b7 0b       	sbc	r27, r23

000006b4 <__udivmodhi4_ep>:
 6b4:	88 1f       	adc	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	5a 95       	dec	r21
 6ba:	a9 f7       	brne	.-22     	; 0x6a6 <__udivmodhi4_loop>
 6bc:	80 95       	com	r24
 6be:	90 95       	com	r25
 6c0:	bc 01       	movw	r22, r24
 6c2:	cd 01       	movw	r24, r26
 6c4:	08 95       	ret

000006c6 <atoi>:
 6c6:	fc 01       	movw	r30, r24
 6c8:	88 27       	eor	r24, r24
 6ca:	99 27       	eor	r25, r25
 6cc:	e8 94       	clt
 6ce:	21 91       	ld	r18, Z+
 6d0:	20 32       	cpi	r18, 0x20	; 32
 6d2:	e9 f3       	breq	.-6      	; 0x6ce <atoi+0x8>
 6d4:	29 30       	cpi	r18, 0x09	; 9
 6d6:	10 f0       	brcs	.+4      	; 0x6dc <atoi+0x16>
 6d8:	2e 30       	cpi	r18, 0x0E	; 14
 6da:	c8 f3       	brcs	.-14     	; 0x6ce <atoi+0x8>
 6dc:	2b 32       	cpi	r18, 0x2B	; 43
 6de:	41 f0       	breq	.+16     	; 0x6f0 <atoi+0x2a>
 6e0:	2d 32       	cpi	r18, 0x2D	; 45
 6e2:	39 f4       	brne	.+14     	; 0x6f2 <atoi+0x2c>
 6e4:	68 94       	set
 6e6:	04 c0       	rjmp	.+8      	; 0x6f0 <atoi+0x2a>
 6e8:	0e 94 a2 03 	call	0x744	; 0x744 <__mulhi_const_10>
 6ec:	82 0f       	add	r24, r18
 6ee:	91 1d       	adc	r25, r1
 6f0:	21 91       	ld	r18, Z+
 6f2:	20 53       	subi	r18, 0x30	; 48
 6f4:	2a 30       	cpi	r18, 0x0A	; 10
 6f6:	c0 f3       	brcs	.-16     	; 0x6e8 <atoi+0x22>
 6f8:	1e f4       	brtc	.+6      	; 0x700 <atoi+0x3a>
 6fa:	90 95       	com	r25
 6fc:	81 95       	neg	r24
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	08 95       	ret

00000702 <itoa>:
 702:	fb 01       	movw	r30, r22
 704:	9f 01       	movw	r18, r30
 706:	e8 94       	clt
 708:	42 30       	cpi	r20, 0x02	; 2
 70a:	c4 f0       	brlt	.+48     	; 0x73c <itoa+0x3a>
 70c:	45 32       	cpi	r20, 0x25	; 37
 70e:	b4 f4       	brge	.+44     	; 0x73c <itoa+0x3a>
 710:	4a 30       	cpi	r20, 0x0A	; 10
 712:	29 f4       	brne	.+10     	; 0x71e <itoa+0x1c>
 714:	97 fb       	bst	r25, 7
 716:	1e f4       	brtc	.+6      	; 0x71e <itoa+0x1c>
 718:	90 95       	com	r25
 71a:	81 95       	neg	r24
 71c:	9f 4f       	sbci	r25, 0xFF	; 255
 71e:	64 2f       	mov	r22, r20
 720:	77 27       	eor	r23, r23
 722:	0e 94 4f 03 	call	0x69e	; 0x69e <__udivmodhi4>
 726:	80 5d       	subi	r24, 0xD0	; 208
 728:	8a 33       	cpi	r24, 0x3A	; 58
 72a:	0c f0       	brlt	.+2      	; 0x72e <itoa+0x2c>
 72c:	89 5d       	subi	r24, 0xD9	; 217
 72e:	81 93       	st	Z+, r24
 730:	cb 01       	movw	r24, r22
 732:	00 97       	sbiw	r24, 0x00	; 0
 734:	a1 f7       	brne	.-24     	; 0x71e <itoa+0x1c>
 736:	16 f4       	brtc	.+4      	; 0x73c <itoa+0x3a>
 738:	5d e2       	ldi	r21, 0x2D	; 45
 73a:	51 93       	st	Z+, r21
 73c:	10 82       	st	Z, r1
 73e:	c9 01       	movw	r24, r18
 740:	0c 94 aa 03 	jmp	0x754	; 0x754 <strrev>

00000744 <__mulhi_const_10>:
 744:	7a e0       	ldi	r23, 0x0A	; 10
 746:	97 9f       	mul	r25, r23
 748:	90 2d       	mov	r25, r0
 74a:	87 9f       	mul	r24, r23
 74c:	80 2d       	mov	r24, r0
 74e:	91 0d       	add	r25, r1
 750:	11 24       	eor	r1, r1
 752:	08 95       	ret

00000754 <strrev>:
 754:	dc 01       	movw	r26, r24
 756:	fc 01       	movw	r30, r24
 758:	67 2f       	mov	r22, r23
 75a:	71 91       	ld	r23, Z+
 75c:	77 23       	and	r23, r23
 75e:	e1 f7       	brne	.-8      	; 0x758 <strrev+0x4>
 760:	32 97       	sbiw	r30, 0x02	; 2
 762:	04 c0       	rjmp	.+8      	; 0x76c <strrev+0x18>
 764:	7c 91       	ld	r23, X
 766:	6d 93       	st	X+, r22
 768:	70 83       	st	Z, r23
 76a:	62 91       	ld	r22, -Z
 76c:	ae 17       	cp	r26, r30
 76e:	bf 07       	cpc	r27, r31
 770:	c8 f3       	brcs	.-14     	; 0x764 <strrev+0x10>
 772:	08 95       	ret

00000774 <_exit>:
 774:	f8 94       	cli

00000776 <__stop_program>:
 776:	ff cf       	rjmp	.-2      	; 0x776 <__stop_program>
