
AVRGCC5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000077c  00000810  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000009c  0080006a  0080006a  0000081a  2**0
                  ALLOC
  3 .stab         00001b54  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000764  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000191  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000053e  00000000  00000000  00002c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000206  00000000  00000000  000031c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000555  00000000  00000000  000033c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000100  00000000  00000000  00003920  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001aa  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000001cb  00000000  00000000  00003bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000001e  00000000  00000000  00003d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000018  00000000  00000000  00003db3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 aa 00 	jmp	0x154	; 0x154 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 30       	cpi	r26, 0x06	; 6
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8a:	0c 94 bc 03 	jmp	0x778	; 0x778 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <TimerInit>:
	}	
}

void TimerInit()
{
	MCUCR = 0x0F;
  92:	8f e0       	ldi	r24, 0x0F	; 15
  94:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	8b bf       	out	0x3b, r24	; 59

	//TIMER2
// 	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
// 	OCR2 = 10;
// 	TIMSK |= (1 << OCIE2);
}
  9a:	08 95       	ret

0000009c <ACPInit>:

void ACPInit()
{
	ADMUX |= (1<<REFS0) | (1<<MUX1); 
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	82 64       	ori	r24, 0x42	; 66
  a0:	87 b9       	out	0x07, r24	; 7
//	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
	ADCSRA |= (1<<ADEN) | (1<<ADIE);
  a2:	86 b1       	in	r24, 0x06	; 6
  a4:	88 68       	ori	r24, 0x88	; 136
  a6:	86 b9       	out	0x06, r24	; 6
}
  a8:	08 95       	ret

000000aa <__vector_2>:
// 	}
// 	ToggleACP(enACP);
}

ISR(INT1_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
// 	modeACP++;
// 	if (modeACP >= 3)
// 	{
// 		modeACP = 0;
// 	}
}
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <UARTSend>:


void UARTSend(char Value)
{
	while (!(UCSRA & (1 << UDRE)))
  be:	5d 9b       	sbis	0x0b, 5	; 11
  c0:	fe cf       	rjmp	.-4      	; 0xbe <UARTSend>
	{
				
	}		
	UDR = Value;
  c2:	8c b9       	out	0x0c, r24	; 12
}
  c4:	08 95       	ret

000000c6 <UARTReceive>:

char UARTReceive()
{
	while (!(UCSRA & (1 << RXC)))
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <UARTReceive>
	{
		
	}		
	return UDR; 
  ca:	8c b1       	in	r24, 0x0c	; 12
}
  cc:	08 95       	ret

000000ce <Start>:
	}			
}

void Start()
{
	while (UARTReceive() != '3')
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <Start+0x4>
	{
		ADCSRA |= (1<<ADSC);
  d0:	36 9a       	sbi	0x06, 6	; 6
	}			
}

void Start()
{
	while (UARTReceive() != '3')
  d2:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
  d6:	83 33       	cpi	r24, 0x33	; 51
  d8:	d9 f7       	brne	.-10     	; 0xd0 <Start+0x2>
	{
		ADCSRA |= (1<<ADSC);
	}	
}
  da:	08 95       	ret

000000dc <SendString>:
	}		
	return UDR; 
}

void SendString(char* str)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	ec 01       	movw	r28, r24
	while(*str != '\0')
  e2:	88 81       	ld	r24, Y
  e4:	88 23       	and	r24, r24
  e6:	31 f0       	breq	.+12     	; 0xf4 <SendString+0x18>
		
	}		
	return UDR; 
}

void SendString(char* str)
  e8:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		UARTSend(*str);
  ea:	0e 94 5f 00 	call	0xbe	; 0xbe <UARTSend>
	return UDR; 
}

void SendString(char* str)
{
	while(*str != '\0')
  ee:	89 91       	ld	r24, Y+
  f0:	88 23       	and	r24, r24
  f2:	d9 f7       	brne	.-10     	; 0xea <SendString+0xe>
	{
		UARTSend(*str);
		str++;
	}
	//UARTSend(*str);
	UARTSend('\r');
  f4:	8d e0       	ldi	r24, 0x0D	; 13
  f6:	0e 94 5f 00 	call	0xbe	; 0xbe <UARTSend>
	UARTSend('\n');
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	0e 94 5f 00 	call	0xbe	; 0xbe <UARTSend>
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <__vector_1>:
// 		j %= 4;
// 	}	
// }

ISR(INT0_vect)
{
 106:	1f 92       	push	r1
 108:	0f 92       	push	r0
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	0f 92       	push	r0
 10e:	11 24       	eor	r1, r1
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	6f 93       	push	r22
 11a:	7f 93       	push	r23
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	SendString(string);
 128:	8f e7       	ldi	r24, 0x7F	; 127
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 6e 00 	call	0xdc	; 0xdc <SendString>
	ADCSRA |= (1<<ADSC);
 130:	36 9a       	sbi	0x06, 6	; 6
// 	if (enACP >= 2)
// 	{
// 		enACP = 0;
// 	}
// 	ToggleACP(enACP);
}
 132:	ff 91       	pop	r31
 134:	ef 91       	pop	r30
 136:	bf 91       	pop	r27
 138:	af 91       	pop	r26
 13a:	9f 91       	pop	r25
 13c:	8f 91       	pop	r24
 13e:	7f 91       	pop	r23
 140:	6f 91       	pop	r22
 142:	5f 91       	pop	r21
 144:	4f 91       	pop	r20
 146:	3f 91       	pop	r19
 148:	2f 91       	pop	r18
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__vector_14>:
//	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
	ADCSRA |= (1<<ADEN) | (1<<ADIE);
}

ISR(ADC_vect)
{	
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	2f 93       	push	r18
 160:	3f 93       	push	r19
 162:	4f 93       	push	r20
 164:	5f 93       	push	r21
 166:	6f 93       	push	r22
 168:	7f 93       	push	r23
 16a:	8f 93       	push	r24
 16c:	9f 93       	push	r25
 16e:	af 93       	push	r26
 170:	bf 93       	push	r27
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	res = ADCL;
 17a:	24 b1       	in	r18, 0x04	; 4
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	30 93 6d 00 	sts	0x006D, r19
 182:	20 93 6c 00 	sts	0x006C, r18
	res |= (ADCH << 8);
 186:	45 b1       	in	r20, 0x05	; 5
 188:	94 2f       	mov	r25, r20
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	82 2b       	or	r24, r18
 18e:	93 2b       	or	r25, r19
 190:	90 93 6d 00 	sts	0x006D, r25
 194:	80 93 6c 00 	sts	0x006C, r24
	itoa(res, string, 10);
 198:	cf e7       	ldi	r28, 0x7F	; 127
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	be 01       	movw	r22, r28
 19e:	4a e0       	ldi	r20, 0x0A	; 10
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	0e 94 83 03 	call	0x706	; 0x706 <itoa>
	SendString(string);
 1a6:	ce 01       	movw	r24, r28
 1a8:	0e 94 6e 00 	call	0xdc	; 0xdc <SendString>
// 		res |= (ADCH << 8);
// 		
// 		itoa(res, string, 10);
//  		SendString(string);	
//  	}
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <main>:
char workingMode = '0';
char command = '0';


int main(void)
{
 1d2:	cf 92       	push	r12
 1d4:	df 92       	push	r13
 1d6:	ef 92       	push	r14
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
	DDRA = 0xF0;
 1e2:	80 ef       	ldi	r24, 0xF0	; 240
 1e4:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2 | RED | GREEN;
 1ea:	91 b3       	in	r25, 0x11	; 17
 1ec:	9c 6a       	ori	r25, 0xAC	; 172
 1ee:	91 bb       	out	0x11, r25	; 17

 	DDRD |= 0xFF;
 1f0:	91 b3       	in	r25, 0x11	; 17
 1f2:	81 bb       	out	0x11, r24	; 17
 	MCUCR = 0x0F;
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	85 bf       	out	0x35, r24	; 53
 	GICR = 0xC0;
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	8b bf       	out	0x3b, r24	; 59
	
	PORTA = 0x00;
 1fc:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 1fe:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
 200:	12 ba       	out	0x12, r1	; 18
	
	UCSRA = 0x00;
 202:	1b b8       	out	0x0b, r1	; 11
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 204:	8a b1       	in	r24, 0x0a	; 10
 206:	88 61       	ori	r24, 0x18	; 24
 208:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);
 20a:	80 b5       	in	r24, 0x20	; 32
 20c:	86 68       	ori	r24, 0x86	; 134
 20e:	80 bd       	out	0x20, r24	; 32
	UBRRL = 25;  
 210:	89 e1       	ldi	r24, 0x19	; 25
 212:	89 b9       	out	0x09, r24	; 9
		
// 	TimerInit();
 	ACPInit();
 214:	0e 94 4e 00 	call	0x9c	; 0x9c <ACPInit>

	sei();
 218:	78 94       	sei
				numOfSamp = atoi(resc);				
				
				itoa(numOfSamp, string, 10);
				SendString(string);
			}
			else if (type == 't') // THESHOLD (1 - 1022)
 21a:	0f 2e       	mov	r0, r31
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	ef 2e       	mov	r14, r31
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	ff 2e       	mov	r15, r31
 224:	f0 2d       	mov	r31, r0
char acpMode = '0';
char workingMode = '0';
char command = '0';


int main(void)
 226:	87 01       	movw	r16, r14
 228:	0c 5f       	subi	r16, 0xFC	; 252
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
				{					
					resc[i] = UARTReceive();
				}
				treshold = atoi(resc);
				
				itoa(treshold, string, 10);
 22c:	0f 2e       	mov	r0, r31
 22e:	ff e7       	ldi	r31, 0x7F	; 127
 230:	cf 2e       	mov	r12, r31
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	df 2e       	mov	r13, r31
 236:	f0 2d       	mov	r31, r0

	sei();
	
	while(1)
	{	
		if (command == '1')
 238:	80 91 68 00 	lds	r24, 0x0068
 23c:	81 33       	cpi	r24, 0x31	; 49
 23e:	31 f4       	brne	.+12     	; 0x24c <main+0x7a>
		{
			ADCSRA |= (1<<ADSC);
 240:	36 9a       	sbi	0x06, 6	; 6
			command = UARTReceive();						
 242:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 246:	80 93 68 00 	sts	0x0068, r24
 24a:	f6 cf       	rjmp	.-20     	; 0x238 <main+0x66>
		}
		else if (command == '2')
 24c:	82 33       	cpi	r24, 0x32	; 50
 24e:	29 f4       	brne	.+10     	; 0x25a <main+0x88>
		{
			command = UARTReceive();
 250:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 254:	80 93 68 00 	sts	0x0068, r24
 258:	ef cf       	rjmp	.-34     	; 0x238 <main+0x66>
		}
		else if (command == '0')
 25a:	80 33       	cpi	r24, 0x30	; 48
 25c:	69 f7       	brne	.-38     	; 0x238 <main+0x66>
		{
			type = UARTReceive();
 25e:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 262:	80 93 72 00 	sts	0x0072, r24
			if (type == 'n') // NUMBER OF SAMPLES (1 - 9999)
 266:	8e 36       	cpi	r24, 0x6E	; 110
 268:	b9 f4       	brne	.+46     	; 0x298 <main+0xc6>
 26a:	e7 01       	movw	r28, r14
			{								
				for (int i = 0; i < 4; i++)
				{					
					resc[i] = UARTReceive();
 26c:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 270:	89 93       	st	Y+, r24
		else if (command == '0')
		{
			type = UARTReceive();
			if (type == 'n') // NUMBER OF SAMPLES (1 - 9999)
			{								
				for (int i = 0; i < 4; i++)
 272:	c0 17       	cp	r28, r16
 274:	d1 07       	cpc	r29, r17
 276:	d1 f7       	brne	.-12     	; 0x26c <main+0x9a>
				{					
					resc[i] = UARTReceive();
				}
				numOfSamp = atoi(resc);				
 278:	c7 01       	movw	r24, r14
 27a:	0e 94 65 03 	call	0x6ca	; 0x6ca <atoi>
 27e:	90 93 74 00 	sts	0x0074, r25
 282:	80 93 73 00 	sts	0x0073, r24
				
				itoa(numOfSamp, string, 10);
 286:	b6 01       	movw	r22, r12
 288:	4a e0       	ldi	r20, 0x0A	; 10
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	0e 94 83 03 	call	0x706	; 0x706 <itoa>
				SendString(string);
 290:	c6 01       	movw	r24, r12
 292:	0e 94 6e 00 	call	0xdc	; 0xdc <SendString>
 296:	31 c0       	rjmp	.+98     	; 0x2fa <main+0x128>
			}
			else if (type == 't') // THESHOLD (1 - 1022)
 298:	84 37       	cpi	r24, 0x74	; 116
 29a:	b9 f4       	brne	.+46     	; 0x2ca <main+0xf8>
 29c:	e7 01       	movw	r28, r14
			{
				for (int i = 0; i < 4; i++)
				{					
					resc[i] = UARTReceive();
 29e:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 2a2:	89 93       	st	Y+, r24
				itoa(numOfSamp, string, 10);
				SendString(string);
			}
			else if (type == 't') // THESHOLD (1 - 1022)
			{
				for (int i = 0; i < 4; i++)
 2a4:	c0 17       	cp	r28, r16
 2a6:	d1 07       	cpc	r29, r17
 2a8:	d1 f7       	brne	.-12     	; 0x29e <main+0xcc>
				{					
					resc[i] = UARTReceive();
				}
				treshold = atoi(resc);
 2aa:	c7 01       	movw	r24, r14
 2ac:	0e 94 65 03 	call	0x6ca	; 0x6ca <atoi>
 2b0:	90 93 76 00 	sts	0x0076, r25
 2b4:	80 93 75 00 	sts	0x0075, r24
				
				itoa(treshold, string, 10);
 2b8:	b6 01       	movw	r22, r12
 2ba:	4a e0       	ldi	r20, 0x0A	; 10
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	0e 94 83 03 	call	0x706	; 0x706 <itoa>
				SendString(string);
 2c2:	c6 01       	movw	r24, r12
 2c4:	0e 94 6e 00 	call	0xdc	; 0xdc <SendString>
 2c8:	18 c0       	rjmp	.+48     	; 0x2fa <main+0x128>
			}
			else if (type == 'a') // ACP MODE (1 - 8BIT; 2 - 10BIT)
 2ca:	81 36       	cpi	r24, 0x61	; 97
 2cc:	39 f4       	brne	.+14     	; 0x2dc <main+0x10a>
			{
				acpMode = UARTReceive();
 2ce:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 2d2:	80 93 66 00 	sts	0x0066, r24
				UARTSend(acpMode);				
 2d6:	0e 94 5f 00 	call	0xbe	; 0xbe <UARTSend>
 2da:	0f c0       	rjmp	.+30     	; 0x2fa <main+0x128>
			}
			else if (type == 'w') // WORKING MODE (1 - HIGHER THEN TRESHOLD; 2 - ALL; 3 - LOWER THEN TRESHOLD)
 2dc:	87 37       	cpi	r24, 0x77	; 119
 2de:	39 f4       	brne	.+14     	; 0x2ee <main+0x11c>
			{
				workingMode = UARTReceive();
 2e0:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 2e4:	80 93 67 00 	sts	0x0067, r24
				UARTSend(workingMode);
 2e8:	0e 94 5f 00 	call	0xbe	; 0xbe <UARTSend>
 2ec:	06 c0       	rjmp	.+12     	; 0x2fa <main+0x128>
				
			}
			else if (type == 'c') // COMMAND (1 - START; 2 - PAUSE; 3 - STOP)
 2ee:	83 36       	cpi	r24, 0x63	; 99
 2f0:	21 f4       	brne	.+8      	; 0x2fa <main+0x128>
			{							
				command = UARTReceive();
 2f2:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
 2f6:	80 93 68 00 	sts	0x0068, r24
			}
			
			type = '\0';
 2fa:	10 92 72 00 	sts	0x0072, r1
 2fe:	9c cf       	rjmp	.-200    	; 0x238 <main+0x66>

00000300 <NumToArr>:




void NumToArr(int numbr)
{	
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	e7 e7       	ldi	r30, 0x77	; 119
 306:	f0 e0       	ldi	r31, 0x00	; 0





void NumToArr(int numbr)
 308:	ef 01       	movw	r28, r30
 30a:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
 30c:	2a e0       	ldi	r18, 0x0A	; 10
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	b9 01       	movw	r22, r18
 312:	0e 94 3e 03 	call	0x67c	; 0x67c <__divmodhi4>
 316:	81 93       	st	Z+, r24
 318:	91 93       	st	Z+, r25
		numbr /= 10;
 31a:	86 2f       	mov	r24, r22
 31c:	97 2f       	mov	r25, r23



void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
 31e:	ec 17       	cp	r30, r28
 320:	fd 07       	cpc	r31, r29
 322:	b1 f7       	brne	.-20     	; 0x310 <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	08 95       	ret

0000032a <ReceiveString>:
{
	char ret[64];
	int i = 0;
	while(1)
	{
		char tmp = UARTReceive();
 32a:	0e 94 63 00 	call	0xc6	; 0xc6 <UARTReceive>
		if (tmp != '\0')
 32e:	88 23       	and	r24, r24
 330:	e1 f7       	brne	.-8      	; 0x32a <ReceiveString>
		{
			break;
		}
	}
	str = *ret;
}
 332:	08 95       	ret

00000334 <ToggleACP>:

void ToggleACP(int en)
{
	if (en == 0)
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	19 f4       	brne	.+6      	; 0x33e <ToggleACP+0xa>
	{
		PORTD = RED;
 338:	80 e8       	ldi	r24, 0x80	; 128
 33a:	82 bb       	out	0x12, r24	; 18
 33c:	08 95       	ret
	}
	else if (en == 1)
 33e:	81 30       	cpi	r24, 0x01	; 1
 340:	91 05       	cpc	r25, r1
 342:	11 f4       	brne	.+4      	; 0x348 <ToggleACP+0x14>
	{
		PORTD = GREEN;	
 344:	80 e2       	ldi	r24, 0x20	; 32
 346:	82 bb       	out	0x12, r24	; 18
 348:	08 95       	ret

0000034a <SwitchACPMode>:
	} 
}

void SwitchACPMode(int mode)
{
	switch(mode)
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	91 05       	cpc	r25, r1
 34e:	39 f0       	breq	.+14     	; 0x35e <SwitchACPMode+0x14>
 350:	82 30       	cpi	r24, 0x02	; 2
 352:	91 05       	cpc	r25, r1
 354:	69 f0       	breq	.+26     	; 0x370 <SwitchACPMode+0x26>
 356:	00 97       	sbiw	r24, 0x00	; 0
 358:	e1 f5       	brne	.+120    	; 0x3d2 <SwitchACPMode+0x88>
	{
		case 0: 
			DDRC = 0x0;
 35a:	14 ba       	out	0x14, r1	; 20
			break;
 35c:	08 95       	ret
		case 1:		
			DDRC = 0xFF;
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	84 bb       	out	0x14, r24	; 20
			NumToArr(res);	
 362:	80 91 6c 00 	lds	r24, 0x006C
 366:	90 91 6d 00 	lds	r25, 0x006D
 36a:	0e 94 80 01 	call	0x300	; 0x300 <NumToArr>
			break;			
 36e:	08 95       	ret
		case 2:
			DDRC = 0xFF;
 370:	8f ef       	ldi	r24, 0xFF	; 255
 372:	84 bb       	out	0x14, r24	; 20
			volt = (float)((0.5 * res) / 1024) * 10000;
 374:	60 91 6c 00 	lds	r22, 0x006C
 378:	70 91 6d 00 	lds	r23, 0x006D
 37c:	88 27       	eor	r24, r24
 37e:	77 fd       	sbrc	r23, 7
 380:	80 95       	com	r24
 382:	98 2f       	mov	r25, r24
 384:	0e 94 4f 02 	call	0x49e	; 0x49e <__floatsisf>
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	5f e3       	ldi	r21, 0x3F	; 63
 390:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	40 e8       	ldi	r20, 0x80	; 128
 39a:	5a e3       	ldi	r21, 0x3A	; 58
 39c:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e4       	ldi	r19, 0x40	; 64
 3a4:	4c e1       	ldi	r20, 0x1C	; 28
 3a6:	56 e4       	ldi	r21, 0x46	; 70
 3a8:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 3ac:	26 2f       	mov	r18, r22
 3ae:	37 2f       	mov	r19, r23
 3b0:	48 2f       	mov	r20, r24
 3b2:	59 2f       	mov	r21, r25
 3b4:	20 93 62 00 	sts	0x0062, r18
 3b8:	30 93 63 00 	sts	0x0063, r19
 3bc:	40 93 64 00 	sts	0x0064, r20
 3c0:	50 93 65 00 	sts	0x0065, r21
 			NumToArr(volt);
 3c4:	0e 94 1c 02 	call	0x438	; 0x438 <__fixsfsi>
 3c8:	dc 01       	movw	r26, r24
 3ca:	cb 01       	movw	r24, r22
 3cc:	0e 94 80 01 	call	0x300	; 0x300 <NumToArr>
			break;
 3d0:	08 95       	ret
		default:
			DDRC = 0x0;
 3d2:	14 ba       	out	0x14, r1	; 20
 3d4:	08 95       	ret

000003d6 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 3d6:	84 30       	cpi	r24, 0x04	; 4
 3d8:	f9 f0       	breq	.+62     	; 0x418 <DecToDigit+0x42>
 3da:	85 30       	cpi	r24, 0x05	; 5
 3dc:	48 f4       	brcc	.+18     	; 0x3f0 <DecToDigit+0x1a>
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	49 f1       	breq	.+82     	; 0x434 <DecToDigit+0x5e>
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	98 f0       	brcs	.+38     	; 0x40c <DecToDigit+0x36>
 3e6:	82 30       	cpi	r24, 0x02	; 2
 3e8:	99 f0       	breq	.+38     	; 0x410 <DecToDigit+0x3a>
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	09 f5       	brne	.+66     	; 0x430 <DecToDigit+0x5a>
 3ee:	12 c0       	rjmp	.+36     	; 0x414 <DecToDigit+0x3e>
 3f0:	87 30       	cpi	r24, 0x07	; 7
 3f2:	c1 f0       	breq	.+48     	; 0x424 <DecToDigit+0x4e>
 3f4:	88 30       	cpi	r24, 0x08	; 8
 3f6:	28 f4       	brcc	.+10     	; 0x402 <DecToDigit+0x2c>
 3f8:	85 30       	cpi	r24, 0x05	; 5
 3fa:	81 f0       	breq	.+32     	; 0x41c <DecToDigit+0x46>
 3fc:	86 30       	cpi	r24, 0x06	; 6
 3fe:	c1 f4       	brne	.+48     	; 0x430 <DecToDigit+0x5a>
 400:	0f c0       	rjmp	.+30     	; 0x420 <DecToDigit+0x4a>
 402:	88 30       	cpi	r24, 0x08	; 8
 404:	89 f0       	breq	.+34     	; 0x428 <DecToDigit+0x52>
 406:	89 30       	cpi	r24, 0x09	; 9
 408:	99 f4       	brne	.+38     	; 0x430 <DecToDigit+0x5a>
 40a:	10 c0       	rjmp	.+32     	; 0x42c <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 40c:	8f e5       	ldi	r24, 0x5F	; 95
 40e:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 410:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 412:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 414:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 416:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 418:	86 e6       	ldi	r24, 0x66	; 102
			break;
 41a:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 41c:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 41e:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 420:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 422:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 424:	87 e0       	ldi	r24, 0x07	; 7
			break;
 426:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 428:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 42a:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 42c:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 42e:	08 95       	ret
		default:
			Digit = 0b00000000;
 430:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 432:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 434:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
 436:	08 95       	ret

00000438 <__fixsfsi>:
 438:	04 d0       	rcall	.+8      	; 0x442 <__fixunssfsi>
 43a:	68 94       	set
 43c:	b1 11       	cpse	r27, r1
 43e:	8d c0       	rjmp	.+282    	; 0x55a <__fp_szero>
 440:	08 95       	ret

00000442 <__fixunssfsi>:
 442:	70 d0       	rcall	.+224    	; 0x524 <__fp_splitA>
 444:	88 f0       	brcs	.+34     	; 0x468 <__stack+0x9>
 446:	9f 57       	subi	r25, 0x7F	; 127
 448:	90 f0       	brcs	.+36     	; 0x46e <__stack+0xf>
 44a:	b9 2f       	mov	r27, r25
 44c:	99 27       	eor	r25, r25
 44e:	b7 51       	subi	r27, 0x17	; 23
 450:	a0 f0       	brcs	.+40     	; 0x47a <__stack+0x1b>
 452:	d1 f0       	breq	.+52     	; 0x488 <__stack+0x29>
 454:	66 0f       	add	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	88 1f       	adc	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	1a f0       	brmi	.+6      	; 0x464 <__stack+0x5>
 45e:	ba 95       	dec	r27
 460:	c9 f7       	brne	.-14     	; 0x454 <__fixunssfsi+0x12>
 462:	12 c0       	rjmp	.+36     	; 0x488 <__stack+0x29>
 464:	b1 30       	cpi	r27, 0x01	; 1
 466:	81 f0       	breq	.+32     	; 0x488 <__stack+0x29>
 468:	77 d0       	rcall	.+238    	; 0x558 <__fp_zero>
 46a:	b1 e0       	ldi	r27, 0x01	; 1
 46c:	08 95       	ret
 46e:	74 c0       	rjmp	.+232    	; 0x558 <__fp_zero>
 470:	67 2f       	mov	r22, r23
 472:	78 2f       	mov	r23, r24
 474:	88 27       	eor	r24, r24
 476:	b8 5f       	subi	r27, 0xF8	; 248
 478:	39 f0       	breq	.+14     	; 0x488 <__stack+0x29>
 47a:	b9 3f       	cpi	r27, 0xF9	; 249
 47c:	cc f3       	brlt	.-14     	; 0x470 <__stack+0x11>
 47e:	86 95       	lsr	r24
 480:	77 95       	ror	r23
 482:	67 95       	ror	r22
 484:	b3 95       	inc	r27
 486:	d9 f7       	brne	.-10     	; 0x47e <__stack+0x1f>
 488:	3e f4       	brtc	.+14     	; 0x498 <__stack+0x39>
 48a:	90 95       	com	r25
 48c:	80 95       	com	r24
 48e:	70 95       	com	r23
 490:	61 95       	neg	r22
 492:	7f 4f       	sbci	r23, 0xFF	; 255
 494:	8f 4f       	sbci	r24, 0xFF	; 255
 496:	9f 4f       	sbci	r25, 0xFF	; 255
 498:	08 95       	ret

0000049a <__floatunsisf>:
 49a:	e8 94       	clt
 49c:	09 c0       	rjmp	.+18     	; 0x4b0 <__floatsisf+0x12>

0000049e <__floatsisf>:
 49e:	97 fb       	bst	r25, 7
 4a0:	3e f4       	brtc	.+14     	; 0x4b0 <__floatsisf+0x12>
 4a2:	90 95       	com	r25
 4a4:	80 95       	com	r24
 4a6:	70 95       	com	r23
 4a8:	61 95       	neg	r22
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	99 23       	and	r25, r25
 4b2:	a9 f0       	breq	.+42     	; 0x4de <__floatsisf+0x40>
 4b4:	f9 2f       	mov	r31, r25
 4b6:	96 e9       	ldi	r25, 0x96	; 150
 4b8:	bb 27       	eor	r27, r27
 4ba:	93 95       	inc	r25
 4bc:	f6 95       	lsr	r31
 4be:	87 95       	ror	r24
 4c0:	77 95       	ror	r23
 4c2:	67 95       	ror	r22
 4c4:	b7 95       	ror	r27
 4c6:	f1 11       	cpse	r31, r1
 4c8:	f8 cf       	rjmp	.-16     	; 0x4ba <__floatsisf+0x1c>
 4ca:	fa f4       	brpl	.+62     	; 0x50a <__floatsisf+0x6c>
 4cc:	bb 0f       	add	r27, r27
 4ce:	11 f4       	brne	.+4      	; 0x4d4 <__floatsisf+0x36>
 4d0:	60 ff       	sbrs	r22, 0
 4d2:	1b c0       	rjmp	.+54     	; 0x50a <__floatsisf+0x6c>
 4d4:	6f 5f       	subi	r22, 0xFF	; 255
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	16 c0       	rjmp	.+44     	; 0x50a <__floatsisf+0x6c>
 4de:	88 23       	and	r24, r24
 4e0:	11 f0       	breq	.+4      	; 0x4e6 <__floatsisf+0x48>
 4e2:	96 e9       	ldi	r25, 0x96	; 150
 4e4:	11 c0       	rjmp	.+34     	; 0x508 <__floatsisf+0x6a>
 4e6:	77 23       	and	r23, r23
 4e8:	21 f0       	breq	.+8      	; 0x4f2 <__floatsisf+0x54>
 4ea:	9e e8       	ldi	r25, 0x8E	; 142
 4ec:	87 2f       	mov	r24, r23
 4ee:	76 2f       	mov	r23, r22
 4f0:	05 c0       	rjmp	.+10     	; 0x4fc <__floatsisf+0x5e>
 4f2:	66 23       	and	r22, r22
 4f4:	71 f0       	breq	.+28     	; 0x512 <__floatsisf+0x74>
 4f6:	96 e8       	ldi	r25, 0x86	; 134
 4f8:	86 2f       	mov	r24, r22
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	2a f0       	brmi	.+10     	; 0x50a <__floatsisf+0x6c>
 500:	9a 95       	dec	r25
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	88 1f       	adc	r24, r24
 508:	da f7       	brpl	.-10     	; 0x500 <__floatsisf+0x62>
 50a:	88 0f       	add	r24, r24
 50c:	96 95       	lsr	r25
 50e:	87 95       	ror	r24
 510:	97 f9       	bld	r25, 7
 512:	08 95       	ret

00000514 <__fp_split3>:
 514:	57 fd       	sbrc	r21, 7
 516:	90 58       	subi	r25, 0x80	; 128
 518:	44 0f       	add	r20, r20
 51a:	55 1f       	adc	r21, r21
 51c:	59 f0       	breq	.+22     	; 0x534 <__fp_splitA+0x10>
 51e:	5f 3f       	cpi	r21, 0xFF	; 255
 520:	71 f0       	breq	.+28     	; 0x53e <__fp_splitA+0x1a>
 522:	47 95       	ror	r20

00000524 <__fp_splitA>:
 524:	88 0f       	add	r24, r24
 526:	97 fb       	bst	r25, 7
 528:	99 1f       	adc	r25, r25
 52a:	61 f0       	breq	.+24     	; 0x544 <__fp_splitA+0x20>
 52c:	9f 3f       	cpi	r25, 0xFF	; 255
 52e:	79 f0       	breq	.+30     	; 0x54e <__fp_splitA+0x2a>
 530:	87 95       	ror	r24
 532:	08 95       	ret
 534:	12 16       	cp	r1, r18
 536:	13 06       	cpc	r1, r19
 538:	14 06       	cpc	r1, r20
 53a:	55 1f       	adc	r21, r21
 53c:	f2 cf       	rjmp	.-28     	; 0x522 <__fp_split3+0xe>
 53e:	46 95       	lsr	r20
 540:	f1 df       	rcall	.-30     	; 0x524 <__fp_splitA>
 542:	08 c0       	rjmp	.+16     	; 0x554 <__fp_splitA+0x30>
 544:	16 16       	cp	r1, r22
 546:	17 06       	cpc	r1, r23
 548:	18 06       	cpc	r1, r24
 54a:	99 1f       	adc	r25, r25
 54c:	f1 cf       	rjmp	.-30     	; 0x530 <__fp_splitA+0xc>
 54e:	86 95       	lsr	r24
 550:	71 05       	cpc	r23, r1
 552:	61 05       	cpc	r22, r1
 554:	08 94       	sec
 556:	08 95       	ret

00000558 <__fp_zero>:
 558:	e8 94       	clt

0000055a <__fp_szero>:
 55a:	bb 27       	eor	r27, r27
 55c:	66 27       	eor	r22, r22
 55e:	77 27       	eor	r23, r23
 560:	cb 01       	movw	r24, r22
 562:	97 f9       	bld	r25, 7
 564:	08 95       	ret

00000566 <__mulsf3>:
 566:	0b d0       	rcall	.+22     	; 0x57e <__mulsf3x>
 568:	78 c0       	rjmp	.+240    	; 0x65a <__fp_round>
 56a:	69 d0       	rcall	.+210    	; 0x63e <__fp_pscA>
 56c:	28 f0       	brcs	.+10     	; 0x578 <__mulsf3+0x12>
 56e:	6e d0       	rcall	.+220    	; 0x64c <__fp_pscB>
 570:	18 f0       	brcs	.+6      	; 0x578 <__mulsf3+0x12>
 572:	95 23       	and	r25, r21
 574:	09 f0       	breq	.+2      	; 0x578 <__mulsf3+0x12>
 576:	5a c0       	rjmp	.+180    	; 0x62c <__fp_inf>
 578:	5f c0       	rjmp	.+190    	; 0x638 <__fp_nan>
 57a:	11 24       	eor	r1, r1
 57c:	ee cf       	rjmp	.-36     	; 0x55a <__fp_szero>

0000057e <__mulsf3x>:
 57e:	ca df       	rcall	.-108    	; 0x514 <__fp_split3>
 580:	a0 f3       	brcs	.-24     	; 0x56a <__mulsf3+0x4>

00000582 <__mulsf3_pse>:
 582:	95 9f       	mul	r25, r21
 584:	d1 f3       	breq	.-12     	; 0x57a <__mulsf3+0x14>
 586:	95 0f       	add	r25, r21
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	55 1f       	adc	r21, r21
 58c:	62 9f       	mul	r22, r18
 58e:	f0 01       	movw	r30, r0
 590:	72 9f       	mul	r23, r18
 592:	bb 27       	eor	r27, r27
 594:	f0 0d       	add	r31, r0
 596:	b1 1d       	adc	r27, r1
 598:	63 9f       	mul	r22, r19
 59a:	aa 27       	eor	r26, r26
 59c:	f0 0d       	add	r31, r0
 59e:	b1 1d       	adc	r27, r1
 5a0:	aa 1f       	adc	r26, r26
 5a2:	64 9f       	mul	r22, r20
 5a4:	66 27       	eor	r22, r22
 5a6:	b0 0d       	add	r27, r0
 5a8:	a1 1d       	adc	r26, r1
 5aa:	66 1f       	adc	r22, r22
 5ac:	82 9f       	mul	r24, r18
 5ae:	22 27       	eor	r18, r18
 5b0:	b0 0d       	add	r27, r0
 5b2:	a1 1d       	adc	r26, r1
 5b4:	62 1f       	adc	r22, r18
 5b6:	73 9f       	mul	r23, r19
 5b8:	b0 0d       	add	r27, r0
 5ba:	a1 1d       	adc	r26, r1
 5bc:	62 1f       	adc	r22, r18
 5be:	83 9f       	mul	r24, r19
 5c0:	a0 0d       	add	r26, r0
 5c2:	61 1d       	adc	r22, r1
 5c4:	22 1f       	adc	r18, r18
 5c6:	74 9f       	mul	r23, r20
 5c8:	33 27       	eor	r19, r19
 5ca:	a0 0d       	add	r26, r0
 5cc:	61 1d       	adc	r22, r1
 5ce:	23 1f       	adc	r18, r19
 5d0:	84 9f       	mul	r24, r20
 5d2:	60 0d       	add	r22, r0
 5d4:	21 1d       	adc	r18, r1
 5d6:	82 2f       	mov	r24, r18
 5d8:	76 2f       	mov	r23, r22
 5da:	6a 2f       	mov	r22, r26
 5dc:	11 24       	eor	r1, r1
 5de:	9f 57       	subi	r25, 0x7F	; 127
 5e0:	50 40       	sbci	r21, 0x00	; 0
 5e2:	8a f0       	brmi	.+34     	; 0x606 <__mulsf3_pse+0x84>
 5e4:	e1 f0       	breq	.+56     	; 0x61e <__mulsf3_pse+0x9c>
 5e6:	88 23       	and	r24, r24
 5e8:	4a f0       	brmi	.+18     	; 0x5fc <__mulsf3_pse+0x7a>
 5ea:	ee 0f       	add	r30, r30
 5ec:	ff 1f       	adc	r31, r31
 5ee:	bb 1f       	adc	r27, r27
 5f0:	66 1f       	adc	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	88 1f       	adc	r24, r24
 5f6:	91 50       	subi	r25, 0x01	; 1
 5f8:	50 40       	sbci	r21, 0x00	; 0
 5fa:	a9 f7       	brne	.-22     	; 0x5e6 <__mulsf3_pse+0x64>
 5fc:	9e 3f       	cpi	r25, 0xFE	; 254
 5fe:	51 05       	cpc	r21, r1
 600:	70 f0       	brcs	.+28     	; 0x61e <__mulsf3_pse+0x9c>
 602:	14 c0       	rjmp	.+40     	; 0x62c <__fp_inf>
 604:	aa cf       	rjmp	.-172    	; 0x55a <__fp_szero>
 606:	5f 3f       	cpi	r21, 0xFF	; 255
 608:	ec f3       	brlt	.-6      	; 0x604 <__mulsf3_pse+0x82>
 60a:	98 3e       	cpi	r25, 0xE8	; 232
 60c:	dc f3       	brlt	.-10     	; 0x604 <__mulsf3_pse+0x82>
 60e:	86 95       	lsr	r24
 610:	77 95       	ror	r23
 612:	67 95       	ror	r22
 614:	b7 95       	ror	r27
 616:	f7 95       	ror	r31
 618:	e7 95       	ror	r30
 61a:	9f 5f       	subi	r25, 0xFF	; 255
 61c:	c1 f7       	brne	.-16     	; 0x60e <__mulsf3_pse+0x8c>
 61e:	fe 2b       	or	r31, r30
 620:	88 0f       	add	r24, r24
 622:	91 1d       	adc	r25, r1
 624:	96 95       	lsr	r25
 626:	87 95       	ror	r24
 628:	97 f9       	bld	r25, 7
 62a:	08 95       	ret

0000062c <__fp_inf>:
 62c:	97 f9       	bld	r25, 7
 62e:	9f 67       	ori	r25, 0x7F	; 127
 630:	80 e8       	ldi	r24, 0x80	; 128
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	08 95       	ret

00000638 <__fp_nan>:
 638:	9f ef       	ldi	r25, 0xFF	; 255
 63a:	80 ec       	ldi	r24, 0xC0	; 192
 63c:	08 95       	ret

0000063e <__fp_pscA>:
 63e:	00 24       	eor	r0, r0
 640:	0a 94       	dec	r0
 642:	16 16       	cp	r1, r22
 644:	17 06       	cpc	r1, r23
 646:	18 06       	cpc	r1, r24
 648:	09 06       	cpc	r0, r25
 64a:	08 95       	ret

0000064c <__fp_pscB>:
 64c:	00 24       	eor	r0, r0
 64e:	0a 94       	dec	r0
 650:	12 16       	cp	r1, r18
 652:	13 06       	cpc	r1, r19
 654:	14 06       	cpc	r1, r20
 656:	05 06       	cpc	r0, r21
 658:	08 95       	ret

0000065a <__fp_round>:
 65a:	09 2e       	mov	r0, r25
 65c:	03 94       	inc	r0
 65e:	00 0c       	add	r0, r0
 660:	11 f4       	brne	.+4      	; 0x666 <__fp_round+0xc>
 662:	88 23       	and	r24, r24
 664:	52 f0       	brmi	.+20     	; 0x67a <__fp_round+0x20>
 666:	bb 0f       	add	r27, r27
 668:	40 f4       	brcc	.+16     	; 0x67a <__fp_round+0x20>
 66a:	bf 2b       	or	r27, r31
 66c:	11 f4       	brne	.+4      	; 0x672 <__fp_round+0x18>
 66e:	60 ff       	sbrs	r22, 0
 670:	04 c0       	rjmp	.+8      	; 0x67a <__fp_round+0x20>
 672:	6f 5f       	subi	r22, 0xFF	; 255
 674:	7f 4f       	sbci	r23, 0xFF	; 255
 676:	8f 4f       	sbci	r24, 0xFF	; 255
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__divmodhi4>:
 67c:	97 fb       	bst	r25, 7
 67e:	09 2e       	mov	r0, r25
 680:	07 26       	eor	r0, r23
 682:	0a d0       	rcall	.+20     	; 0x698 <__divmodhi4_neg1>
 684:	77 fd       	sbrc	r23, 7
 686:	04 d0       	rcall	.+8      	; 0x690 <__divmodhi4_neg2>
 688:	0c d0       	rcall	.+24     	; 0x6a2 <__udivmodhi4>
 68a:	06 d0       	rcall	.+12     	; 0x698 <__divmodhi4_neg1>
 68c:	00 20       	and	r0, r0
 68e:	1a f4       	brpl	.+6      	; 0x696 <__divmodhi4_exit>

00000690 <__divmodhi4_neg2>:
 690:	70 95       	com	r23
 692:	61 95       	neg	r22
 694:	7f 4f       	sbci	r23, 0xFF	; 255

00000696 <__divmodhi4_exit>:
 696:	08 95       	ret

00000698 <__divmodhi4_neg1>:
 698:	f6 f7       	brtc	.-4      	; 0x696 <__divmodhi4_exit>
 69a:	90 95       	com	r25
 69c:	81 95       	neg	r24
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	08 95       	ret

000006a2 <__udivmodhi4>:
 6a2:	aa 1b       	sub	r26, r26
 6a4:	bb 1b       	sub	r27, r27
 6a6:	51 e1       	ldi	r21, 0x11	; 17
 6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <__udivmodhi4_ep>

000006aa <__udivmodhi4_loop>:
 6aa:	aa 1f       	adc	r26, r26
 6ac:	bb 1f       	adc	r27, r27
 6ae:	a6 17       	cp	r26, r22
 6b0:	b7 07       	cpc	r27, r23
 6b2:	10 f0       	brcs	.+4      	; 0x6b8 <__udivmodhi4_ep>
 6b4:	a6 1b       	sub	r26, r22
 6b6:	b7 0b       	sbc	r27, r23

000006b8 <__udivmodhi4_ep>:
 6b8:	88 1f       	adc	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	5a 95       	dec	r21
 6be:	a9 f7       	brne	.-22     	; 0x6aa <__udivmodhi4_loop>
 6c0:	80 95       	com	r24
 6c2:	90 95       	com	r25
 6c4:	bc 01       	movw	r22, r24
 6c6:	cd 01       	movw	r24, r26
 6c8:	08 95       	ret

000006ca <atoi>:
 6ca:	fc 01       	movw	r30, r24
 6cc:	88 27       	eor	r24, r24
 6ce:	99 27       	eor	r25, r25
 6d0:	e8 94       	clt
 6d2:	21 91       	ld	r18, Z+
 6d4:	20 32       	cpi	r18, 0x20	; 32
 6d6:	e9 f3       	breq	.-6      	; 0x6d2 <atoi+0x8>
 6d8:	29 30       	cpi	r18, 0x09	; 9
 6da:	10 f0       	brcs	.+4      	; 0x6e0 <atoi+0x16>
 6dc:	2e 30       	cpi	r18, 0x0E	; 14
 6de:	c8 f3       	brcs	.-14     	; 0x6d2 <atoi+0x8>
 6e0:	2b 32       	cpi	r18, 0x2B	; 43
 6e2:	41 f0       	breq	.+16     	; 0x6f4 <atoi+0x2a>
 6e4:	2d 32       	cpi	r18, 0x2D	; 45
 6e6:	39 f4       	brne	.+14     	; 0x6f6 <atoi+0x2c>
 6e8:	68 94       	set
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <atoi+0x2a>
 6ec:	0e 94 a4 03 	call	0x748	; 0x748 <__mulhi_const_10>
 6f0:	82 0f       	add	r24, r18
 6f2:	91 1d       	adc	r25, r1
 6f4:	21 91       	ld	r18, Z+
 6f6:	20 53       	subi	r18, 0x30	; 48
 6f8:	2a 30       	cpi	r18, 0x0A	; 10
 6fa:	c0 f3       	brcs	.-16     	; 0x6ec <atoi+0x22>
 6fc:	1e f4       	brtc	.+6      	; 0x704 <atoi+0x3a>
 6fe:	90 95       	com	r25
 700:	81 95       	neg	r24
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	08 95       	ret

00000706 <itoa>:
 706:	fb 01       	movw	r30, r22
 708:	9f 01       	movw	r18, r30
 70a:	e8 94       	clt
 70c:	42 30       	cpi	r20, 0x02	; 2
 70e:	c4 f0       	brlt	.+48     	; 0x740 <itoa+0x3a>
 710:	45 32       	cpi	r20, 0x25	; 37
 712:	b4 f4       	brge	.+44     	; 0x740 <itoa+0x3a>
 714:	4a 30       	cpi	r20, 0x0A	; 10
 716:	29 f4       	brne	.+10     	; 0x722 <itoa+0x1c>
 718:	97 fb       	bst	r25, 7
 71a:	1e f4       	brtc	.+6      	; 0x722 <itoa+0x1c>
 71c:	90 95       	com	r25
 71e:	81 95       	neg	r24
 720:	9f 4f       	sbci	r25, 0xFF	; 255
 722:	64 2f       	mov	r22, r20
 724:	77 27       	eor	r23, r23
 726:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__udivmodhi4>
 72a:	80 5d       	subi	r24, 0xD0	; 208
 72c:	8a 33       	cpi	r24, 0x3A	; 58
 72e:	0c f0       	brlt	.+2      	; 0x732 <itoa+0x2c>
 730:	89 5d       	subi	r24, 0xD9	; 217
 732:	81 93       	st	Z+, r24
 734:	cb 01       	movw	r24, r22
 736:	00 97       	sbiw	r24, 0x00	; 0
 738:	a1 f7       	brne	.-24     	; 0x722 <itoa+0x1c>
 73a:	16 f4       	brtc	.+4      	; 0x740 <itoa+0x3a>
 73c:	5d e2       	ldi	r21, 0x2D	; 45
 73e:	51 93       	st	Z+, r21
 740:	10 82       	st	Z, r1
 742:	c9 01       	movw	r24, r18
 744:	0c 94 ac 03 	jmp	0x758	; 0x758 <strrev>

00000748 <__mulhi_const_10>:
 748:	7a e0       	ldi	r23, 0x0A	; 10
 74a:	97 9f       	mul	r25, r23
 74c:	90 2d       	mov	r25, r0
 74e:	87 9f       	mul	r24, r23
 750:	80 2d       	mov	r24, r0
 752:	91 0d       	add	r25, r1
 754:	11 24       	eor	r1, r1
 756:	08 95       	ret

00000758 <strrev>:
 758:	dc 01       	movw	r26, r24
 75a:	fc 01       	movw	r30, r24
 75c:	67 2f       	mov	r22, r23
 75e:	71 91       	ld	r23, Z+
 760:	77 23       	and	r23, r23
 762:	e1 f7       	brne	.-8      	; 0x75c <strrev+0x4>
 764:	32 97       	sbiw	r30, 0x02	; 2
 766:	04 c0       	rjmp	.+8      	; 0x770 <strrev+0x18>
 768:	7c 91       	ld	r23, X
 76a:	6d 93       	st	X+, r22
 76c:	70 83       	st	Z, r23
 76e:	62 91       	ld	r22, -Z
 770:	ae 17       	cp	r26, r30
 772:	bf 07       	cpc	r27, r31
 774:	c8 f3       	brcs	.-14     	; 0x768 <strrev+0x10>
 776:	08 95       	ret

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
