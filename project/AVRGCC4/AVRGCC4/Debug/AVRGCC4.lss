
AVRGCC4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000702  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800060  00800060  00000776  2**0
                  ALLOC
  2 .stab         000016e0  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005b1  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00002409  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000ec  00000000  00000000  00002429  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002bb  00000000  00000000  00002515  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000176  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000467  00000000  00000000  00002946  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00002db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000132  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a3  00000000  00000000  00002fa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000002b  00000000  00000000  00003145  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_1>
   8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_2>
   c:	0c 94 a1 01 	jmp	0x342	; 0x342 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 37       	cpi	r26, 0x76	; 118
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  74:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TimerInit>:

}

void TimerInit()
{
	MCUCR = 0x0F;
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
  80:	80 ec       	ldi	r24, 0xC0	; 192
  82:	8b bf       	out	0x3b, r24	; 59
// 	TCCR0 |= (1 << WGM01) | (1 << CS01) | (1 << CS00);
// 	OCR0 = 20;
//  TIMSK |= (1 << OCIE0);

	//TIMER1
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
  84:	8f b5       	in	r24, 0x2f	; 47
  86:	81 6a       	ori	r24, 0xA1	; 161
  88:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12) | (1<<CS10);
  8a:	8e b5       	in	r24, 0x2e	; 46
  8c:	89 60       	ori	r24, 0x09	; 9
  8e:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 4;
  90:	84 e0       	ldi	r24, 0x04	; 4
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	9b bd       	out	0x2b, r25	; 43
  96:	8a bd       	out	0x2a, r24	; 42
//	TIMSK |= (1 << OCIE1A);	
//	TIMSK |= (1 << TOIE1);
	TIFR |= (1 << TOV1);
  98:	88 b7       	in	r24, 0x38	; 56
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	88 bf       	out	0x38, r24	; 56
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
  9e:	85 b5       	in	r24, 0x25	; 37
  a0:	8e 60       	ori	r24, 0x0E	; 14
  a2:	85 bd       	out	0x25, r24	; 37
	OCR2 = 10;
  a4:	8a e0       	ldi	r24, 0x0A	; 10
  a6:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
  a8:	89 b7       	in	r24, 0x39	; 57
  aa:	80 68       	ori	r24, 0x80	; 128
  ac:	89 bf       	out	0x39, r24	; 57
}
  ae:	08 95       	ret

000000b0 <ACPInit>:

void ACPInit()
{
	ADMUX |= (1<<REFS0) | (1<<MUX1); 
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	82 64       	ori	r24, 0x42	; 66
  b4:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
  b6:	86 b1       	in	r24, 0x06	; 6
  b8:	88 66       	ori	r24, 0x68	; 104
  ba:	86 b9       	out	0x06, r24	; 6
//	SFIOR |= (1<<ADTS2) | (1<<ADTS1);
	
	//ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
}
  bc:	08 95       	ret

000000be <main>:
int j = 0;
int arr[DIGITS];

int main(void)
{
	DDRA = 0xF0;
  be:	80 ef       	ldi	r24, 0xF0	; 240
  c0:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1 | BTN2 | RED | GREEN;
  c6:	81 b3       	in	r24, 0x11	; 17
  c8:	8c 6a       	ori	r24, 0xAC	; 172
  ca:	81 bb       	out	0x11, r24	; 17
	
	PORTA = 0x00;
  cc:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
  ce:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
  d0:	12 ba       	out	0x12, r1	; 18
	
	PORTD |= RED;
  d2:	95 9a       	sbi	0x12, 5	; 18
		
 	TimerInit();
  d4:	0e 94 3e 00 	call	0x7c	; 0x7c <TimerInit>
 	ACPInit();
  d8:	0e 94 58 00 	call	0xb0	; 0xb0 <ACPInit>
	
// 	ADMUX |= (1<<REFS0) | (1<<MUX1); 
// 	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);

	sei();
  dc:	78 94       	sei
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x20>

000000e0 <__vector_14>:
	
	//ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
}

ISR(ADC_vect)
{	
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	3f 93       	push	r19
  ee:	4f 93       	push	r20
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
	if (enACP == 0)
  f8:	80 91 62 00 	lds	r24, 0x0062
  fc:	90 91 63 00 	lds	r25, 0x0063
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	81 f4       	brne	.+32     	; 0x124 <__vector_14+0x44>
	{
		res = 0;
 104:	10 92 6b 00 	sts	0x006B, r1
 108:	10 92 6a 00 	sts	0x006A, r1
		volt = 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	dc 01       	movw	r26, r24
 112:	80 93 66 00 	sts	0x0066, r24
 116:	90 93 67 00 	sts	0x0067, r25
 11a:	a0 93 68 00 	sts	0x0068, r26
 11e:	b0 93 69 00 	sts	0x0069, r27
 122:	0f c0       	rjmp	.+30     	; 0x142 <__vector_14+0x62>
	}
	else 
	{
		res = ADCL;
 124:	24 b1       	in	r18, 0x04	; 4
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	30 93 6b 00 	sts	0x006B, r19
 12c:	20 93 6a 00 	sts	0x006A, r18
		res |= (ADCH << 8);
 130:	45 b1       	in	r20, 0x05	; 5
 132:	94 2f       	mov	r25, r20
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	82 2b       	or	r24, r18
 138:	93 2b       	or	r25, r19
 13a:	90 93 6b 00 	sts	0x006B, r25
 13e:	80 93 6a 00 	sts	0x006A, r24
	}	
}
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	4f 91       	pop	r20
 14c:	3f 91       	pop	r19
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_2>:
	
	ToggleACP(enACP);
}

ISR(INT1_vect)
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
	modeACP++;
 168:	80 91 64 00 	lds	r24, 0x0064
 16c:	90 91 65 00 	lds	r25, 0x0065
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	90 93 65 00 	sts	0x0065, r25
 176:	80 93 64 00 	sts	0x0064, r24
	if (modeACP >= 3)
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	91 05       	cpc	r25, r1
 17e:	24 f0       	brlt	.+8      	; 0x188 <__vector_2+0x2e>
	{
		modeACP = 0;
 180:	10 92 65 00 	sts	0x0065, r1
 184:	10 92 64 00 	sts	0x0064, r1
	}
}
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <ToggleACP>:

void ToggleACP(int en)
{
	//ADCSRA ^= (1<<ADEN);
	
	if (en == 0)
 196:	00 97       	sbiw	r24, 0x00	; 0
 198:	29 f4       	brne	.+10     	; 0x1a4 <ToggleACP+0xe>
	{
		PORTD = RED;
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	82 bb       	out	0x12, r24	; 18
// 		res = 0;
// 		volt = 0;
		ADCSRA = (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
 19e:	88 e6       	ldi	r24, 0x68	; 104
 1a0:	86 b9       	out	0x06, r24	; 6
 1a2:	08 95       	ret
	}
	else if (en == 1)
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	91 05       	cpc	r25, r1
 1a8:	21 f4       	brne	.+8      	; 0x1b2 <ToggleACP+0x1c>
	{
		PORTD = GREEN;	
 1aa:	80 e8       	ldi	r24, 0x80	; 128
 1ac:	82 bb       	out	0x12, r24	; 18
		ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
 1ae:	88 ee       	ldi	r24, 0xE8	; 232
 1b0:	86 b9       	out	0x06, r24	; 6
 1b2:	08 95       	ret

000001b4 <__vector_1>:
	}
	
}

ISR(INT0_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	enACP++;
 1d6:	80 91 62 00 	lds	r24, 0x0062
 1da:	90 91 63 00 	lds	r25, 0x0063
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	90 93 63 00 	sts	0x0063, r25
 1e4:	80 93 62 00 	sts	0x0062, r24
	if (enACP >= 2)
 1e8:	82 30       	cpi	r24, 0x02	; 2
 1ea:	91 05       	cpc	r25, r1
 1ec:	24 f0       	brlt	.+8      	; 0x1f6 <__vector_1+0x42>
	{
		enACP = 0;
 1ee:	10 92 63 00 	sts	0x0063, r1
 1f2:	10 92 62 00 	sts	0x0062, r1
	}
	
	ToggleACP(enACP);
 1f6:	80 91 62 00 	lds	r24, 0x0062
 1fa:	90 91 63 00 	lds	r25, 0x0063
 1fe:	0e 94 cb 00 	call	0x196	; 0x196 <ToggleACP>
}
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <NumToArr>:
		
	}
}

void NumToArr(int numbr)
{	
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	ee e6       	ldi	r30, 0x6E	; 110
 22a:	f0 e0       	ldi	r31, 0x00	; 0
	{
		
	}
}

void NumToArr(int numbr)
 22c:	ef 01       	movw	r28, r30
 22e:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
 230:	2a e0       	ldi	r18, 0x0A	; 10
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	b9 01       	movw	r22, r18
 236:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 23a:	81 93       	st	Z+, r24
 23c:	91 93       	st	Z+, r25
		numbr /= 10;
 23e:	86 2f       	mov	r24, r22
 240:	97 2f       	mov	r25, r23
	}
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
 242:	ec 17       	cp	r30, r28
 244:	fd 07       	cpc	r31, r29
 246:	b1 f7       	brne	.-20     	; 0x234 <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <SwitchACPMode>:
}


void SwitchACPMode(int mode)
{
	switch(mode)
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	91 05       	cpc	r25, r1
 252:	39 f0       	breq	.+14     	; 0x262 <SwitchACPMode+0x14>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	91 05       	cpc	r25, r1
 258:	69 f0       	breq	.+26     	; 0x274 <SwitchACPMode+0x26>
 25a:	00 97       	sbiw	r24, 0x00	; 0
 25c:	e1 f5       	brne	.+120    	; 0x2d6 <SwitchACPMode+0x88>
	{
		case 0: 
			DDRC = 0x0;
 25e:	14 ba       	out	0x14, r1	; 20
 260:	3d c0       	rjmp	.+122    	; 0x2dc <SwitchACPMode+0x8e>
			break;
		case 1:		
			DDRC = 0xFF;
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	84 bb       	out	0x14, r24	; 20
			NumToArr(res);	
 266:	80 91 6a 00 	lds	r24, 0x006A
 26a:	90 91 6b 00 	lds	r25, 0x006B
 26e:	0e 94 12 01 	call	0x224	; 0x224 <NumToArr>
			break;			
 272:	08 95       	ret
		case 2:
			DDRC = 0xFF;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	84 bb       	out	0x14, r24	; 20
			volt = (float)((0.5 * res) / 1024) * 10000;
 278:	60 91 6a 00 	lds	r22, 0x006A
 27c:	70 91 6b 00 	lds	r23, 0x006B
 280:	88 27       	eor	r24, r24
 282:	77 fd       	sbrc	r23, 7
 284:	80 95       	com	r24
 286:	98 2f       	mov	r25, r24
 288:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__floatsisf>
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	5f e3       	ldi	r21, 0x3F	; 63
 294:	0e 94 cd 02 	call	0x59a	; 0x59a <__mulsf3>
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e8       	ldi	r20, 0x80	; 128
 29e:	5a e3       	ldi	r21, 0x3A	; 58
 2a0:	0e 94 cd 02 	call	0x59a	; 0x59a <__mulsf3>
 2a4:	20 e0       	ldi	r18, 0x00	; 0
 2a6:	30 e4       	ldi	r19, 0x40	; 64
 2a8:	4c e1       	ldi	r20, 0x1C	; 28
 2aa:	56 e4       	ldi	r21, 0x46	; 70
 2ac:	0e 94 cd 02 	call	0x59a	; 0x59a <__mulsf3>
 2b0:	26 2f       	mov	r18, r22
 2b2:	37 2f       	mov	r19, r23
 2b4:	48 2f       	mov	r20, r24
 2b6:	59 2f       	mov	r21, r25
 2b8:	20 93 66 00 	sts	0x0066, r18
 2bc:	30 93 67 00 	sts	0x0067, r19
 2c0:	40 93 68 00 	sts	0x0068, r20
 2c4:	50 93 69 00 	sts	0x0069, r21
 			NumToArr(volt);
 2c8:	0e 94 36 02 	call	0x46c	; 0x46c <__fixsfsi>
 2cc:	dc 01       	movw	r26, r24
 2ce:	cb 01       	movw	r24, r22
 2d0:	0e 94 12 01 	call	0x224	; 0x224 <NumToArr>
			break;
 2d4:	08 95       	ret
		default:
			DDRC = 0x0;
 2d6:	14 ba       	out	0x14, r1	; 20
			break;
			
	}
	
	if (mode == 0)
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	09 f4       	brne	.+2      	; 0x2de <SwitchACPMode+0x90>
	{
		PORTC = 0x0;
 2dc:	15 ba       	out	0x15, r1	; 21
 2de:	08 95       	ret

000002e0 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	f9 f0       	breq	.+62     	; 0x322 <DecToDigit+0x42>
 2e4:	85 30       	cpi	r24, 0x05	; 5
 2e6:	48 f4       	brcc	.+18     	; 0x2fa <DecToDigit+0x1a>
 2e8:	81 30       	cpi	r24, 0x01	; 1
 2ea:	49 f1       	breq	.+82     	; 0x33e <DecToDigit+0x5e>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	98 f0       	brcs	.+38     	; 0x316 <DecToDigit+0x36>
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	99 f0       	breq	.+38     	; 0x31a <DecToDigit+0x3a>
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	09 f5       	brne	.+66     	; 0x33a <DecToDigit+0x5a>
 2f8:	12 c0       	rjmp	.+36     	; 0x31e <DecToDigit+0x3e>
 2fa:	87 30       	cpi	r24, 0x07	; 7
 2fc:	c1 f0       	breq	.+48     	; 0x32e <DecToDigit+0x4e>
 2fe:	88 30       	cpi	r24, 0x08	; 8
 300:	28 f4       	brcc	.+10     	; 0x30c <DecToDigit+0x2c>
 302:	85 30       	cpi	r24, 0x05	; 5
 304:	81 f0       	breq	.+32     	; 0x326 <DecToDigit+0x46>
 306:	86 30       	cpi	r24, 0x06	; 6
 308:	c1 f4       	brne	.+48     	; 0x33a <DecToDigit+0x5a>
 30a:	0f c0       	rjmp	.+30     	; 0x32a <DecToDigit+0x4a>
 30c:	88 30       	cpi	r24, 0x08	; 8
 30e:	89 f0       	breq	.+34     	; 0x332 <DecToDigit+0x52>
 310:	89 30       	cpi	r24, 0x09	; 9
 312:	99 f4       	brne	.+38     	; 0x33a <DecToDigit+0x5a>
 314:	10 c0       	rjmp	.+32     	; 0x336 <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 316:	8f e5       	ldi	r24, 0x5F	; 95
 318:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 31a:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 31c:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 31e:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 320:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 322:	86 e6       	ldi	r24, 0x66	; 102
			break;
 324:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 326:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 328:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 32a:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 32c:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 32e:	87 e0       	ldi	r24, 0x07	; 7
			break;
 330:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 332:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 334:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 336:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 338:	08 95       	ret
		default:
			Digit = 0b00000000;
 33a:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 33c:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 33e:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
 340:	08 95       	ret

00000342 <__vector_3>:
// 		res |= (ADCH << 8);
// 	}
// }

ISR(TIMER2_COMP_vect)
{	
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	2f 93       	push	r18
 34e:	3f 93       	push	r19
 350:	4f 93       	push	r20
 352:	5f 93       	push	r21
 354:	6f 93       	push	r22
 356:	7f 93       	push	r23
 358:	8f 93       	push	r24
 35a:	9f 93       	push	r25
 35c:	af 93       	push	r26
 35e:	bf 93       	push	r27
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
	PORTC = 0x00;
 368:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 36a:	1b ba       	out	0x1b, r1	; 27
	//DDRD = 0xB0;
	
	if (modeACP != 0)
 36c:	80 91 64 00 	lds	r24, 0x0064
 370:	90 91 65 00 	lds	r25, 0x0065
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	09 f4       	brne	.+2      	; 0x37a <__vector_3+0x38>
 378:	66 c0       	rjmp	.+204    	; 0x446 <__vector_3+0x104>
	{
		if (modeACP == 1)
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	91 05       	cpc	r25, r1
 37e:	39 f4       	brne	.+14     	; 0x38e <__vector_3+0x4c>
		{
			NumToArr(res);
 380:	80 91 6a 00 	lds	r24, 0x006A
 384:	90 91 6b 00 	lds	r25, 0x006B
 388:	0e 94 12 01 	call	0x224	; 0x224 <NumToArr>
 38c:	31 c0       	rjmp	.+98     	; 0x3f0 <__vector_3+0xae>
		}
		else if (modeACP == 2)
 38e:	82 30       	cpi	r24, 0x02	; 2
 390:	91 05       	cpc	r25, r1
 392:	71 f5       	brne	.+92     	; 0x3f0 <__vector_3+0xae>
		{
			volt = (float)((0.5 * res) / 1024) * 10000;
 394:	60 91 6a 00 	lds	r22, 0x006A
 398:	70 91 6b 00 	lds	r23, 0x006B
 39c:	88 27       	eor	r24, r24
 39e:	77 fd       	sbrc	r23, 7
 3a0:	80 95       	com	r24
 3a2:	98 2f       	mov	r25, r24
 3a4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__floatsisf>
 3a8:	20 e0       	ldi	r18, 0x00	; 0
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	5f e3       	ldi	r21, 0x3F	; 63
 3b0:	0e 94 cd 02 	call	0x59a	; 0x59a <__mulsf3>
 3b4:	20 e0       	ldi	r18, 0x00	; 0
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	40 e8       	ldi	r20, 0x80	; 128
 3ba:	5a e3       	ldi	r21, 0x3A	; 58
 3bc:	0e 94 cd 02 	call	0x59a	; 0x59a <__mulsf3>
 3c0:	20 e0       	ldi	r18, 0x00	; 0
 3c2:	30 e4       	ldi	r19, 0x40	; 64
 3c4:	4c e1       	ldi	r20, 0x1C	; 28
 3c6:	56 e4       	ldi	r21, 0x46	; 70
 3c8:	0e 94 cd 02 	call	0x59a	; 0x59a <__mulsf3>
 3cc:	26 2f       	mov	r18, r22
 3ce:	37 2f       	mov	r19, r23
 3d0:	48 2f       	mov	r20, r24
 3d2:	59 2f       	mov	r21, r25
 3d4:	20 93 66 00 	sts	0x0066, r18
 3d8:	30 93 67 00 	sts	0x0067, r19
 3dc:	40 93 68 00 	sts	0x0068, r20
 3e0:	50 93 69 00 	sts	0x0069, r21
			NumToArr(volt);
 3e4:	0e 94 36 02 	call	0x46c	; 0x46c <__fixsfsi>
 3e8:	dc 01       	movw	r26, r24
 3ea:	cb 01       	movw	r24, r22
 3ec:	0e 94 12 01 	call	0x224	; 0x224 <NumToArr>
		}
		
		PORTC = DecToDigit(arr[j]);
 3f0:	c0 91 6c 00 	lds	r28, 0x006C
 3f4:	d0 91 6d 00 	lds	r29, 0x006D
 3f8:	fe 01       	movw	r30, r28
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	e2 59       	subi	r30, 0x92	; 146
 400:	ff 4f       	sbci	r31, 0xFF	; 255
 402:	80 81       	ld	r24, Z
 404:	0e 94 70 01 	call	0x2e0	; 0x2e0 <DecToDigit>
 408:	85 bb       	out	0x15, r24	; 21
		PORTA = (1 << (7 - j));	
 40a:	87 e0       	ldi	r24, 0x07	; 7
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	8c 1b       	sub	r24, r28
 410:	9d 0b       	sbc	r25, r29
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	a9 01       	movw	r20, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <__vector_3+0xdc>
 41a:	44 0f       	add	r20, r20
 41c:	55 1f       	adc	r21, r21
 41e:	8a 95       	dec	r24
 420:	e2 f7       	brpl	.-8      	; 0x41a <__vector_3+0xd8>
 422:	4b bb       	out	0x1b, r20	; 27
	
		if (j == 3)
 424:	c3 30       	cpi	r28, 0x03	; 3
 426:	d1 05       	cpc	r29, r1
 428:	09 f4       	brne	.+2      	; 0x42c <__vector_3+0xea>
		{
			PINC |= 0b10000000;	
 42a:	9f 9a       	sbi	0x13, 7	; 19
		}	
	
		j++;
 42c:	80 91 6c 00 	lds	r24, 0x006C
 430:	90 91 6d 00 	lds	r25, 0x006D
 434:	01 96       	adiw	r24, 0x01	; 1
		j %= 4;
 436:	64 e0       	ldi	r22, 0x04	; 4
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
 43e:	90 93 6d 00 	sts	0x006D, r25
 442:	80 93 6c 00 	sts	0x006C, r24
	}
	
}
 446:	ff 91       	pop	r31
 448:	ef 91       	pop	r30
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	bf 91       	pop	r27
 450:	af 91       	pop	r26
 452:	9f 91       	pop	r25
 454:	8f 91       	pop	r24
 456:	7f 91       	pop	r23
 458:	6f 91       	pop	r22
 45a:	5f 91       	pop	r21
 45c:	4f 91       	pop	r20
 45e:	3f 91       	pop	r19
 460:	2f 91       	pop	r18
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <__fixsfsi>:
 46c:	04 d0       	rcall	.+8      	; 0x476 <__fixunssfsi>
 46e:	68 94       	set
 470:	b1 11       	cpse	r27, r1
 472:	8d c0       	rjmp	.+282    	; 0x58e <__fp_szero>
 474:	08 95       	ret

00000476 <__fixunssfsi>:
 476:	70 d0       	rcall	.+224    	; 0x558 <__fp_splitA>
 478:	88 f0       	brcs	.+34     	; 0x49c <__fixunssfsi+0x26>
 47a:	9f 57       	subi	r25, 0x7F	; 127
 47c:	90 f0       	brcs	.+36     	; 0x4a2 <__fixunssfsi+0x2c>
 47e:	b9 2f       	mov	r27, r25
 480:	99 27       	eor	r25, r25
 482:	b7 51       	subi	r27, 0x17	; 23
 484:	a0 f0       	brcs	.+40     	; 0x4ae <__fixunssfsi+0x38>
 486:	d1 f0       	breq	.+52     	; 0x4bc <__fixunssfsi+0x46>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	1a f0       	brmi	.+6      	; 0x498 <__fixunssfsi+0x22>
 492:	ba 95       	dec	r27
 494:	c9 f7       	brne	.-14     	; 0x488 <__fixunssfsi+0x12>
 496:	12 c0       	rjmp	.+36     	; 0x4bc <__fixunssfsi+0x46>
 498:	b1 30       	cpi	r27, 0x01	; 1
 49a:	81 f0       	breq	.+32     	; 0x4bc <__fixunssfsi+0x46>
 49c:	77 d0       	rcall	.+238    	; 0x58c <__fp_zero>
 49e:	b1 e0       	ldi	r27, 0x01	; 1
 4a0:	08 95       	ret
 4a2:	74 c0       	rjmp	.+232    	; 0x58c <__fp_zero>
 4a4:	67 2f       	mov	r22, r23
 4a6:	78 2f       	mov	r23, r24
 4a8:	88 27       	eor	r24, r24
 4aa:	b8 5f       	subi	r27, 0xF8	; 248
 4ac:	39 f0       	breq	.+14     	; 0x4bc <__fixunssfsi+0x46>
 4ae:	b9 3f       	cpi	r27, 0xF9	; 249
 4b0:	cc f3       	brlt	.-14     	; 0x4a4 <__fixunssfsi+0x2e>
 4b2:	86 95       	lsr	r24
 4b4:	77 95       	ror	r23
 4b6:	67 95       	ror	r22
 4b8:	b3 95       	inc	r27
 4ba:	d9 f7       	brne	.-10     	; 0x4b2 <__fixunssfsi+0x3c>
 4bc:	3e f4       	brtc	.+14     	; 0x4cc <__fixunssfsi+0x56>
 4be:	90 95       	com	r25
 4c0:	80 95       	com	r24
 4c2:	70 95       	com	r23
 4c4:	61 95       	neg	r22
 4c6:	7f 4f       	sbci	r23, 0xFF	; 255
 4c8:	8f 4f       	sbci	r24, 0xFF	; 255
 4ca:	9f 4f       	sbci	r25, 0xFF	; 255
 4cc:	08 95       	ret

000004ce <__floatunsisf>:
 4ce:	e8 94       	clt
 4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <__floatsisf+0x12>

000004d2 <__floatsisf>:
 4d2:	97 fb       	bst	r25, 7
 4d4:	3e f4       	brtc	.+14     	; 0x4e4 <__floatsisf+0x12>
 4d6:	90 95       	com	r25
 4d8:	80 95       	com	r24
 4da:	70 95       	com	r23
 4dc:	61 95       	neg	r22
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	8f 4f       	sbci	r24, 0xFF	; 255
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	99 23       	and	r25, r25
 4e6:	a9 f0       	breq	.+42     	; 0x512 <__floatsisf+0x40>
 4e8:	f9 2f       	mov	r31, r25
 4ea:	96 e9       	ldi	r25, 0x96	; 150
 4ec:	bb 27       	eor	r27, r27
 4ee:	93 95       	inc	r25
 4f0:	f6 95       	lsr	r31
 4f2:	87 95       	ror	r24
 4f4:	77 95       	ror	r23
 4f6:	67 95       	ror	r22
 4f8:	b7 95       	ror	r27
 4fa:	f1 11       	cpse	r31, r1
 4fc:	f8 cf       	rjmp	.-16     	; 0x4ee <__floatsisf+0x1c>
 4fe:	fa f4       	brpl	.+62     	; 0x53e <__floatsisf+0x6c>
 500:	bb 0f       	add	r27, r27
 502:	11 f4       	brne	.+4      	; 0x508 <__floatsisf+0x36>
 504:	60 ff       	sbrs	r22, 0
 506:	1b c0       	rjmp	.+54     	; 0x53e <__floatsisf+0x6c>
 508:	6f 5f       	subi	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	8f 4f       	sbci	r24, 0xFF	; 255
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	16 c0       	rjmp	.+44     	; 0x53e <__floatsisf+0x6c>
 512:	88 23       	and	r24, r24
 514:	11 f0       	breq	.+4      	; 0x51a <__floatsisf+0x48>
 516:	96 e9       	ldi	r25, 0x96	; 150
 518:	11 c0       	rjmp	.+34     	; 0x53c <__floatsisf+0x6a>
 51a:	77 23       	and	r23, r23
 51c:	21 f0       	breq	.+8      	; 0x526 <__floatsisf+0x54>
 51e:	9e e8       	ldi	r25, 0x8E	; 142
 520:	87 2f       	mov	r24, r23
 522:	76 2f       	mov	r23, r22
 524:	05 c0       	rjmp	.+10     	; 0x530 <__floatsisf+0x5e>
 526:	66 23       	and	r22, r22
 528:	71 f0       	breq	.+28     	; 0x546 <__floatsisf+0x74>
 52a:	96 e8       	ldi	r25, 0x86	; 134
 52c:	86 2f       	mov	r24, r22
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	2a f0       	brmi	.+10     	; 0x53e <__floatsisf+0x6c>
 534:	9a 95       	dec	r25
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	da f7       	brpl	.-10     	; 0x534 <__floatsisf+0x62>
 53e:	88 0f       	add	r24, r24
 540:	96 95       	lsr	r25
 542:	87 95       	ror	r24
 544:	97 f9       	bld	r25, 7
 546:	08 95       	ret

00000548 <__fp_split3>:
 548:	57 fd       	sbrc	r21, 7
 54a:	90 58       	subi	r25, 0x80	; 128
 54c:	44 0f       	add	r20, r20
 54e:	55 1f       	adc	r21, r21
 550:	59 f0       	breq	.+22     	; 0x568 <__fp_splitA+0x10>
 552:	5f 3f       	cpi	r21, 0xFF	; 255
 554:	71 f0       	breq	.+28     	; 0x572 <__fp_splitA+0x1a>
 556:	47 95       	ror	r20

00000558 <__fp_splitA>:
 558:	88 0f       	add	r24, r24
 55a:	97 fb       	bst	r25, 7
 55c:	99 1f       	adc	r25, r25
 55e:	61 f0       	breq	.+24     	; 0x578 <__fp_splitA+0x20>
 560:	9f 3f       	cpi	r25, 0xFF	; 255
 562:	79 f0       	breq	.+30     	; 0x582 <__fp_splitA+0x2a>
 564:	87 95       	ror	r24
 566:	08 95       	ret
 568:	12 16       	cp	r1, r18
 56a:	13 06       	cpc	r1, r19
 56c:	14 06       	cpc	r1, r20
 56e:	55 1f       	adc	r21, r21
 570:	f2 cf       	rjmp	.-28     	; 0x556 <__fp_split3+0xe>
 572:	46 95       	lsr	r20
 574:	f1 df       	rcall	.-30     	; 0x558 <__fp_splitA>
 576:	08 c0       	rjmp	.+16     	; 0x588 <__fp_splitA+0x30>
 578:	16 16       	cp	r1, r22
 57a:	17 06       	cpc	r1, r23
 57c:	18 06       	cpc	r1, r24
 57e:	99 1f       	adc	r25, r25
 580:	f1 cf       	rjmp	.-30     	; 0x564 <__fp_splitA+0xc>
 582:	86 95       	lsr	r24
 584:	71 05       	cpc	r23, r1
 586:	61 05       	cpc	r22, r1
 588:	08 94       	sec
 58a:	08 95       	ret

0000058c <__fp_zero>:
 58c:	e8 94       	clt

0000058e <__fp_szero>:
 58e:	bb 27       	eor	r27, r27
 590:	66 27       	eor	r22, r22
 592:	77 27       	eor	r23, r23
 594:	cb 01       	movw	r24, r22
 596:	97 f9       	bld	r25, 7
 598:	08 95       	ret

0000059a <__mulsf3>:
 59a:	0b d0       	rcall	.+22     	; 0x5b2 <__mulsf3x>
 59c:	78 c0       	rjmp	.+240    	; 0x68e <__fp_round>
 59e:	69 d0       	rcall	.+210    	; 0x672 <__fp_pscA>
 5a0:	28 f0       	brcs	.+10     	; 0x5ac <__mulsf3+0x12>
 5a2:	6e d0       	rcall	.+220    	; 0x680 <__fp_pscB>
 5a4:	18 f0       	brcs	.+6      	; 0x5ac <__mulsf3+0x12>
 5a6:	95 23       	and	r25, r21
 5a8:	09 f0       	breq	.+2      	; 0x5ac <__mulsf3+0x12>
 5aa:	5a c0       	rjmp	.+180    	; 0x660 <__fp_inf>
 5ac:	5f c0       	rjmp	.+190    	; 0x66c <__fp_nan>
 5ae:	11 24       	eor	r1, r1
 5b0:	ee cf       	rjmp	.-36     	; 0x58e <__fp_szero>

000005b2 <__mulsf3x>:
 5b2:	ca df       	rcall	.-108    	; 0x548 <__fp_split3>
 5b4:	a0 f3       	brcs	.-24     	; 0x59e <__mulsf3+0x4>

000005b6 <__mulsf3_pse>:
 5b6:	95 9f       	mul	r25, r21
 5b8:	d1 f3       	breq	.-12     	; 0x5ae <__mulsf3+0x14>
 5ba:	95 0f       	add	r25, r21
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	55 1f       	adc	r21, r21
 5c0:	62 9f       	mul	r22, r18
 5c2:	f0 01       	movw	r30, r0
 5c4:	72 9f       	mul	r23, r18
 5c6:	bb 27       	eor	r27, r27
 5c8:	f0 0d       	add	r31, r0
 5ca:	b1 1d       	adc	r27, r1
 5cc:	63 9f       	mul	r22, r19
 5ce:	aa 27       	eor	r26, r26
 5d0:	f0 0d       	add	r31, r0
 5d2:	b1 1d       	adc	r27, r1
 5d4:	aa 1f       	adc	r26, r26
 5d6:	64 9f       	mul	r22, r20
 5d8:	66 27       	eor	r22, r22
 5da:	b0 0d       	add	r27, r0
 5dc:	a1 1d       	adc	r26, r1
 5de:	66 1f       	adc	r22, r22
 5e0:	82 9f       	mul	r24, r18
 5e2:	22 27       	eor	r18, r18
 5e4:	b0 0d       	add	r27, r0
 5e6:	a1 1d       	adc	r26, r1
 5e8:	62 1f       	adc	r22, r18
 5ea:	73 9f       	mul	r23, r19
 5ec:	b0 0d       	add	r27, r0
 5ee:	a1 1d       	adc	r26, r1
 5f0:	62 1f       	adc	r22, r18
 5f2:	83 9f       	mul	r24, r19
 5f4:	a0 0d       	add	r26, r0
 5f6:	61 1d       	adc	r22, r1
 5f8:	22 1f       	adc	r18, r18
 5fa:	74 9f       	mul	r23, r20
 5fc:	33 27       	eor	r19, r19
 5fe:	a0 0d       	add	r26, r0
 600:	61 1d       	adc	r22, r1
 602:	23 1f       	adc	r18, r19
 604:	84 9f       	mul	r24, r20
 606:	60 0d       	add	r22, r0
 608:	21 1d       	adc	r18, r1
 60a:	82 2f       	mov	r24, r18
 60c:	76 2f       	mov	r23, r22
 60e:	6a 2f       	mov	r22, r26
 610:	11 24       	eor	r1, r1
 612:	9f 57       	subi	r25, 0x7F	; 127
 614:	50 40       	sbci	r21, 0x00	; 0
 616:	8a f0       	brmi	.+34     	; 0x63a <__mulsf3_pse+0x84>
 618:	e1 f0       	breq	.+56     	; 0x652 <__mulsf3_pse+0x9c>
 61a:	88 23       	and	r24, r24
 61c:	4a f0       	brmi	.+18     	; 0x630 <__mulsf3_pse+0x7a>
 61e:	ee 0f       	add	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	bb 1f       	adc	r27, r27
 624:	66 1f       	adc	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	88 1f       	adc	r24, r24
 62a:	91 50       	subi	r25, 0x01	; 1
 62c:	50 40       	sbci	r21, 0x00	; 0
 62e:	a9 f7       	brne	.-22     	; 0x61a <__mulsf3_pse+0x64>
 630:	9e 3f       	cpi	r25, 0xFE	; 254
 632:	51 05       	cpc	r21, r1
 634:	70 f0       	brcs	.+28     	; 0x652 <__mulsf3_pse+0x9c>
 636:	14 c0       	rjmp	.+40     	; 0x660 <__fp_inf>
 638:	aa cf       	rjmp	.-172    	; 0x58e <__fp_szero>
 63a:	5f 3f       	cpi	r21, 0xFF	; 255
 63c:	ec f3       	brlt	.-6      	; 0x638 <__mulsf3_pse+0x82>
 63e:	98 3e       	cpi	r25, 0xE8	; 232
 640:	dc f3       	brlt	.-10     	; 0x638 <__mulsf3_pse+0x82>
 642:	86 95       	lsr	r24
 644:	77 95       	ror	r23
 646:	67 95       	ror	r22
 648:	b7 95       	ror	r27
 64a:	f7 95       	ror	r31
 64c:	e7 95       	ror	r30
 64e:	9f 5f       	subi	r25, 0xFF	; 255
 650:	c1 f7       	brne	.-16     	; 0x642 <__mulsf3_pse+0x8c>
 652:	fe 2b       	or	r31, r30
 654:	88 0f       	add	r24, r24
 656:	91 1d       	adc	r25, r1
 658:	96 95       	lsr	r25
 65a:	87 95       	ror	r24
 65c:	97 f9       	bld	r25, 7
 65e:	08 95       	ret

00000660 <__fp_inf>:
 660:	97 f9       	bld	r25, 7
 662:	9f 67       	ori	r25, 0x7F	; 127
 664:	80 e8       	ldi	r24, 0x80	; 128
 666:	70 e0       	ldi	r23, 0x00	; 0
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	08 95       	ret

0000066c <__fp_nan>:
 66c:	9f ef       	ldi	r25, 0xFF	; 255
 66e:	80 ec       	ldi	r24, 0xC0	; 192
 670:	08 95       	ret

00000672 <__fp_pscA>:
 672:	00 24       	eor	r0, r0
 674:	0a 94       	dec	r0
 676:	16 16       	cp	r1, r22
 678:	17 06       	cpc	r1, r23
 67a:	18 06       	cpc	r1, r24
 67c:	09 06       	cpc	r0, r25
 67e:	08 95       	ret

00000680 <__fp_pscB>:
 680:	00 24       	eor	r0, r0
 682:	0a 94       	dec	r0
 684:	12 16       	cp	r1, r18
 686:	13 06       	cpc	r1, r19
 688:	14 06       	cpc	r1, r20
 68a:	05 06       	cpc	r0, r21
 68c:	08 95       	ret

0000068e <__fp_round>:
 68e:	09 2e       	mov	r0, r25
 690:	03 94       	inc	r0
 692:	00 0c       	add	r0, r0
 694:	11 f4       	brne	.+4      	; 0x69a <__fp_round+0xc>
 696:	88 23       	and	r24, r24
 698:	52 f0       	brmi	.+20     	; 0x6ae <__fp_round+0x20>
 69a:	bb 0f       	add	r27, r27
 69c:	40 f4       	brcc	.+16     	; 0x6ae <__fp_round+0x20>
 69e:	bf 2b       	or	r27, r31
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <__fp_round+0x18>
 6a2:	60 ff       	sbrs	r22, 0
 6a4:	04 c0       	rjmp	.+8      	; 0x6ae <__fp_round+0x20>
 6a6:	6f 5f       	subi	r22, 0xFF	; 255
 6a8:	7f 4f       	sbci	r23, 0xFF	; 255
 6aa:	8f 4f       	sbci	r24, 0xFF	; 255
 6ac:	9f 4f       	sbci	r25, 0xFF	; 255
 6ae:	08 95       	ret

000006b0 <__divmodhi4>:
 6b0:	97 fb       	bst	r25, 7
 6b2:	09 2e       	mov	r0, r25
 6b4:	07 26       	eor	r0, r23
 6b6:	0a d0       	rcall	.+20     	; 0x6cc <__divmodhi4_neg1>
 6b8:	77 fd       	sbrc	r23, 7
 6ba:	04 d0       	rcall	.+8      	; 0x6c4 <__divmodhi4_neg2>
 6bc:	0c d0       	rcall	.+24     	; 0x6d6 <__udivmodhi4>
 6be:	06 d0       	rcall	.+12     	; 0x6cc <__divmodhi4_neg1>
 6c0:	00 20       	and	r0, r0
 6c2:	1a f4       	brpl	.+6      	; 0x6ca <__divmodhi4_exit>

000006c4 <__divmodhi4_neg2>:
 6c4:	70 95       	com	r23
 6c6:	61 95       	neg	r22
 6c8:	7f 4f       	sbci	r23, 0xFF	; 255

000006ca <__divmodhi4_exit>:
 6ca:	08 95       	ret

000006cc <__divmodhi4_neg1>:
 6cc:	f6 f7       	brtc	.-4      	; 0x6ca <__divmodhi4_exit>
 6ce:	90 95       	com	r25
 6d0:	81 95       	neg	r24
 6d2:	9f 4f       	sbci	r25, 0xFF	; 255
 6d4:	08 95       	ret

000006d6 <__udivmodhi4>:
 6d6:	aa 1b       	sub	r26, r26
 6d8:	bb 1b       	sub	r27, r27
 6da:	51 e1       	ldi	r21, 0x11	; 17
 6dc:	07 c0       	rjmp	.+14     	; 0x6ec <__udivmodhi4_ep>

000006de <__udivmodhi4_loop>:
 6de:	aa 1f       	adc	r26, r26
 6e0:	bb 1f       	adc	r27, r27
 6e2:	a6 17       	cp	r26, r22
 6e4:	b7 07       	cpc	r27, r23
 6e6:	10 f0       	brcs	.+4      	; 0x6ec <__udivmodhi4_ep>
 6e8:	a6 1b       	sub	r26, r22
 6ea:	b7 0b       	sbc	r27, r23

000006ec <__udivmodhi4_ep>:
 6ec:	88 1f       	adc	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	5a 95       	dec	r21
 6f2:	a9 f7       	brne	.-22     	; 0x6de <__udivmodhi4_loop>
 6f4:	80 95       	com	r24
 6f6:	90 95       	com	r25
 6f8:	bc 01       	movw	r22, r24
 6fa:	cd 01       	movw	r24, r26
 6fc:	08 95       	ret

000006fe <_exit>:
 6fe:	f8 94       	cli

00000700 <__stop_program>:
 700:	ff cf       	rjmp	.-2      	; 0x700 <__stop_program>
