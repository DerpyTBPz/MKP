
AVRGCC4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000018  00800060  00800060  000003e0  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000bc  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000022e  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011d  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000336  00000000  00000000  00000f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  0000129c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000e7  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  00001403  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 37       	cpi	r26, 0x78	; 120
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  74:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_14>:
// 	}		
// 	
// }

ISR(ADC_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	3f 93       	push	r19
  8a:	4f 93       	push	r20
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	res = ADCL;
  90:	24 b1       	in	r18, 0x04	; 4
  92:	30 e0       	ldi	r19, 0x00	; 0
  94:	30 93 69 00 	sts	0x0069, r19
  98:	20 93 68 00 	sts	0x0068, r18
	res |= (ADCH << 8);
  9c:	45 b1       	in	r20, 0x05	; 5
  9e:	94 2f       	mov	r25, r20
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	82 2b       	or	r24, r18
  a4:	93 2b       	or	r25, r19
  a6:	90 93 69 00 	sts	0x0069, r25
  aa:	80 93 68 00 	sts	0x0068, r24
	//NumToArr(res);
	
}
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	4f 91       	pop	r20
  b4:	3f 91       	pop	r19
  b6:	2f 91       	pop	r18
  b8:	0f 90       	pop	r0
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	0f 90       	pop	r0
  be:	1f 90       	pop	r1
  c0:	18 95       	reti

000000c2 <NumToArr>:
{
	NumToArr(res);
}

void NumToArr(int numbr)
{	
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	e0 e7       	ldi	r30, 0x70	; 112
  c8:	f0 e0       	ldi	r31, 0x00	; 0
ISR(INT0_vect)
{
	NumToArr(res);
}

void NumToArr(int numbr)
  ca:	ef 01       	movw	r28, r30
  cc:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
  ce:	2a e0       	ldi	r18, 0x0A	; 10
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	b9 01       	movw	r22, r18
  d4:	0e 94 8d 01 	call	0x31a	; 0x31a <__divmodhi4>
  d8:	81 93       	st	Z+, r24
  da:	91 93       	st	Z+, r25
		numbr /= 10;
  dc:	86 2f       	mov	r24, r22
  de:	97 2f       	mov	r25, r23
	NumToArr(res);
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
  e0:	ec 17       	cp	r30, r28
  e2:	fd 07       	cpc	r31, r29
  e4:	b1 f7       	brne	.-20     	; 0xd2 <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <__vector_1>:
	j++;
	j %= 4;
}

ISR(INT0_vect)
{
  ec:	1f 92       	push	r1
  ee:	0f 92       	push	r0
  f0:	0f b6       	in	r0, 0x3f	; 63
  f2:	0f 92       	push	r0
  f4:	11 24       	eor	r1, r1
  f6:	2f 93       	push	r18
  f8:	3f 93       	push	r19
  fa:	4f 93       	push	r20
  fc:	5f 93       	push	r21
  fe:	6f 93       	push	r22
 100:	7f 93       	push	r23
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
 106:	af 93       	push	r26
 108:	bf 93       	push	r27
 10a:	ef 93       	push	r30
 10c:	ff 93       	push	r31
	NumToArr(res);
 10e:	80 91 68 00 	lds	r24, 0x0068
 112:	90 91 69 00 	lds	r25, 0x0069
 116:	0e 94 61 00 	call	0xc2	; 0xc2 <NumToArr>
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <main>:

int kk=0;

int main(void)
{
	DDRA = 0xF0;
 13c:	80 ef       	ldi	r24, 0xF0	; 240
 13e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;	
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	84 bb       	out	0x14, r24	; 20
	DDRD |= BTN1;
 144:	8a 9a       	sbi	0x11, 2	; 17
	MCUCR = 0x0F;
 146:	8f e0       	ldi	r24, 0x0F	; 15
 148:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
 14a:	80 ec       	ldi	r24, 0xC0	; 192
 14c:	8b bf       	out	0x3b, r24	; 59
		
	PORTA = 0x00;
 14e:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 150:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x0;
 152:	12 ba       	out	0x12, r1	; 18
// 	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM10);
// 	TCCR1B |= (1<<WGM12) | (1<<CS10);
// 	OCR1A = 10;
// 	TIMSK |= (1 << OCIE1A);	
	
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
 154:	85 b5       	in	r24, 0x25	; 37
 156:	8e 60       	ori	r24, 0x0E	; 14
 158:	85 bd       	out	0x25, r24	; 37
	OCR2 = 10;
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
 15e:	89 b7       	in	r24, 0x39	; 57
 160:	80 68       	ori	r24, 0x80	; 128
 162:	89 bf       	out	0x39, r24	; 57
	
	ADMUX |= (1<<REFS0) | (1<<MUX1); 
 164:	87 b1       	in	r24, 0x07	; 7
 166:	82 64       	ori	r24, 0x42	; 66
 168:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
 16a:	86 b1       	in	r24, 0x06	; 6
 16c:	88 6e       	ori	r24, 0xE8	; 232
 16e:	86 b9       	out	0x06, r24	; 6

	//TIMER1
	sei();
 170:	78 94       	sei
	
	while(1)
	{	
// 		tmp++;
 		NumToArr(res);
 172:	80 91 68 00 	lds	r24, 0x0068
 176:	90 91 69 00 	lds	r25, 0x0069
 17a:	0e 94 61 00 	call	0xc2	; 0xc2 <NumToArr>
 17e:	f9 cf       	rjmp	.-14     	; 0x172 <main+0x36>

00000180 <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 180:	84 30       	cpi	r24, 0x04	; 4
 182:	f9 f0       	breq	.+62     	; 0x1c2 <DecToDigit+0x42>
 184:	85 30       	cpi	r24, 0x05	; 5
 186:	48 f4       	brcc	.+18     	; 0x19a <DecToDigit+0x1a>
 188:	81 30       	cpi	r24, 0x01	; 1
 18a:	49 f1       	breq	.+82     	; 0x1de <DecToDigit+0x5e>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	98 f0       	brcs	.+38     	; 0x1b6 <DecToDigit+0x36>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	99 f0       	breq	.+38     	; 0x1ba <DecToDigit+0x3a>
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	09 f5       	brne	.+66     	; 0x1da <DecToDigit+0x5a>
 198:	12 c0       	rjmp	.+36     	; 0x1be <DecToDigit+0x3e>
 19a:	87 30       	cpi	r24, 0x07	; 7
 19c:	c1 f0       	breq	.+48     	; 0x1ce <DecToDigit+0x4e>
 19e:	88 30       	cpi	r24, 0x08	; 8
 1a0:	28 f4       	brcc	.+10     	; 0x1ac <DecToDigit+0x2c>
 1a2:	85 30       	cpi	r24, 0x05	; 5
 1a4:	81 f0       	breq	.+32     	; 0x1c6 <DecToDigit+0x46>
 1a6:	86 30       	cpi	r24, 0x06	; 6
 1a8:	c1 f4       	brne	.+48     	; 0x1da <DecToDigit+0x5a>
 1aa:	0f c0       	rjmp	.+30     	; 0x1ca <DecToDigit+0x4a>
 1ac:	88 30       	cpi	r24, 0x08	; 8
 1ae:	89 f0       	breq	.+34     	; 0x1d2 <DecToDigit+0x52>
 1b0:	89 30       	cpi	r24, 0x09	; 9
 1b2:	99 f4       	brne	.+38     	; 0x1da <DecToDigit+0x5a>
 1b4:	10 c0       	rjmp	.+32     	; 0x1d6 <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 1b6:	8f e5       	ldi	r24, 0x5F	; 95
 1b8:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 1ba:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 1bc:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 1be:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 1c0:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 1c2:	86 e6       	ldi	r24, 0x66	; 102
			break;
 1c4:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 1c6:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 1c8:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 1ca:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 1cc:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 1ce:	87 e0       	ldi	r24, 0x07	; 7
			break;
 1d0:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 1d2:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 1d4:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 1d6:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 1d8:	08 95       	ret
		default:
			Digit = 0b00000000;
 1da:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 1dc:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 1de:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
 1e0:	08 95       	ret

000001e2 <__vector_3>:
	j++;
	j %= 4;
}

ISR(TIMER2_COMP_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
	PORTC = 0x00;
 208:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 20a:	1b ba       	out	0x1b, r1	; 27
	DDRD = 0xB0;
 20c:	80 eb       	ldi	r24, 0xB0	; 176
 20e:	81 bb       	out	0x11, r24	; 17
	
	PORTC = DecToDigit(arr[j]);
 210:	c0 91 6a 00 	lds	r28, 0x006A
 214:	d0 91 6b 00 	lds	r29, 0x006B
 218:	fe 01       	movw	r30, r28
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	e0 59       	subi	r30, 0x90	; 144
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	80 81       	ld	r24, Z
 224:	0e 94 c0 00 	call	0x180	; 0x180 <DecToDigit>
 228:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << (7 - j));
 22a:	87 e0       	ldi	r24, 0x07	; 7
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	8c 1b       	sub	r24, r28
 230:	9d 0b       	sbc	r25, r29
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	a9 01       	movw	r20, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <__vector_3+0x5c>
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <__vector_3+0x58>
 242:	4b bb       	out	0x1b, r20	; 27
	j++;
 244:	ce 01       	movw	r24, r28
 246:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 248:	64 e0       	ldi	r22, 0x04	; 4
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	0e 94 8d 01 	call	0x31a	; 0x31a <__divmodhi4>
 250:	90 93 6b 00 	sts	0x006B, r25
 254:	80 93 6a 00 	sts	0x006A, r24
}
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_6>:
	
}


ISR(TIMER1_COMPA_vect)
{	
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	PORTC = 0x00;
 2a4:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 2a6:	1b ba       	out	0x1b, r1	; 27
	DDRD = 0xB0;
 2a8:	80 eb       	ldi	r24, 0xB0	; 176
 2aa:	81 bb       	out	0x11, r24	; 17
	
	PORTC = DecToDigit(arr[j]);
 2ac:	c0 91 6a 00 	lds	r28, 0x006A
 2b0:	d0 91 6b 00 	lds	r29, 0x006B
 2b4:	fe 01       	movw	r30, r28
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	e0 59       	subi	r30, 0x90	; 144
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	80 81       	ld	r24, Z
 2c0:	0e 94 c0 00 	call	0x180	; 0x180 <DecToDigit>
 2c4:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << (7 - j));
 2c6:	87 e0       	ldi	r24, 0x07	; 7
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	8c 1b       	sub	r24, r28
 2cc:	9d 0b       	sbc	r25, r29
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	a9 01       	movw	r20, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <__vector_6+0x5c>
 2d6:	44 0f       	add	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	8a 95       	dec	r24
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <__vector_6+0x58>
 2de:	4b bb       	out	0x1b, r20	; 27
	j++;
 2e0:	ce 01       	movw	r24, r28
 2e2:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 2e4:	64 e0       	ldi	r22, 0x04	; 4
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	0e 94 8d 01 	call	0x31a	; 0x31a <__divmodhi4>
 2ec:	90 93 6b 00 	sts	0x006B, r25
 2f0:	80 93 6a 00 	sts	0x006A, r24
}
 2f4:	ff 91       	pop	r31
 2f6:	ef 91       	pop	r30
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__divmodhi4>:
 31a:	97 fb       	bst	r25, 7
 31c:	09 2e       	mov	r0, r25
 31e:	07 26       	eor	r0, r23
 320:	0a d0       	rcall	.+20     	; 0x336 <__divmodhi4_neg1>
 322:	77 fd       	sbrc	r23, 7
 324:	04 d0       	rcall	.+8      	; 0x32e <__divmodhi4_neg2>
 326:	0c d0       	rcall	.+24     	; 0x340 <__udivmodhi4>
 328:	06 d0       	rcall	.+12     	; 0x336 <__divmodhi4_neg1>
 32a:	00 20       	and	r0, r0
 32c:	1a f4       	brpl	.+6      	; 0x334 <__divmodhi4_exit>

0000032e <__divmodhi4_neg2>:
 32e:	70 95       	com	r23
 330:	61 95       	neg	r22
 332:	7f 4f       	sbci	r23, 0xFF	; 255

00000334 <__divmodhi4_exit>:
 334:	08 95       	ret

00000336 <__divmodhi4_neg1>:
 336:	f6 f7       	brtc	.-4      	; 0x334 <__divmodhi4_exit>
 338:	90 95       	com	r25
 33a:	81 95       	neg	r24
 33c:	9f 4f       	sbci	r25, 0xFF	; 255
 33e:	08 95       	ret

00000340 <__udivmodhi4>:
 340:	aa 1b       	sub	r26, r26
 342:	bb 1b       	sub	r27, r27
 344:	51 e1       	ldi	r21, 0x11	; 17
 346:	07 c0       	rjmp	.+14     	; 0x356 <__udivmodhi4_ep>

00000348 <__udivmodhi4_loop>:
 348:	aa 1f       	adc	r26, r26
 34a:	bb 1f       	adc	r27, r27
 34c:	a6 17       	cp	r26, r22
 34e:	b7 07       	cpc	r27, r23
 350:	10 f0       	brcs	.+4      	; 0x356 <__udivmodhi4_ep>
 352:	a6 1b       	sub	r26, r22
 354:	b7 0b       	sbc	r27, r23

00000356 <__udivmodhi4_ep>:
 356:	88 1f       	adc	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	5a 95       	dec	r21
 35c:	a9 f7       	brne	.-22     	; 0x348 <__udivmodhi4_loop>
 35e:	80 95       	com	r24
 360:	90 95       	com	r25
 362:	bc 01       	movw	r22, r24
 364:	cd 01       	movw	r24, r26
 366:	08 95       	ret

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
