
AVRGCC4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000016  00800060  00800060  0000066e  2**0
                  ALLOC
  2 .stab         000016e0  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005b1  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00002301  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000e0  00000000  00000000  00002321  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002b2  00000000  00000000  00002401  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000140  00000000  00000000  000026b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003be  00000000  00000000  000027f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00002bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000121  00000000  00000000  00002c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000193  00000000  00000000  00002d85  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000001e  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_1>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_2>
   c:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 37       	cpi	r26, 0x76	; 118
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  74:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <TimerINIT>:

}

void TimerINIT()
{
	MCUCR = 0x0F;
  7c:	8f e0       	ldi	r24, 0x0F	; 15
  7e:	85 bf       	out	0x35, r24	; 53
	GICR = 0xC0;
  80:	80 ec       	ldi	r24, 0xC0	; 192
  82:	8b bf       	out	0x3b, r24	; 59
// 	TCCR1B |= (1<<WGM12) | (1<<CS10);
// 	OCR1A = 10;
// 	TIMSK |= (1 << OCIE1A);	
	
	//TIMER2
	TCCR2 |= (1<<WGM21) | (1<<CS22) | (1<<CS21);
  84:	85 b5       	in	r24, 0x25	; 37
  86:	8e 60       	ori	r24, 0x0E	; 14
  88:	85 bd       	out	0x25, r24	; 37
	OCR2 = 10;
  8a:	8a e0       	ldi	r24, 0x0A	; 10
  8c:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2);
  8e:	89 b7       	in	r24, 0x39	; 57
  90:	80 68       	ori	r24, 0x80	; 128
  92:	89 bf       	out	0x39, r24	; 57
}
  94:	08 95       	ret

00000096 <__vector_14>:

ISR(ADC_vect)
{	
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
	res = ADCL;
  aa:	24 b1       	in	r18, 0x04	; 4
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	30 93 6b 00 	sts	0x006B, r19
  b2:	20 93 6a 00 	sts	0x006A, r18
	res |= (ADCH << 8);
  b6:	45 b1       	in	r20, 0x05	; 5
  b8:	94 2f       	mov	r25, r20
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	82 2b       	or	r24, r18
  be:	93 2b       	or	r25, r19
  c0:	90 93 6b 00 	sts	0x006B, r25
  c4:	80 93 6a 00 	sts	0x006A, r24
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	4f 91       	pop	r20
  ce:	3f 91       	pop	r19
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <__vector_1>:
	j++;
	j %= 4;
}

ISR(INT0_vect)
{
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
	if (enACP >= 0)
  ea:	80 91 62 00 	lds	r24, 0x0062
  ee:	90 91 63 00 	lds	r25, 0x0063
  f2:	99 23       	and	r25, r25
  f4:	3c f0       	brlt	.+14     	; 0x104 <__vector_1+0x28>
	{
		enACP = 1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	90 93 63 00 	sts	0x0063, r25
  fe:	80 93 62 00 	sts	0x0062, r24
 102:	04 c0       	rjmp	.+8      	; 0x10c <__vector_1+0x30>
	}
	else 
	{
		enACP = 0;
 104:	10 92 63 00 	sts	0x0063, r1
 108:	10 92 62 00 	sts	0x0062, r1
	}
}
 10c:	9f 91       	pop	r25
 10e:	8f 91       	pop	r24
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_2>:

ISR(INT1_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
	if (enACP >= 2)
 128:	80 91 62 00 	lds	r24, 0x0062
 12c:	90 91 63 00 	lds	r25, 0x0063
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	91 05       	cpc	r25, r1
 134:	2c f0       	brlt	.+10     	; 0x140 <__vector_2+0x26>
	{
		modeACP = 0;
 136:	10 92 65 00 	sts	0x0065, r1
 13a:	10 92 64 00 	sts	0x0064, r1
 13e:	09 c0       	rjmp	.+18     	; 0x152 <__vector_2+0x38>
	}
	else 
	{
		modeACP++;
 140:	80 91 64 00 	lds	r24, 0x0064
 144:	90 91 65 00 	lds	r25, 0x0065
 148:	01 96       	adiw	r24, 0x01	; 1
 14a:	90 93 65 00 	sts	0x0065, r25
 14e:	80 93 64 00 	sts	0x0064, r24
	}
}
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <ToggleACP>:

int ToggleACP(int en)
{
	if (en >= 1)
 160:	18 16       	cp	r1, r24
 162:	19 06       	cpc	r1, r25
 164:	3c f4       	brge	.+14     	; 0x174 <ToggleACP+0x14>
	{
		ADMUX |= (1<<REFS0) | (1<<MUX1); 
 166:	87 b1       	in	r24, 0x07	; 7
 168:	82 64       	ori	r24, 0x42	; 66
 16a:	87 b9       	out	0x07, r24	; 7
		ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);
 16c:	86 b1       	in	r24, 0x06	; 6
 16e:	88 6e       	ori	r24, 0xE8	; 232
 170:	86 b9       	out	0x06, r24	; 6
 172:	08 95       	ret
	}
	else
	{
		ADMUX = 0x0; 
 174:	17 b8       	out	0x07, r1	; 7
		ADCSRA = 0x0;
 176:	16 b8       	out	0x06, r1	; 6
	}
}
 178:	08 95       	ret

0000017a <NumToArr>:
			
	}
}

void NumToArr(int numbr)
{	
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	ee e6       	ldi	r30, 0x6E	; 110
 180:	f0 e0       	ldi	r31, 0x00	; 0
			break;
			
	}
}

void NumToArr(int numbr)
 182:	ef 01       	movw	r28, r30
 184:	28 96       	adiw	r28, 0x08	; 8
{	
	for (int k = 0; k < DIGITS; k++)
	{		
		arr[k] = numbr % 10;
 186:	2a e0       	ldi	r18, 0x0A	; 10
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	b9 01       	movw	r22, r18
 18c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodhi4>
 190:	81 93       	st	Z+, r24
 192:	91 93       	st	Z+, r25
		numbr /= 10;
 194:	86 2f       	mov	r24, r22
 196:	97 2f       	mov	r25, r23
	}
}

void NumToArr(int numbr)
{	
	for (int k = 0; k < DIGITS; k++)
 198:	ec 17       	cp	r30, r28
 19a:	fd 07       	cpc	r31, r29
 19c:	b1 f7       	brne	.-20     	; 0x18a <NumToArr+0x10>
	{		
		arr[k] = numbr % 10;
		numbr /= 10;
	}
}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SwitchACPMode>:
	}
}

int SwitchACPMode(int mode)
{
	switch(mode)
 1a4:	81 30       	cpi	r24, 0x01	; 1
 1a6:	91 05       	cpc	r25, r1
 1a8:	39 f0       	breq	.+14     	; 0x1b8 <SwitchACPMode+0x14>
 1aa:	82 30       	cpi	r24, 0x02	; 2
 1ac:	91 05       	cpc	r25, r1
 1ae:	69 f0       	breq	.+26     	; 0x1ca <SwitchACPMode+0x26>
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	d9 f5       	brne	.+118    	; 0x22a <SwitchACPMode+0x86>
	{
		case 0: 
			DDRC = 0x0;
 1b4:	14 ba       	out	0x14, r1	; 20
			break;
 1b6:	08 95       	ret
		case 1:		
			DDRC = 0xFF;
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	84 bb       	out	0x14, r24	; 20
			NumToArr(res);	
 1bc:	80 91 6a 00 	lds	r24, 0x006A
 1c0:	90 91 6b 00 	lds	r25, 0x006B
 1c4:	0e 94 bd 00 	call	0x17a	; 0x17a <NumToArr>
			break;
 1c8:	08 95       	ret
			
		case 2:
			DDRC = 0xFF;
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	84 bb       	out	0x14, r24	; 20
			volt = (float)((0.5 * res) / 1024) * 10000;
 1ce:	60 91 6a 00 	lds	r22, 0x006A
 1d2:	70 91 6b 00 	lds	r23, 0x006B
 1d6:	88 27       	eor	r24, r24
 1d8:	77 fd       	sbrc	r23, 7
 1da:	80 95       	com	r24
 1dc:	98 2f       	mov	r25, r24
 1de:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__floatsisf>
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	5f e3       	ldi	r21, 0x3F	; 63
 1ea:	0e 94 49 02 	call	0x492	; 0x492 <__mulsf3>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	40 e8       	ldi	r20, 0x80	; 128
 1f4:	5a e3       	ldi	r21, 0x3A	; 58
 1f6:	0e 94 49 02 	call	0x492	; 0x492 <__mulsf3>
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e4       	ldi	r19, 0x40	; 64
 1fe:	4c e1       	ldi	r20, 0x1C	; 28
 200:	56 e4       	ldi	r21, 0x46	; 70
 202:	0e 94 49 02 	call	0x492	; 0x492 <__mulsf3>
 206:	26 2f       	mov	r18, r22
 208:	37 2f       	mov	r19, r23
 20a:	48 2f       	mov	r20, r24
 20c:	59 2f       	mov	r21, r25
 20e:	20 93 66 00 	sts	0x0066, r18
 212:	30 93 67 00 	sts	0x0067, r19
 216:	40 93 68 00 	sts	0x0068, r20
 21a:	50 93 69 00 	sts	0x0069, r21
 			NumToArr(volt);
 21e:	0e 94 b2 01 	call	0x364	; 0x364 <__fixsfsi>
 222:	dc 01       	movw	r26, r24
 224:	cb 01       	movw	r24, r22
 226:	0e 94 bd 00 	call	0x17a	; 0x17a <NumToArr>
			break;
			
	}
}
 22a:	08 95       	ret

0000022c <main>:
int j = 0;
int arr[DIGITS];

int main(void)
{
	DDRA = 0xF0;
 22c:	80 ef       	ldi	r24, 0xF0	; 240
 22e:	8a bb       	out	0x1a, r24	; 26
//	DDRC = 0xFF;
	DDRD |= BTN1 | BTN2 | RED | GREEN;
 230:	81 b3       	in	r24, 0x11	; 17
 232:	8c 6a       	ori	r24, 0xAC	; 172
 234:	81 bb       	out	0x11, r24	; 17
	
	PORTA = 0x00;
 236:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;
 238:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
 23a:	12 ba       	out	0x12, r1	; 18
		
	TimerINIT();
 23c:	0e 94 3e 00 	call	0x7c	; 0x7c <TimerINIT>
	
// 	ADMUX |= (1<<REFS0) | (1<<MUX1); 
// 	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADIE) | (1<<ADATE);

	sei();
 240:	78 94       	sei
	
	while(1)
	{	
		//NumToArr(res);
		
		ToggleACP(enACP);
 242:	80 91 62 00 	lds	r24, 0x0062
 246:	90 91 63 00 	lds	r25, 0x0063
 24a:	0e 94 b0 00 	call	0x160	; 0x160 <ToggleACP>
		SwitchACPMode(modeACP);		
 24e:	80 91 64 00 	lds	r24, 0x0064
 252:	90 91 65 00 	lds	r25, 0x0065
 256:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SwitchACPMode>
 25a:	f3 cf       	rjmp	.-26     	; 0x242 <main+0x16>

0000025c <DecToDigit>:

unsigned char DecToDigit(unsigned char Dec)
{	
	unsigned char Digit;
	
	switch(Dec)
 25c:	84 30       	cpi	r24, 0x04	; 4
 25e:	f9 f0       	breq	.+62     	; 0x29e <DecToDigit+0x42>
 260:	85 30       	cpi	r24, 0x05	; 5
 262:	48 f4       	brcc	.+18     	; 0x276 <DecToDigit+0x1a>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	49 f1       	breq	.+82     	; 0x2ba <DecToDigit+0x5e>
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	98 f0       	brcs	.+38     	; 0x292 <DecToDigit+0x36>
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	99 f0       	breq	.+38     	; 0x296 <DecToDigit+0x3a>
 270:	83 30       	cpi	r24, 0x03	; 3
 272:	09 f5       	brne	.+66     	; 0x2b6 <DecToDigit+0x5a>
 274:	12 c0       	rjmp	.+36     	; 0x29a <DecToDigit+0x3e>
 276:	87 30       	cpi	r24, 0x07	; 7
 278:	c1 f0       	breq	.+48     	; 0x2aa <DecToDigit+0x4e>
 27a:	88 30       	cpi	r24, 0x08	; 8
 27c:	28 f4       	brcc	.+10     	; 0x288 <DecToDigit+0x2c>
 27e:	85 30       	cpi	r24, 0x05	; 5
 280:	81 f0       	breq	.+32     	; 0x2a2 <DecToDigit+0x46>
 282:	86 30       	cpi	r24, 0x06	; 6
 284:	c1 f4       	brne	.+48     	; 0x2b6 <DecToDigit+0x5a>
 286:	0f c0       	rjmp	.+30     	; 0x2a6 <DecToDigit+0x4a>
 288:	88 30       	cpi	r24, 0x08	; 8
 28a:	89 f0       	breq	.+34     	; 0x2ae <DecToDigit+0x52>
 28c:	89 30       	cpi	r24, 0x09	; 9
 28e:	99 f4       	brne	.+38     	; 0x2b6 <DecToDigit+0x5a>
 290:	10 c0       	rjmp	.+32     	; 0x2b2 <DecToDigit+0x56>
	{
		case 0:
			Digit = 0b01011111;				
 292:	8f e5       	ldi	r24, 0x5F	; 95
 294:	08 95       	ret
			break;
		case 1:
			Digit = 0b00000110;					
			break;
		case 2:
			Digit = 0b00111011;					
 296:	8b e3       	ldi	r24, 0x3B	; 59
			break;
 298:	08 95       	ret
		case 3:
			Digit = 0b00101111;
 29a:	8f e2       	ldi	r24, 0x2F	; 47
			break;
 29c:	08 95       	ret
		case 4:
			Digit = 0b01100110;
 29e:	86 e6       	ldi	r24, 0x66	; 102
			break;
 2a0:	08 95       	ret
		case 5:
			Digit = 0b01101101;
 2a2:	8d e6       	ldi	r24, 0x6D	; 109
			break;
 2a4:	08 95       	ret
		case 6:
			Digit = 0b01111101;
 2a6:	8d e7       	ldi	r24, 0x7D	; 125
			break;
 2a8:	08 95       	ret
		case 7:
			Digit = 0b00000111;
 2aa:	87 e0       	ldi	r24, 0x07	; 7
			break;
 2ac:	08 95       	ret
		case 8:
			Digit = 0b01111111;
 2ae:	8f e7       	ldi	r24, 0x7F	; 127
			break;		
 2b0:	08 95       	ret
		case 9:
			Digit = 0b01101111;
 2b2:	8f e6       	ldi	r24, 0x6F	; 111
			break;
 2b4:	08 95       	ret
		default:
			Digit = 0b00000000;
 2b6:	80 e0       	ldi	r24, 0x00	; 0
			break;			
 2b8:	08 95       	ret
	{
		case 0:
			Digit = 0b01011111;				
			break;
		case 1:
			Digit = 0b00000110;					
 2ba:	86 e0       	ldi	r24, 0x06	; 6
			Digit = 0b00000000;
			break;			
 	}	
	 
	return Digit;
}
 2bc:	08 95       	ret

000002be <__vector_3>:
	res = ADCL;
	res |= (ADCH << 8);
}

ISR(TIMER2_COMP_vect)
{	
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
	PORTC = 0x00;
 2e4:	15 ba       	out	0x15, r1	; 21
	PORTA = 0x00;
 2e6:	1b ba       	out	0x1b, r1	; 27
	//DDRD = 0xB0;
	
	PORTC = DecToDigit(arr[j]);
 2e8:	c0 91 6c 00 	lds	r28, 0x006C
 2ec:	d0 91 6d 00 	lds	r29, 0x006D
 2f0:	fe 01       	movw	r30, r28
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	e2 59       	subi	r30, 0x92	; 146
 2f8:	ff 4f       	sbci	r31, 0xFF	; 255
 2fa:	80 81       	ld	r24, Z
 2fc:	0e 94 2e 01 	call	0x25c	; 0x25c <DecToDigit>
 300:	85 bb       	out	0x15, r24	; 21
	PORTA = (1 << (7 - j));	
 302:	87 e0       	ldi	r24, 0x07	; 7
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	8c 1b       	sub	r24, r28
 308:	9d 0b       	sbc	r25, r29
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	a9 01       	movw	r20, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <__vector_3+0x58>
 312:	44 0f       	add	r20, r20
 314:	55 1f       	adc	r21, r21
 316:	8a 95       	dec	r24
 318:	e2 f7       	brpl	.-8      	; 0x312 <__vector_3+0x54>
 31a:	4b bb       	out	0x1b, r20	; 27
	
	if (j == 3)
 31c:	c3 30       	cpi	r28, 0x03	; 3
 31e:	d1 05       	cpc	r29, r1
 320:	09 f4       	brne	.+2      	; 0x324 <__vector_3+0x66>
	{
		PINC |= 0b10000000;	
 322:	9f 9a       	sbi	0x13, 7	; 19
	}	
	
	j++;
 324:	80 91 6c 00 	lds	r24, 0x006C
 328:	90 91 6d 00 	lds	r25, 0x006D
 32c:	01 96       	adiw	r24, 0x01	; 1
	j %= 4;
 32e:	64 e0       	ldi	r22, 0x04	; 4
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__divmodhi4>
 336:	90 93 6d 00 	sts	0x006D, r25
 33a:	80 93 6c 00 	sts	0x006C, r24
}
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	bf 91       	pop	r27
 348:	af 91       	pop	r26
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	7f 91       	pop	r23
 350:	6f 91       	pop	r22
 352:	5f 91       	pop	r21
 354:	4f 91       	pop	r20
 356:	3f 91       	pop	r19
 358:	2f 91       	pop	r18
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <__fixsfsi>:
 364:	04 d0       	rcall	.+8      	; 0x36e <__fixunssfsi>
 366:	68 94       	set
 368:	b1 11       	cpse	r27, r1
 36a:	8d c0       	rjmp	.+282    	; 0x486 <__fp_szero>
 36c:	08 95       	ret

0000036e <__fixunssfsi>:
 36e:	70 d0       	rcall	.+224    	; 0x450 <__fp_splitA>
 370:	88 f0       	brcs	.+34     	; 0x394 <__fixunssfsi+0x26>
 372:	9f 57       	subi	r25, 0x7F	; 127
 374:	90 f0       	brcs	.+36     	; 0x39a <__fixunssfsi+0x2c>
 376:	b9 2f       	mov	r27, r25
 378:	99 27       	eor	r25, r25
 37a:	b7 51       	subi	r27, 0x17	; 23
 37c:	a0 f0       	brcs	.+40     	; 0x3a6 <__fixunssfsi+0x38>
 37e:	d1 f0       	breq	.+52     	; 0x3b4 <__fixunssfsi+0x46>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	88 1f       	adc	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	1a f0       	brmi	.+6      	; 0x390 <__fixunssfsi+0x22>
 38a:	ba 95       	dec	r27
 38c:	c9 f7       	brne	.-14     	; 0x380 <__fixunssfsi+0x12>
 38e:	12 c0       	rjmp	.+36     	; 0x3b4 <__fixunssfsi+0x46>
 390:	b1 30       	cpi	r27, 0x01	; 1
 392:	81 f0       	breq	.+32     	; 0x3b4 <__fixunssfsi+0x46>
 394:	77 d0       	rcall	.+238    	; 0x484 <__fp_zero>
 396:	b1 e0       	ldi	r27, 0x01	; 1
 398:	08 95       	ret
 39a:	74 c0       	rjmp	.+232    	; 0x484 <__fp_zero>
 39c:	67 2f       	mov	r22, r23
 39e:	78 2f       	mov	r23, r24
 3a0:	88 27       	eor	r24, r24
 3a2:	b8 5f       	subi	r27, 0xF8	; 248
 3a4:	39 f0       	breq	.+14     	; 0x3b4 <__fixunssfsi+0x46>
 3a6:	b9 3f       	cpi	r27, 0xF9	; 249
 3a8:	cc f3       	brlt	.-14     	; 0x39c <__fixunssfsi+0x2e>
 3aa:	86 95       	lsr	r24
 3ac:	77 95       	ror	r23
 3ae:	67 95       	ror	r22
 3b0:	b3 95       	inc	r27
 3b2:	d9 f7       	brne	.-10     	; 0x3aa <__fixunssfsi+0x3c>
 3b4:	3e f4       	brtc	.+14     	; 0x3c4 <__fixunssfsi+0x56>
 3b6:	90 95       	com	r25
 3b8:	80 95       	com	r24
 3ba:	70 95       	com	r23
 3bc:	61 95       	neg	r22
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	8f 4f       	sbci	r24, 0xFF	; 255
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	08 95       	ret

000003c6 <__floatunsisf>:
 3c6:	e8 94       	clt
 3c8:	09 c0       	rjmp	.+18     	; 0x3dc <__floatsisf+0x12>

000003ca <__floatsisf>:
 3ca:	97 fb       	bst	r25, 7
 3cc:	3e f4       	brtc	.+14     	; 0x3dc <__floatsisf+0x12>
 3ce:	90 95       	com	r25
 3d0:	80 95       	com	r24
 3d2:	70 95       	com	r23
 3d4:	61 95       	neg	r22
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255
 3d8:	8f 4f       	sbci	r24, 0xFF	; 255
 3da:	9f 4f       	sbci	r25, 0xFF	; 255
 3dc:	99 23       	and	r25, r25
 3de:	a9 f0       	breq	.+42     	; 0x40a <__floatsisf+0x40>
 3e0:	f9 2f       	mov	r31, r25
 3e2:	96 e9       	ldi	r25, 0x96	; 150
 3e4:	bb 27       	eor	r27, r27
 3e6:	93 95       	inc	r25
 3e8:	f6 95       	lsr	r31
 3ea:	87 95       	ror	r24
 3ec:	77 95       	ror	r23
 3ee:	67 95       	ror	r22
 3f0:	b7 95       	ror	r27
 3f2:	f1 11       	cpse	r31, r1
 3f4:	f8 cf       	rjmp	.-16     	; 0x3e6 <__floatsisf+0x1c>
 3f6:	fa f4       	brpl	.+62     	; 0x436 <__floatsisf+0x6c>
 3f8:	bb 0f       	add	r27, r27
 3fa:	11 f4       	brne	.+4      	; 0x400 <__floatsisf+0x36>
 3fc:	60 ff       	sbrs	r22, 0
 3fe:	1b c0       	rjmp	.+54     	; 0x436 <__floatsisf+0x6c>
 400:	6f 5f       	subi	r22, 0xFF	; 255
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	8f 4f       	sbci	r24, 0xFF	; 255
 406:	9f 4f       	sbci	r25, 0xFF	; 255
 408:	16 c0       	rjmp	.+44     	; 0x436 <__floatsisf+0x6c>
 40a:	88 23       	and	r24, r24
 40c:	11 f0       	breq	.+4      	; 0x412 <__floatsisf+0x48>
 40e:	96 e9       	ldi	r25, 0x96	; 150
 410:	11 c0       	rjmp	.+34     	; 0x434 <__floatsisf+0x6a>
 412:	77 23       	and	r23, r23
 414:	21 f0       	breq	.+8      	; 0x41e <__floatsisf+0x54>
 416:	9e e8       	ldi	r25, 0x8E	; 142
 418:	87 2f       	mov	r24, r23
 41a:	76 2f       	mov	r23, r22
 41c:	05 c0       	rjmp	.+10     	; 0x428 <__floatsisf+0x5e>
 41e:	66 23       	and	r22, r22
 420:	71 f0       	breq	.+28     	; 0x43e <__floatsisf+0x74>
 422:	96 e8       	ldi	r25, 0x86	; 134
 424:	86 2f       	mov	r24, r22
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	2a f0       	brmi	.+10     	; 0x436 <__floatsisf+0x6c>
 42c:	9a 95       	dec	r25
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	88 1f       	adc	r24, r24
 434:	da f7       	brpl	.-10     	; 0x42c <__floatsisf+0x62>
 436:	88 0f       	add	r24, r24
 438:	96 95       	lsr	r25
 43a:	87 95       	ror	r24
 43c:	97 f9       	bld	r25, 7
 43e:	08 95       	ret

00000440 <__fp_split3>:
 440:	57 fd       	sbrc	r21, 7
 442:	90 58       	subi	r25, 0x80	; 128
 444:	44 0f       	add	r20, r20
 446:	55 1f       	adc	r21, r21
 448:	59 f0       	breq	.+22     	; 0x460 <__stack+0x1>
 44a:	5f 3f       	cpi	r21, 0xFF	; 255
 44c:	71 f0       	breq	.+28     	; 0x46a <__stack+0xb>
 44e:	47 95       	ror	r20

00000450 <__fp_splitA>:
 450:	88 0f       	add	r24, r24
 452:	97 fb       	bst	r25, 7
 454:	99 1f       	adc	r25, r25
 456:	61 f0       	breq	.+24     	; 0x470 <__stack+0x11>
 458:	9f 3f       	cpi	r25, 0xFF	; 255
 45a:	79 f0       	breq	.+30     	; 0x47a <__stack+0x1b>
 45c:	87 95       	ror	r24
 45e:	08 95       	ret
 460:	12 16       	cp	r1, r18
 462:	13 06       	cpc	r1, r19
 464:	14 06       	cpc	r1, r20
 466:	55 1f       	adc	r21, r21
 468:	f2 cf       	rjmp	.-28     	; 0x44e <__fp_split3+0xe>
 46a:	46 95       	lsr	r20
 46c:	f1 df       	rcall	.-30     	; 0x450 <__fp_splitA>
 46e:	08 c0       	rjmp	.+16     	; 0x480 <__stack+0x21>
 470:	16 16       	cp	r1, r22
 472:	17 06       	cpc	r1, r23
 474:	18 06       	cpc	r1, r24
 476:	99 1f       	adc	r25, r25
 478:	f1 cf       	rjmp	.-30     	; 0x45c <__fp_splitA+0xc>
 47a:	86 95       	lsr	r24
 47c:	71 05       	cpc	r23, r1
 47e:	61 05       	cpc	r22, r1
 480:	08 94       	sec
 482:	08 95       	ret

00000484 <__fp_zero>:
 484:	e8 94       	clt

00000486 <__fp_szero>:
 486:	bb 27       	eor	r27, r27
 488:	66 27       	eor	r22, r22
 48a:	77 27       	eor	r23, r23
 48c:	cb 01       	movw	r24, r22
 48e:	97 f9       	bld	r25, 7
 490:	08 95       	ret

00000492 <__mulsf3>:
 492:	0b d0       	rcall	.+22     	; 0x4aa <__mulsf3x>
 494:	78 c0       	rjmp	.+240    	; 0x586 <__fp_round>
 496:	69 d0       	rcall	.+210    	; 0x56a <__fp_pscA>
 498:	28 f0       	brcs	.+10     	; 0x4a4 <__mulsf3+0x12>
 49a:	6e d0       	rcall	.+220    	; 0x578 <__fp_pscB>
 49c:	18 f0       	brcs	.+6      	; 0x4a4 <__mulsf3+0x12>
 49e:	95 23       	and	r25, r21
 4a0:	09 f0       	breq	.+2      	; 0x4a4 <__mulsf3+0x12>
 4a2:	5a c0       	rjmp	.+180    	; 0x558 <__fp_inf>
 4a4:	5f c0       	rjmp	.+190    	; 0x564 <__fp_nan>
 4a6:	11 24       	eor	r1, r1
 4a8:	ee cf       	rjmp	.-36     	; 0x486 <__fp_szero>

000004aa <__mulsf3x>:
 4aa:	ca df       	rcall	.-108    	; 0x440 <__fp_split3>
 4ac:	a0 f3       	brcs	.-24     	; 0x496 <__mulsf3+0x4>

000004ae <__mulsf3_pse>:
 4ae:	95 9f       	mul	r25, r21
 4b0:	d1 f3       	breq	.-12     	; 0x4a6 <__mulsf3+0x14>
 4b2:	95 0f       	add	r25, r21
 4b4:	50 e0       	ldi	r21, 0x00	; 0
 4b6:	55 1f       	adc	r21, r21
 4b8:	62 9f       	mul	r22, r18
 4ba:	f0 01       	movw	r30, r0
 4bc:	72 9f       	mul	r23, r18
 4be:	bb 27       	eor	r27, r27
 4c0:	f0 0d       	add	r31, r0
 4c2:	b1 1d       	adc	r27, r1
 4c4:	63 9f       	mul	r22, r19
 4c6:	aa 27       	eor	r26, r26
 4c8:	f0 0d       	add	r31, r0
 4ca:	b1 1d       	adc	r27, r1
 4cc:	aa 1f       	adc	r26, r26
 4ce:	64 9f       	mul	r22, r20
 4d0:	66 27       	eor	r22, r22
 4d2:	b0 0d       	add	r27, r0
 4d4:	a1 1d       	adc	r26, r1
 4d6:	66 1f       	adc	r22, r22
 4d8:	82 9f       	mul	r24, r18
 4da:	22 27       	eor	r18, r18
 4dc:	b0 0d       	add	r27, r0
 4de:	a1 1d       	adc	r26, r1
 4e0:	62 1f       	adc	r22, r18
 4e2:	73 9f       	mul	r23, r19
 4e4:	b0 0d       	add	r27, r0
 4e6:	a1 1d       	adc	r26, r1
 4e8:	62 1f       	adc	r22, r18
 4ea:	83 9f       	mul	r24, r19
 4ec:	a0 0d       	add	r26, r0
 4ee:	61 1d       	adc	r22, r1
 4f0:	22 1f       	adc	r18, r18
 4f2:	74 9f       	mul	r23, r20
 4f4:	33 27       	eor	r19, r19
 4f6:	a0 0d       	add	r26, r0
 4f8:	61 1d       	adc	r22, r1
 4fa:	23 1f       	adc	r18, r19
 4fc:	84 9f       	mul	r24, r20
 4fe:	60 0d       	add	r22, r0
 500:	21 1d       	adc	r18, r1
 502:	82 2f       	mov	r24, r18
 504:	76 2f       	mov	r23, r22
 506:	6a 2f       	mov	r22, r26
 508:	11 24       	eor	r1, r1
 50a:	9f 57       	subi	r25, 0x7F	; 127
 50c:	50 40       	sbci	r21, 0x00	; 0
 50e:	8a f0       	brmi	.+34     	; 0x532 <__mulsf3_pse+0x84>
 510:	e1 f0       	breq	.+56     	; 0x54a <__mulsf3_pse+0x9c>
 512:	88 23       	and	r24, r24
 514:	4a f0       	brmi	.+18     	; 0x528 <__mulsf3_pse+0x7a>
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	bb 1f       	adc	r27, r27
 51c:	66 1f       	adc	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	88 1f       	adc	r24, r24
 522:	91 50       	subi	r25, 0x01	; 1
 524:	50 40       	sbci	r21, 0x00	; 0
 526:	a9 f7       	brne	.-22     	; 0x512 <__mulsf3_pse+0x64>
 528:	9e 3f       	cpi	r25, 0xFE	; 254
 52a:	51 05       	cpc	r21, r1
 52c:	70 f0       	brcs	.+28     	; 0x54a <__mulsf3_pse+0x9c>
 52e:	14 c0       	rjmp	.+40     	; 0x558 <__fp_inf>
 530:	aa cf       	rjmp	.-172    	; 0x486 <__fp_szero>
 532:	5f 3f       	cpi	r21, 0xFF	; 255
 534:	ec f3       	brlt	.-6      	; 0x530 <__mulsf3_pse+0x82>
 536:	98 3e       	cpi	r25, 0xE8	; 232
 538:	dc f3       	brlt	.-10     	; 0x530 <__mulsf3_pse+0x82>
 53a:	86 95       	lsr	r24
 53c:	77 95       	ror	r23
 53e:	67 95       	ror	r22
 540:	b7 95       	ror	r27
 542:	f7 95       	ror	r31
 544:	e7 95       	ror	r30
 546:	9f 5f       	subi	r25, 0xFF	; 255
 548:	c1 f7       	brne	.-16     	; 0x53a <__mulsf3_pse+0x8c>
 54a:	fe 2b       	or	r31, r30
 54c:	88 0f       	add	r24, r24
 54e:	91 1d       	adc	r25, r1
 550:	96 95       	lsr	r25
 552:	87 95       	ror	r24
 554:	97 f9       	bld	r25, 7
 556:	08 95       	ret

00000558 <__fp_inf>:
 558:	97 f9       	bld	r25, 7
 55a:	9f 67       	ori	r25, 0x7F	; 127
 55c:	80 e8       	ldi	r24, 0x80	; 128
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	08 95       	ret

00000564 <__fp_nan>:
 564:	9f ef       	ldi	r25, 0xFF	; 255
 566:	80 ec       	ldi	r24, 0xC0	; 192
 568:	08 95       	ret

0000056a <__fp_pscA>:
 56a:	00 24       	eor	r0, r0
 56c:	0a 94       	dec	r0
 56e:	16 16       	cp	r1, r22
 570:	17 06       	cpc	r1, r23
 572:	18 06       	cpc	r1, r24
 574:	09 06       	cpc	r0, r25
 576:	08 95       	ret

00000578 <__fp_pscB>:
 578:	00 24       	eor	r0, r0
 57a:	0a 94       	dec	r0
 57c:	12 16       	cp	r1, r18
 57e:	13 06       	cpc	r1, r19
 580:	14 06       	cpc	r1, r20
 582:	05 06       	cpc	r0, r21
 584:	08 95       	ret

00000586 <__fp_round>:
 586:	09 2e       	mov	r0, r25
 588:	03 94       	inc	r0
 58a:	00 0c       	add	r0, r0
 58c:	11 f4       	brne	.+4      	; 0x592 <__fp_round+0xc>
 58e:	88 23       	and	r24, r24
 590:	52 f0       	brmi	.+20     	; 0x5a6 <__fp_round+0x20>
 592:	bb 0f       	add	r27, r27
 594:	40 f4       	brcc	.+16     	; 0x5a6 <__fp_round+0x20>
 596:	bf 2b       	or	r27, r31
 598:	11 f4       	brne	.+4      	; 0x59e <__fp_round+0x18>
 59a:	60 ff       	sbrs	r22, 0
 59c:	04 c0       	rjmp	.+8      	; 0x5a6 <__fp_round+0x20>
 59e:	6f 5f       	subi	r22, 0xFF	; 255
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	08 95       	ret

000005a8 <__divmodhi4>:
 5a8:	97 fb       	bst	r25, 7
 5aa:	09 2e       	mov	r0, r25
 5ac:	07 26       	eor	r0, r23
 5ae:	0a d0       	rcall	.+20     	; 0x5c4 <__divmodhi4_neg1>
 5b0:	77 fd       	sbrc	r23, 7
 5b2:	04 d0       	rcall	.+8      	; 0x5bc <__divmodhi4_neg2>
 5b4:	0c d0       	rcall	.+24     	; 0x5ce <__udivmodhi4>
 5b6:	06 d0       	rcall	.+12     	; 0x5c4 <__divmodhi4_neg1>
 5b8:	00 20       	and	r0, r0
 5ba:	1a f4       	brpl	.+6      	; 0x5c2 <__divmodhi4_exit>

000005bc <__divmodhi4_neg2>:
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255

000005c2 <__divmodhi4_exit>:
 5c2:	08 95       	ret

000005c4 <__divmodhi4_neg1>:
 5c4:	f6 f7       	brtc	.-4      	; 0x5c2 <__divmodhi4_exit>
 5c6:	90 95       	com	r25
 5c8:	81 95       	neg	r24
 5ca:	9f 4f       	sbci	r25, 0xFF	; 255
 5cc:	08 95       	ret

000005ce <__udivmodhi4>:
 5ce:	aa 1b       	sub	r26, r26
 5d0:	bb 1b       	sub	r27, r27
 5d2:	51 e1       	ldi	r21, 0x11	; 17
 5d4:	07 c0       	rjmp	.+14     	; 0x5e4 <__udivmodhi4_ep>

000005d6 <__udivmodhi4_loop>:
 5d6:	aa 1f       	adc	r26, r26
 5d8:	bb 1f       	adc	r27, r27
 5da:	a6 17       	cp	r26, r22
 5dc:	b7 07       	cpc	r27, r23
 5de:	10 f0       	brcs	.+4      	; 0x5e4 <__udivmodhi4_ep>
 5e0:	a6 1b       	sub	r26, r22
 5e2:	b7 0b       	sbc	r27, r23

000005e4 <__udivmodhi4_ep>:
 5e4:	88 1f       	adc	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	5a 95       	dec	r21
 5ea:	a9 f7       	brne	.-22     	; 0x5d6 <__udivmodhi4_loop>
 5ec:	80 95       	com	r24
 5ee:	90 95       	com	r25
 5f0:	bc 01       	movw	r22, r24
 5f2:	cd 01       	movw	r24, r26
 5f4:	08 95       	ret

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
